{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/android-chrome-512x512.png","path":"images/android-chrome-512x512.png","modified":0,"renderable":0},{"_id":"source/images/image-20220122042859794.png","path":"images/image-20220122042859794.png","modified":0,"renderable":0},{"_id":"source/images/image-20220127234804448.png","path":"images/image-20220127234804448.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128001412487.png","path":"images/image-20220128001412487.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128001840194.png","path":"images/image-20220128001840194.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128004402035.png","path":"images/image-20220128004402035.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128005609606.png","path":"images/image-20220128005609606.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128010402803.png","path":"images/image-20220128010402803.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128011300968.png","path":"images/image-20220128011300968.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128012502642.png","path":"images/image-20220128012502642.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128013028710.png","path":"images/image-20220128013028710.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128013638288.png","path":"images/image-20220128013638288.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128013317738.png","path":"images/image-20220128013317738.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128014137121.png","path":"images/image-20220128014137121.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128014652491.png","path":"images/image-20220128014652491.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128015227879.png","path":"images/image-20220128015227879.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128015512864.png","path":"images/image-20220128015512864.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128021252933.png","path":"images/image-20220128021252933.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128090942876.png","path":"images/image-20220128090942876.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128100350201.png","path":"images/image-20220128100350201.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128100623377.png","path":"images/image-20220128100623377.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128104026274.png","path":"images/image-20220128104026274.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128160641398.png","path":"images/image-20220128160641398.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128161314580.png","path":"images/image-20220128161314580.png","modified":0,"renderable":0},{"_id":"source/images/image-20220128164608048.png","path":"images/image-20220128164608048.png","modified":0,"renderable":0},{"_id":"source/images/image-20220216140801797.png","path":"images/image-20220216140801797.png","modified":0,"renderable":0},{"_id":"source/images/image-20220216141425332.png","path":"images/image-20220216141425332.png","modified":0,"renderable":0},{"_id":"source/images/image-20220218103014359.png","path":"images/image-20220218103014359.png","modified":0,"renderable":0},{"_id":"themes/geek/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/geek/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/geek/source/js/js.js","path":"js/js.js","modified":0,"renderable":1},{"_id":"themes/geek/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/jquery.min.js","path":"libs/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/highlight.pack.js","path":"libs/highlight/highlight.pack.js","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/HELP-US-OUT.txt","path":"libs/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/animated.less","path":"libs/font-awesome/less/animated.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/bordered-pulled.less","path":"libs/font-awesome/less/bordered-pulled.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/core.less","path":"libs/font-awesome/less/core.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/fixed-width.less","path":"libs/font-awesome/less/fixed-width.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/font-awesome.less","path":"libs/font-awesome/less/font-awesome.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/icons.less","path":"libs/font-awesome/less/icons.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/larger.less","path":"libs/font-awesome/less/larger.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/list.less","path":"libs/font-awesome/less/list.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/path.less","path":"libs/font-awesome/less/path.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/rotated-flipped.less","path":"libs/font-awesome/less/rotated-flipped.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/mixins.less","path":"libs/font-awesome/less/mixins.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/screen-reader.less","path":"libs/font-awesome/less/screen-reader.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/variables.less","path":"libs/font-awesome/less/variables.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/less/stacked.less","path":"libs/font-awesome/less/stacked.less","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/agate.css","path":"libs/highlight/styles/agate.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/a11y-dark.css","path":"libs/highlight/styles/a11y-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/a11y-light.css","path":"libs/highlight/styles/a11y-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/an-old-hope.css","path":"libs/highlight/styles/an-old-hope.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/androidstudio.css","path":"libs/highlight/styles/androidstudio.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/arduino-light.css","path":"libs/highlight/styles/arduino-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/arta.css","path":"libs/highlight/styles/arta.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/ascetic.css","path":"libs/highlight/styles/ascetic.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-cave-dark.css","path":"libs/highlight/styles/atelier-cave-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-dune-dark.css","path":"libs/highlight/styles/atelier-dune-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-cave-light.css","path":"libs/highlight/styles/atelier-cave-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-dune-light.css","path":"libs/highlight/styles/atelier-dune-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-estuary-light.css","path":"libs/highlight/styles/atelier-estuary-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-estuary-dark.css","path":"libs/highlight/styles/atelier-estuary-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-forest-dark.css","path":"libs/highlight/styles/atelier-forest-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-forest-light.css","path":"libs/highlight/styles/atelier-forest-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-heath-dark.css","path":"libs/highlight/styles/atelier-heath-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-heath-light.css","path":"libs/highlight/styles/atelier-heath-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-lakeside-dark.css","path":"libs/highlight/styles/atelier-lakeside-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-lakeside-light.css","path":"libs/highlight/styles/atelier-lakeside-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-plateau-dark.css","path":"libs/highlight/styles/atelier-plateau-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-plateau-light.css","path":"libs/highlight/styles/atelier-plateau-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-savanna-dark.css","path":"libs/highlight/styles/atelier-savanna-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-savanna-light.css","path":"libs/highlight/styles/atelier-savanna-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-seaside-dark.css","path":"libs/highlight/styles/atelier-seaside-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-seaside-light.css","path":"libs/highlight/styles/atelier-seaside-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-sulphurpool-dark.css","path":"libs/highlight/styles/atelier-sulphurpool-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atelier-sulphurpool-light.css","path":"libs/highlight/styles/atelier-sulphurpool-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atom-one-dark-reasonable.css","path":"libs/highlight/styles/atom-one-dark-reasonable.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atom-one-dark.css","path":"libs/highlight/styles/atom-one-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/atom-one-light.css","path":"libs/highlight/styles/atom-one-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/brown-paper.css","path":"libs/highlight/styles/brown-paper.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/codepen-embed.css","path":"libs/highlight/styles/codepen-embed.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/darcula.css","path":"libs/highlight/styles/darcula.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/brown-papersq.png","path":"libs/highlight/styles/brown-papersq.png","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/color-brewer.css","path":"libs/highlight/styles/color-brewer.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/dark.css","path":"libs/highlight/styles/dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/darkula.css","path":"libs/highlight/styles/darkula.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/default.css","path":"libs/highlight/styles/default.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/docco.css","path":"libs/highlight/styles/docco.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/github-gist.css","path":"libs/highlight/styles/github-gist.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/foundation.css","path":"libs/highlight/styles/foundation.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/far.css","path":"libs/highlight/styles/far.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/dracula.css","path":"libs/highlight/styles/dracula.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/github.css","path":"libs/highlight/styles/github.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/googlecode.css","path":"libs/highlight/styles/googlecode.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/gradient-dark.css","path":"libs/highlight/styles/gradient-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/gml.css","path":"libs/highlight/styles/gml.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/grayscale.css","path":"libs/highlight/styles/grayscale.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/gruvbox-dark.css","path":"libs/highlight/styles/gruvbox-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/gruvbox-light.css","path":"libs/highlight/styles/gruvbox-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/hopscotch.css","path":"libs/highlight/styles/hopscotch.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/hybrid.css","path":"libs/highlight/styles/hybrid.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/idea.css","path":"libs/highlight/styles/idea.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/ir-black.css","path":"libs/highlight/styles/ir-black.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/isbl-editor-dark.css","path":"libs/highlight/styles/isbl-editor-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/isbl-editor-light.css","path":"libs/highlight/styles/isbl-editor-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/kimbie.dark.css","path":"libs/highlight/styles/kimbie.dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/lightfair.css","path":"libs/highlight/styles/lightfair.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/kimbie.light.css","path":"libs/highlight/styles/kimbie.light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/magula.css","path":"libs/highlight/styles/magula.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/monokai-sublime.css","path":"libs/highlight/styles/monokai-sublime.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/mono-blue.css","path":"libs/highlight/styles/mono-blue.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/monokai.css","path":"libs/highlight/styles/monokai.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/night-owl.css","path":"libs/highlight/styles/night-owl.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/obsidian.css","path":"libs/highlight/styles/obsidian.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/nord.css","path":"libs/highlight/styles/nord.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/ocean.css","path":"libs/highlight/styles/ocean.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/paraiso-dark.css","path":"libs/highlight/styles/paraiso-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/pojoaque.css","path":"libs/highlight/styles/pojoaque.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/pojoaque.jpg","path":"libs/highlight/styles/pojoaque.jpg","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/paraiso-light.css","path":"libs/highlight/styles/paraiso-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/purebasic.css","path":"libs/highlight/styles/purebasic.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/qtcreator_dark.css","path":"libs/highlight/styles/qtcreator_dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/qtcreator_light.css","path":"libs/highlight/styles/qtcreator_light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/railscasts.css","path":"libs/highlight/styles/railscasts.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/school-book.png","path":"libs/highlight/styles/school-book.png","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/routeros.css","path":"libs/highlight/styles/routeros.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/school-book.css","path":"libs/highlight/styles/school-book.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/rainbow.css","path":"libs/highlight/styles/rainbow.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/shades-of-purple.css","path":"libs/highlight/styles/shades-of-purple.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/solarized-light.css","path":"libs/highlight/styles/solarized-light.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/sunburst.css","path":"libs/highlight/styles/sunburst.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/solarized-dark.css","path":"libs/highlight/styles/solarized-dark.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow-night-bright.css","path":"libs/highlight/styles/tomorrow-night-bright.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow-night-blue.css","path":"libs/highlight/styles/tomorrow-night-blue.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow-night-eighties.css","path":"libs/highlight/styles/tomorrow-night-eighties.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow-night.css","path":"libs/highlight/styles/tomorrow-night.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow.css","path":"libs/highlight/styles/tomorrow.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/vs2015.css","path":"libs/highlight/styles/vs2015.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/vs.css","path":"libs/highlight/styles/vs.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/xcode.css","path":"libs/highlight/styles/xcode.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/zenburn.css","path":"libs/highlight/styles/zenburn.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/highlight/styles/xt256.css","path":"libs/highlight/styles/xt256.css","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/geek/source/libs/font-awesome/scss/font-awesome.scss","path":"libs/font-awesome/scss/font-awesome.scss","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Jekyll-Chirpy-搭建备忘.md","hash":"aad9fa1a7f7661ad80dde60736cc52baffb5306e","modified":1648621181644},{"_id":"source/_posts/Chripy-发布的文章图片路劲问题.md","hash":"f1e927e46c36a17984c1fbb7ba4abdbd5a8015d1","modified":1642842387912},{"_id":"source/_posts/Jenkins-Pipeline-搭建nodejs持续集成项目.md","hash":"ee1e4b1e2f1ace6d4f00b1b45638b3a4619d7d6d","modified":1643184496116},{"_id":"source/_posts/Python-docx-操作word文档实战.md","hash":"91638089f840848481fc5ec017b8e01b56a9c6b0","modified":1648623284673},{"_id":"source/_posts/Redis-安装-超详细.md","hash":"9bb72ceb814af3e53563bfee61a18b8c1cce0ade","modified":1643168047214},{"_id":"source/_posts/巧用VSCode插件实现front-matter自动生成.md","hash":"c4574921adc19b3ae1bde88b4275bb2319cd56ba","modified":1643339372506},{"_id":"source/_posts/RDM-从源码编译.md","hash":"f79f765082cdac80539233f11f5bbb53aa874a14","modified":1648621542180},{"_id":"source/images/image-20220128001412487.png","hash":"ac6d44f4b7bd01459ab364138fa555a9b77e122a","modified":1643300061730},{"_id":"source/images/image-20220127234804448.png","hash":"5847e3d5b9a1c594b9026e4d2049c8b4885b7e77","modified":1643298505237},{"_id":"source/images/image-20220128005609606.png","hash":"d1aa0fb5289213a5a72d45ebcf5ddc29284e3a45","modified":1643302576036},{"_id":"source/images/image-20220128001840194.png","hash":"65bd82c517c4e695527abd89823c9eedee0b9c16","modified":1643300328180},{"_id":"source/images/image-20220128010402803.png","hash":"2f90f056157b5a1042de9bc0883d5f527effc94c","modified":1643303205325},{"_id":"source/images/image-20220128013028710.png","hash":"f5bea1c745334d1d0a48b188e0ec95472821a85a","modified":1643304635910},{"_id":"source/images/image-20220128012502642.png","hash":"d7118a70de37228c4166620c48140ac8683af28e","modified":1643304309057},{"_id":"source/images/image-20220128015227879.png","hash":"b6511ae42e47b2d0516653e0c5a812ccbecf3861","modified":1643305956155},{"_id":"source/images/image-20220128014137121.png","hash":"5d5632d76d0d50dfe6bc419bf082942a10dfe4b4","modified":1643305305293},{"_id":"source/images/image-20220128090942876.png","hash":"211bdc323ab0d3b2d348bf3c4d96fe45fdc7e17c","modified":1643332188100},{"_id":"source/images/image-20220128100350201.png","hash":"55256b7872bac03b2394f4edabae0c19bbbae01f","modified":1643335435124},{"_id":"source/images/image-20220128100623377.png","hash":"d313d77adb99106374f3a460ea07106c610fc7cb","modified":1643335587945},{"_id":"source/images/image-20220128160641398.png","hash":"02d933aea1e9c9362dba5a3d5cd71ff35db7e870","modified":1643357206850},{"_id":"source/images/image-20220128104026274.png","hash":"96df80fef75956d8f5ef6d8bba200783e8c332fa","modified":1643337750166},{"_id":"source/images/image-20220128161314580.png","hash":"41c7736edfd656068dc470858000edaeec768ef7","modified":1643357598946},{"_id":"source/images/image-20220216140801797.png","hash":"eaeb1ec3ee584b28e434c3d26d6771383593ce88","modified":1644991688830},{"_id":"source/images/image-20220218103014359.png","hash":"17cf9e784ebeed3e5fc2c67ab2224ab3006a2bb7","modified":1645151419002},{"_id":"source/about/index.md","hash":"33629009f9039193c96d77f7052b0ceb6a7e6134","modified":1648621840866},{"_id":"source/images/android-chrome-512x512.png","hash":"6e713733f7740ac523e7fb8880fdc949d0142da5","modified":1642726945000},{"_id":"source/images/image-20220122042859794.png","hash":"feffb655a0dd90960b77d1e361e3163cdab6d7ed","modified":1642796970900},{"_id":"source/images/image-20220128021252933.png","hash":"7aa4955a8b46201e19a3f7f9590f56a53d21988b","modified":1643307179061},{"_id":"source/images/image-20220128015512864.png","hash":"0d70bd641750bb755b7dd09aef35b1800528c0cb","modified":1643306121125},{"_id":"source/images/image-20220216141425332.png","hash":"dd7877a5175b63f157868625605312bf35a27c5c","modified":1644992070011},{"_id":"source/images/image-20220128014652491.png","hash":"4a7ee87fe4847caa081ccdd3c1d660b9cc03ba84","modified":1643305618988},{"_id":"source/images/image-20220128164608048.png","hash":"0e12c2c67abb27b262b914a99edc61a4ace706d7","modified":1643359574455},{"_id":"source/images/image-20220128004402035.png","hash":"a3b4c0aedc2f6ad72a96840278161f17b2821d7f","modified":1643301848990},{"_id":"source/images/image-20220128013317738.png","hash":"19c5dbb6d38df32c9db6aeaa002d0dadf3d4b8b5","modified":1643304808364},{"_id":"source/images/image-20220128013638288.png","hash":"b61ada08186f6a68f7baa52d05c259e6f1a2f132","modified":1643305006696},{"_id":"source/images/image-20220128011300968.png","hash":"fffca07711f909549f35ca1c2416d12feababd12","modified":1643303587319},{"_id":"themes/geek/.gitignore","hash":"45907892aa8c37948ca3b1a3ed1c929fdf0efd2c","modified":1648619647124},{"_id":"themes/geek/LICENSE","hash":"94ebc5740b18136edf0f1bfca66dcafd2fefa4a3","modified":1648619647125},{"_id":"themes/geek/README.md","hash":"7b06e206506ab6ab70d3609a4a5da7c0aae1ef51","modified":1648619647125},{"_id":"themes/geek/layout/index.ejs","hash":"00bb7c1884224fdbf258d90e4ebfb907818d7f32","modified":1648619647131},{"_id":"themes/geek/_config.yml","hash":"92f34f1187dfcbf71d9d1036233cfc97176375a9","modified":1648620913868},{"_id":"themes/geek/layout/post.ejs","hash":"af1ca78ccad06ede6b41849013cf990af31742b6","modified":1648619647132},{"_id":"themes/geek/layout/layout.ejs","hash":"95cec9795458d7a9820475ba07173e5e302f4bc7","modified":1648619647132},{"_id":"themes/geek/source/favicon.ico","hash":"5cd91d0715ada690f5f55878d004051152804618","modified":1642726946000},{"_id":"themes/geek/layout/_partial/nav.ejs","hash":"df69efae776a6656a5b2726f4c41719e4de3fac7","modified":1648619647131},{"_id":"themes/geek/layout/_partial/head.ejs","hash":"5429b7f8ac0004ff4c4e11305caf5e9c00b8da61","modified":1648619647131},{"_id":"themes/geek/layout/_partial/footer.ejs","hash":"02c165b6842033013480cd2a467de8abb0b1996b","modified":1648619647130},{"_id":"themes/geek/source/img/logo.png","hash":"aebd2252b727c8471b48d09aaabd2f0e2e56591c","modified":1642726945000},{"_id":"themes/geek/source/js/js.js","hash":"35963cd8c3170ab11f4624ba740bdf92ae642d3d","modified":1648619647137},{"_id":"themes/geek/source/css/style.styl","hash":"9f3774017bd418a7a15e433ede2d3096f5172876","modified":1648619647134},{"_id":"themes/geek/source/css/_partial/markdown.styl","hash":"7a98410e213a44b9f4c5a43c6934fba27ce061d9","modified":1648619647133},{"_id":"themes/geek/source/css/_partial/index.styl","hash":"a447c60e894656cf413b48de9279ca5365513eae","modified":1648619647133},{"_id":"themes/geek/source/css/_partial/post.styl","hash":"efe77e92aac9a25b37d5ad767862f611054ce893","modified":1648619647133},{"_id":"themes/geek/source/libs/highlight/highlight.pack.js","hash":"e5a7c1d00853fec211145a352482cbcfa1319a06","modified":1648619647158},{"_id":"themes/geek/source/libs/font-awesome/less/animated.less","hash":"472ec14f388c90a7201861e77faec317d038fd9c","modified":1648619647148},{"_id":"themes/geek/source/libs/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1648619647137},{"_id":"themes/geek/source/libs/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1648619647138},{"_id":"themes/geek/source/libs/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1648619647138},{"_id":"themes/geek/source/libs/font-awesome/less/bordered-pulled.less","hash":"66dc98ad0e4151e8938350f1ee3d0932348b37e8","modified":1648619647148},{"_id":"themes/geek/source/libs/font-awesome/less/core.less","hash":"5f436a1afd7f1de7dde20ed8c2fd84812b8acf12","modified":1648619647148},{"_id":"themes/geek/source/libs/font-awesome/less/fixed-width.less","hash":"a9552c8a91766a6d926c43c4c0f74acb62aaf719","modified":1648619647149},{"_id":"themes/geek/source/libs/font-awesome/less/font-awesome.less","hash":"06bd9cd5c5a646b1c631ba7b1edb77f60d84a91b","modified":1648619647149},{"_id":"themes/geek/source/libs/font-awesome/less/icons.less","hash":"e7492081853b880643f96e28659218b92c6e660a","modified":1648619647150},{"_id":"themes/geek/source/libs/font-awesome/less/larger.less","hash":"d9610d7f83b0aaf3fdd5fa048117bd8620adf346","modified":1648619647151},{"_id":"themes/geek/source/libs/font-awesome/less/list.less","hash":"2b203f3bacd6eaa58d0aa11efb9fb661b884eeb9","modified":1648619647151},{"_id":"themes/geek/source/libs/font-awesome/less/path.less","hash":"fce36570fe54da40c1c61f20d62bf9751a81a27e","modified":1648619647152},{"_id":"themes/geek/source/libs/font-awesome/less/rotated-flipped.less","hash":"39ec6a3d98e5a55a2330935d139f95855c139dcf","modified":1648619647152},{"_id":"themes/geek/source/libs/font-awesome/less/mixins.less","hash":"9b53403a944d93c5d7238c8942534fccf7957cff","modified":1648619647151},{"_id":"themes/geek/source/libs/font-awesome/less/screen-reader.less","hash":"3fa86249735534461a08afa86b5d7d774de7ef3f","modified":1648619647152},{"_id":"themes/geek/source/libs/font-awesome/less/variables.less","hash":"e0dab04318d43211435c82989fbc05d0876b2708","modified":1648619647153},{"_id":"themes/geek/source/libs/font-awesome/less/stacked.less","hash":"ee10b7a0bc941f8d0bbd092d4178b9fae9f1661f","modified":1648619647153},{"_id":"themes/geek/source/libs/highlight/styles/agate.css","hash":"267d7a729d7106899d887940bd62f01a7f8810a8","modified":1648619647159},{"_id":"themes/geek/source/libs/highlight/styles/a11y-dark.css","hash":"545a32473c016e7928809c90abb88d8b3d66c0e0","modified":1648619647159},{"_id":"themes/geek/source/libs/highlight/styles/a11y-light.css","hash":"d68397e4cad57ab370b185eb37bddf9e4dff67a0","modified":1648619647159},{"_id":"themes/geek/source/libs/highlight/styles/an-old-hope.css","hash":"a1deffdb4283bb21cb9c6eeca221d76cdb275377","modified":1648619647159},{"_id":"themes/geek/source/libs/highlight/styles/androidstudio.css","hash":"bd1d92a769b5e54f65ed659be012a5da7b933f67","modified":1648619647160},{"_id":"themes/geek/source/libs/highlight/styles/arta.css","hash":"0c83871a3be547414936f040d1b651796ed432e9","modified":1648619647160},{"_id":"themes/geek/source/libs/highlight/styles/arduino-light.css","hash":"8bc12b6d47c3901e4fa8bd054e57c39bd82e9431","modified":1648619647160},{"_id":"themes/geek/source/libs/highlight/styles/ascetic.css","hash":"1b3f8c010d93271fe0b8973b24a83cccb43d2ab5","modified":1648619647161},{"_id":"themes/geek/source/libs/highlight/styles/atelier-cave-dark.css","hash":"0fe44a5e2e47a6d5f808f343be5e0ee38a157513","modified":1648619647161},{"_id":"themes/geek/source/libs/highlight/styles/atelier-dune-dark.css","hash":"371fbf41c919b2cf66dbd64db24fc9a9f270f0ca","modified":1648619647161},{"_id":"themes/geek/source/libs/highlight/styles/atelier-dune-light.css","hash":"978c280fbb391ab34ec798ff63d27ccf0622ffc5","modified":1648619647162},{"_id":"themes/geek/source/libs/highlight/styles/atelier-cave-light.css","hash":"8e8a3cd5611034e8cb1cf17ae598cb146feae0e5","modified":1648619647161},{"_id":"themes/geek/source/libs/highlight/styles/atelier-estuary-dark.css","hash":"6cd190c8e9645ec6cc3aa897f2076c9a2a65fbf4","modified":1648619647162},{"_id":"themes/geek/source/libs/highlight/styles/atelier-estuary-light.css","hash":"eaf8d2305631471a5c69039f5f666ec7cdb0991e","modified":1648619647162},{"_id":"themes/geek/source/libs/highlight/styles/atelier-forest-dark.css","hash":"8d9cece07b6ea31e01fec11987b42ffc5bfb8c3f","modified":1648619647163},{"_id":"themes/geek/source/libs/highlight/styles/atelier-forest-light.css","hash":"cdfdc19fd6e33879b2212cf41d5159484d72b1ac","modified":1648619647163},{"_id":"themes/geek/source/libs/highlight/styles/atelier-heath-dark.css","hash":"707c60a91e0390b4d481710e5cab28441b1a6d20","modified":1648619647163},{"_id":"themes/geek/source/libs/highlight/styles/atelier-heath-light.css","hash":"9b034e416e989edba7d2c2fd57ed706dc2059c4e","modified":1648619647163},{"_id":"themes/geek/source/libs/highlight/styles/atelier-lakeside-dark.css","hash":"6f9102332449833997b2e72e8658fb9de212bc48","modified":1648619647164},{"_id":"themes/geek/source/libs/highlight/styles/atelier-lakeside-light.css","hash":"180699d969cb62743bc8e4cf4dc5b88ea1c6ed9b","modified":1648619647164},{"_id":"themes/geek/source/libs/highlight/styles/atelier-plateau-dark.css","hash":"4d69e5501ec2a7b81810466837ec731a81590d4d","modified":1648619647164},{"_id":"themes/geek/source/libs/highlight/styles/atelier-plateau-light.css","hash":"f8e768bd2b111a4dffb6100391b647f6d9b1f445","modified":1648619647165},{"_id":"themes/geek/source/libs/highlight/styles/atelier-savanna-dark.css","hash":"3768ba3e44fc1038adb09ff3adfbe4c8d807c338","modified":1648619647165},{"_id":"themes/geek/source/libs/highlight/styles/atelier-savanna-light.css","hash":"fd76c75ef1f1ab693ccd09e973204cc80dae18cd","modified":1648619647166},{"_id":"themes/geek/source/libs/highlight/styles/atelier-seaside-dark.css","hash":"f44bb322aab7a93f0c52a39e878670b7d6c2a8b8","modified":1648619647166},{"_id":"themes/geek/source/libs/highlight/styles/atelier-sulphurpool-light.css","hash":"4783dd049a048c7858603984b61b5f7db920c44d","modified":1648619647167},{"_id":"themes/geek/source/libs/highlight/styles/atelier-sulphurpool-dark.css","hash":"f6dc59deaf5dc1a87229e207f18b0def15a235cd","modified":1648619647167},{"_id":"themes/geek/source/libs/highlight/styles/atelier-seaside-light.css","hash":"dd9657b37f5fd62a288972380193db4249bcdf96","modified":1648619647167},{"_id":"themes/geek/source/libs/highlight/styles/atom-one-dark-reasonable.css","hash":"c8cb7465e3e3737236647e8b2e60997dc0371d5a","modified":1648619647168},{"_id":"themes/geek/source/libs/highlight/styles/brown-paper.css","hash":"9a030da7dc781e1461b15186f2b01ea684ee9ad2","modified":1648619647169},{"_id":"themes/geek/source/libs/highlight/styles/atom-one-dark.css","hash":"91671ed42c0ce1363843144a9666d34faddb7e27","modified":1648619647168},{"_id":"themes/geek/source/libs/highlight/styles/atom-one-light.css","hash":"526e305a190476a2b28a244ca928aabdcc686c34","modified":1648619647169},{"_id":"themes/geek/source/libs/highlight/styles/codepen-embed.css","hash":"a4ce8f56fa8ec5078f597db441ebeace6264a508","modified":1648619647170},{"_id":"themes/geek/source/libs/highlight/styles/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1648619647169},{"_id":"themes/geek/source/libs/highlight/styles/color-brewer.css","hash":"317e097d8b2e0fd3e7c64d97bb93caa8e9e23b9d","modified":1648619647170},{"_id":"themes/geek/source/libs/highlight/styles/darcula.css","hash":"d8cfee505ad671575e677d5e06a3b512dd51043e","modified":1648619647170},{"_id":"themes/geek/source/libs/highlight/styles/dark.css","hash":"d4b6d04ed87e2ef4fcd359052c0220b70060a0f3","modified":1648619647170},{"_id":"themes/geek/source/libs/highlight/styles/default.css","hash":"51a2a0d9be7a0039923a62558b7d1bc1956e965a","modified":1648619647171},{"_id":"themes/geek/source/libs/highlight/styles/docco.css","hash":"9495b22865033719a0701b8e3557a843611204db","modified":1648619647171},{"_id":"themes/geek/source/libs/highlight/styles/darkula.css","hash":"d004ba64216234a53c84fa55baefdc8b371bb4d9","modified":1648619647171},{"_id":"themes/geek/source/libs/highlight/styles/github-gist.css","hash":"e8ff6a6effd153a280262787181c272d46f99184","modified":1648619647172},{"_id":"themes/geek/source/libs/highlight/styles/far.css","hash":"3c9b37b9d4f992042165069792ea373ce299fa31","modified":1648619647172},{"_id":"themes/geek/source/libs/highlight/styles/foundation.css","hash":"f94e2addc3003507c8beb57448052e265145ee85","modified":1648619647172},{"_id":"themes/geek/source/libs/highlight/styles/dracula.css","hash":"896157dc66de96b3e8ac2c2d032ac1f79f42ac42","modified":1648619647171},{"_id":"themes/geek/source/libs/highlight/styles/github.css","hash":"6f28691831ef118939d2e109a205b425a5249b90","modified":1648619647172},{"_id":"themes/geek/source/libs/highlight/styles/gradient-dark.css","hash":"9444591399f57e1d3c3a7a10bc52770fb604c717","modified":1648619647173},{"_id":"themes/geek/source/libs/highlight/styles/googlecode.css","hash":"8ea1780e834b7f40c962744cb4ef533f9b805f9b","modified":1648619647173},{"_id":"themes/geek/source/libs/highlight/styles/gml.css","hash":"080fb556b587e0d5c0f5b8a6ffeca62c05d05aff","modified":1648619647173},{"_id":"themes/geek/source/libs/highlight/styles/gruvbox-dark.css","hash":"bfe2f24aef069669dc44dba54f14b0005667d700","modified":1648619647174},{"_id":"themes/geek/source/libs/highlight/styles/gruvbox-light.css","hash":"4e5445d5eaa82f1787e91682e544fea3be3b4bb9","modified":1648619647174},{"_id":"themes/geek/source/libs/highlight/styles/grayscale.css","hash":"b2074d4f1ffa928a9948a9edecf8e4ec513999e6","modified":1648619647173},{"_id":"themes/geek/source/libs/highlight/styles/hopscotch.css","hash":"f2244187e01d79f9b18d214851972debecb241f0","modified":1648619647174},{"_id":"themes/geek/source/libs/highlight/styles/hybrid.css","hash":"c1cf52abb1248498794739cea51d6ecbd7539c69","modified":1648619647174},{"_id":"themes/geek/source/libs/highlight/styles/isbl-editor-dark.css","hash":"b0df11c36bcd12e46f3b710a693bf3cc2a462d42","modified":1648619647175},{"_id":"themes/geek/source/libs/highlight/styles/idea.css","hash":"cfdc18180d926095d8322f36f041a2cf43445eef","modified":1648619647175},{"_id":"themes/geek/source/libs/highlight/styles/ir-black.css","hash":"c8ee27f6873ee1e52c394b373bc8be49d059a46c","modified":1648619647175},{"_id":"themes/geek/source/libs/highlight/styles/isbl-editor-light.css","hash":"28eb1fe4c9bc3d1d3f043d8363032ed54c3c2eb1","modified":1648619647176},{"_id":"themes/geek/source/libs/highlight/styles/kimbie.dark.css","hash":"8fb1f4307f136010545bb095fd9a4bd298bd9dee","modified":1648619647176},{"_id":"themes/geek/source/libs/highlight/styles/lightfair.css","hash":"2aefc7e5dced38ac63aeb805c412091de7aec4d7","modified":1648619647177},{"_id":"themes/geek/source/libs/highlight/styles/kimbie.light.css","hash":"6c95f1dc95fe047eff53b52231a8f552ec17713d","modified":1648619647176},{"_id":"themes/geek/source/libs/highlight/styles/magula.css","hash":"7c42d8be4abbccaf5a91cd69a65ad11b58a03f11","modified":1648619647177},{"_id":"themes/geek/source/libs/highlight/styles/monokai-sublime.css","hash":"0d16b61fd8723b61ebbb4ae85936b7222089cd5c","modified":1648619647177},{"_id":"themes/geek/source/libs/highlight/styles/monokai.css","hash":"519e52e47fcb021bfa65d8070bab2463c985b7b8","modified":1648619647177},{"_id":"themes/geek/source/libs/highlight/styles/mono-blue.css","hash":"7e2884e42730cf5ce6c3ed605954f085924d442c","modified":1648619647177},{"_id":"themes/geek/source/libs/highlight/styles/night-owl.css","hash":"cac2e69ffa06497ef853bb1743a128901d8d3105","modified":1648619647178},{"_id":"themes/geek/source/libs/highlight/styles/obsidian.css","hash":"c8f452d1dd3c24ed1fd31a8a542976a98768f0ee","modified":1648619647178},{"_id":"themes/geek/source/libs/highlight/styles/nord.css","hash":"f0caf7fcfb391aa4842360ddbb2303c30e72a1ad","modified":1648619647178},{"_id":"themes/geek/source/libs/highlight/styles/ocean.css","hash":"05261db4eab97828f1e0e2d8dac3c17b46c5135b","modified":1648619647178},{"_id":"themes/geek/source/libs/highlight/styles/paraiso-dark.css","hash":"54a74080b472d4f02ec892383df7243a9fc0325c","modified":1648619647179},{"_id":"themes/geek/source/libs/highlight/styles/pojoaque.css","hash":"147fa0862896e6954bc6800e573d0dc009d0bd76","modified":1648619647179},{"_id":"themes/geek/source/libs/highlight/styles/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1648619647179},{"_id":"themes/geek/source/libs/highlight/styles/paraiso-light.css","hash":"ec682ddb4f6c6022e86bbc3b21fee2db17534dfa","modified":1648619647179},{"_id":"themes/geek/source/libs/highlight/styles/purebasic.css","hash":"2a49a847571d1b9747cb6a14acd5f4e5b5c8328d","modified":1648619647180},{"_id":"themes/geek/source/libs/highlight/styles/qtcreator_dark.css","hash":"f6247839bf5f054c1c67675c9a2009c9dd882a54","modified":1648619647180},{"_id":"themes/geek/source/libs/highlight/styles/qtcreator_light.css","hash":"64a3df679ec5c1189fc4f4c046da13ccfde61088","modified":1648619647180},{"_id":"themes/geek/source/libs/highlight/styles/railscasts.css","hash":"1bb2dd8ccba3e33aa3fd419bad757b0710ca7bf3","modified":1648619647180},{"_id":"themes/geek/source/libs/highlight/styles/routeros.css","hash":"9d3b69b223ad1f8f3301de71d2ca008e0271c392","modified":1648619647181},{"_id":"themes/geek/source/libs/highlight/styles/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1648619647181},{"_id":"themes/geek/source/libs/highlight/styles/school-book.css","hash":"5dd8a8a51ab511b981404b7c1a7d0daf94d6340f","modified":1648619647181},{"_id":"themes/geek/source/libs/highlight/styles/rainbow.css","hash":"34ebae47223dc8e1b6464880fa83e217a5774199","modified":1648619647181},{"_id":"themes/geek/source/libs/highlight/styles/solarized-light.css","hash":"fe6779c179c3e6136384e463fdc6d3b08ff88ba7","modified":1648619647183},{"_id":"themes/geek/source/libs/highlight/styles/shades-of-purple.css","hash":"dbcc7f797f40730ea9943613221c66653285bad4","modified":1648619647182},{"_id":"themes/geek/source/libs/highlight/styles/sunburst.css","hash":"bcbe342ac0be63bb2e8545f426e13c1751a70923","modified":1648619647183},{"_id":"themes/geek/source/libs/highlight/styles/solarized-dark.css","hash":"97bba4362e3001a93f1b111a140895cbe6047a81","modified":1648619647182},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow-night-bright.css","hash":"db7f477d609bfd0d264f69fdee32d28b2b3771ec","modified":1648619647184},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow-night-blue.css","hash":"8fc2bd599487fa428895af9c15278b629205a005","modified":1648619647184},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow-night-eighties.css","hash":"12449d31f223502297086943f1bfeeac5f28c4c1","modified":1648619647185},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow-night.css","hash":"51486c77fab70d7615e814787531d1a7db22a65a","modified":1648619647185},{"_id":"themes/geek/source/libs/highlight/styles/vs2015.css","hash":"9d3b1fab804f5447f9ee0d45c9079ae201f6c498","modified":1648619647187},{"_id":"themes/geek/source/libs/highlight/styles/tomorrow.css","hash":"e98fd167fe9c5668165f28dd6c0ecb59b3293f67","modified":1648619647186},{"_id":"themes/geek/source/libs/highlight/styles/vs.css","hash":"7f91ad5a66ffbc8db2af542bd2db0e84bcf22587","modified":1648619647186},{"_id":"themes/geek/source/libs/highlight/styles/xcode.css","hash":"113def1c0c88ef96df0722223b158cb068e32041","modified":1648619647187},{"_id":"themes/geek/source/libs/highlight/styles/zenburn.css","hash":"92941a6ae73b74f44ad7c559c5548c44073c644a","modified":1648619647188},{"_id":"themes/geek/source/libs/highlight/styles/xt256.css","hash":"30265e64715ab4c0ed868b39663f9418dbfbdc67","modified":1648619647187},{"_id":"themes/geek/source/libs/font-awesome/scss/_animated.scss","hash":"c3d081abee1076d36a289afc6488e676bc59f023","modified":1648619647154},{"_id":"themes/geek/source/libs/font-awesome/scss/_bordered-pulled.scss","hash":"39353047bbcce4f3f706666df1547e64546932a0","modified":1648619647154},{"_id":"themes/geek/source/libs/font-awesome/scss/_core.scss","hash":"2dce8814642ef0ee86c65f3d29818c17fd8951f9","modified":1648619647154},{"_id":"themes/geek/source/libs/font-awesome/scss/_fixed-width.scss","hash":"f4af333866ff3c0da59493fc7077965c6e9d46ac","modified":1648619647154},{"_id":"themes/geek/source/libs/font-awesome/scss/_larger.scss","hash":"c5cf379c23025aa001f850bd560a87a92e4f711d","modified":1648619647155},{"_id":"themes/geek/source/libs/font-awesome/scss/_list.scss","hash":"8e9c5708bd91364a749f93555ba65af3c49ff1a6","modified":1648619647156},{"_id":"themes/geek/source/libs/font-awesome/scss/_icons.scss","hash":"303a6e9e04e91a132612f094b34cccfc90c63bec","modified":1648619647155},{"_id":"themes/geek/source/libs/font-awesome/scss/_path.scss","hash":"011339ce07bb12a5736edd7fdbed0b7f3c63bf72","modified":1648619647156},{"_id":"themes/geek/source/libs/font-awesome/scss/_mixins.scss","hash":"25b2361e654e3512c1f6024f3a8d593413611a58","modified":1648619647156},{"_id":"themes/geek/source/libs/font-awesome/scss/_rotated-flipped.scss","hash":"fd48d098af52ffff6f829e7f5a2250a9c3cfc87f","modified":1648619647156},{"_id":"themes/geek/source/libs/font-awesome/scss/_stacked.scss","hash":"c4fe90e7781e8b229bf2657312ba61ecf1026cab","modified":1648619647157},{"_id":"themes/geek/source/libs/font-awesome/scss/_variables.scss","hash":"8e450f7064c308a124fe82ded322db59fbbeb59f","modified":1648619647157},{"_id":"themes/geek/source/libs/font-awesome/scss/_screen-reader.scss","hash":"ebe3fe40059e5a2a3a3c0c0f587a2e2bc23fd1b2","modified":1648619647156},{"_id":"themes/geek/source/libs/font-awesome/scss/font-awesome.scss","hash":"6bfc7e75fd344628b06d85f7fa4d48b106334584","modified":1648619647157},{"_id":"themes/geek/source/libs/jquery.min.js","hash":"44d980c8f4d21057018d80398d574fa72aea1bc7","modified":1648619647188},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1648619647147},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1648619647147},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1648619647146},{"_id":"themes/geek/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1648619647140},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1648619647142},{"_id":"themes/geek/imgs/2.png","hash":"f63b6574c5f522b24e2cee18ba6b40b0676365e3","modified":1648619647129},{"_id":"themes/geek/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1648619647144},{"_id":"themes/geek/imgs/1.png","hash":"75038f82935c2ee04d753b76849c4ccbf3cdd222","modified":1648619647128},{"_id":"source/_posts/切换Jeykll到Hexo.md","hash":"10bf9dff713a0312157916d34798a10345416f30","modified":1648624214079}],"Category":[{"name":"博客搭建","_id":"cl1d7s73k0003kgscg9otcmk3"},{"name":"问题修复","parent":"cl1d7s73k0003kgscg9otcmk3","_id":"cl1d7s73q0008kgsc1w4ehhpk"},{"name":"运维","_id":"cl1d7s754000gkgsc657eh8g5"},{"name":"环境搭建","parent":"cl1d7s754000gkgsc657eh8g5","_id":"cl1d7s755000jkgsc5jku4coo"},{"name":"办公自动化","_id":"cl1d7s75e000okgsc93m4a2vg"},{"name":"技巧","parent":"cl1d7s73k0003kgscg9otcmk3","_id":"cl1d7s75j000ukgsc8b7wa2uf"},{"name":"软件安装","parent":"cl1d7s754000gkgsc657eh8g5","_id":"cl1d7s75k000xkgsc4dtre7aj"}],"Data":[],"Page":[{"title":"关于我","icon":"fas fa-info-circle","order":4,"_content":"\n# 欢迎光临我的个人博客\n\n\n\n这里主要记录一些生活琐事。\n\n\n\n\n\n![img](../images/android-chrome-512x512.png)","source":"about/index.md","raw":"---\ntitle: 关于我\nicon: fas fa-info-circle\norder: 4\n---\n\n# 欢迎光临我的个人博客\n\n\n\n这里主要记录一些生活琐事。\n\n\n\n\n\n![img](../images/android-chrome-512x512.png)","date":"2022-03-30T06:30:52.898Z","updated":"2022-03-30T06:30:40.866Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl1d7s73a0000kgsc3r742qkx","content":"<h1 id=\"欢迎光临我的个人博客\"><a href=\"#欢迎光临我的个人博客\" class=\"headerlink\" title=\"欢迎光临我的个人博客\"></a>欢迎光临我的个人博客</h1><p>这里主要记录一些生活琐事。</p>\n<p><img src=\"/../images/android-chrome-512x512.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"欢迎光临我的个人博客\"><a href=\"#欢迎光临我的个人博客\" class=\"headerlink\" title=\"欢迎光临我的个人博客\"></a>欢迎光临我的个人博客</h1><p>这里主要记录一些生活琐事。</p>\n<p><img src=\"/../images/android-chrome-512x512.png\" alt=\"img\"></p>\n"}],"Post":[{"title":"Chripy-发布的文章图片路劲问题","date":"2022-01-21T23:23:32.000Z","author":{"name":"ShoJinto","link":"https://shojinto.github.io"},"_content":"\n\n# Chripy-发布的文章图片路劲问题\n\n本博客是采用`Jekyll+Chirpy` 搭建完成，其实就是fork自` Chirpy-starter`项目\n\n本地采用`typora`进行文章编写，`markdown`引用的本地图片在`github pages`上会出现路径问题，导致博客上的图片无法正常展示。\n\n为了解决这个问题，经过查阅资料，发现在只需要修改项目目录下的`tools/deploy.sh`就行。经过一番调试最终的部署脚本[见]`tools/deploy.sh`。\n\n这里把思路说一下：\n\n1. 需要在 jekyll 编译之前将md文件中的图片路径修改成编译之后能正常展示图片的路径\n2. GitHub pages 部署完成之后，为了让 main 分支上的内容与本地保持一致。还需要对变动进行回退。\n\n修改的两部分代码如下：\n\n```shell\nfix_assets_path() {\n  # 本地用typora编写的md文章引用本地图片文件，使用相对路径在本地正常，部署到GitHub pages上出现路径问题\n  # 此方法解决了这个问题\n  POSTS=`ls _posts`\n  for post in ${POSTS};\n  do\n    sed -i 's#../assets#/assets#g' \"_posts/\"${post}\n  done\n  \n  git config --global user.name \"ShoJinto\"\n  git config --global user.email \"shojinto@github.com\"\n\n  # commit changes\n  git add -A\n  git commit -m \"fix assets abspath\"\n  git push -f\n}\n# 此函数要在build前调用\n```\n\n\n\n```shell\nreset_to_last_manual_submission() {\n  # 接`fix_assets_path`函数的注释，未达到远程和本地仓库一致。`github pages` 部署结束后还需要将机器人提交的修改回滚回来\n  git config --global user.name \"ShoJinto\"\n  git config --global user.email \"shojinto@github.com\"\n  git checkout main\n  git reset --hard HEAD^\n  git push -f\n}\n# 此函数要在deploy完之后调用\n```\n\n\n\n至此大功告成！！！","source":"_posts/Chripy-发布的文章图片路劲问题.md","raw":"---\ntitle: Chripy-发布的文章图片路劲问题\ndate: 2022-01-22 15:23:32 +0800\ncategories: [博客搭建, 问题修复]\ntags: [博客]     # TAG names should always be lowercase\nauthor:\n  name: ShoJinto\n  link: https://shojinto.github.io\n\n---\n\n\n# Chripy-发布的文章图片路劲问题\n\n本博客是采用`Jekyll+Chirpy` 搭建完成，其实就是fork自` Chirpy-starter`项目\n\n本地采用`typora`进行文章编写，`markdown`引用的本地图片在`github pages`上会出现路径问题，导致博客上的图片无法正常展示。\n\n为了解决这个问题，经过查阅资料，发现在只需要修改项目目录下的`tools/deploy.sh`就行。经过一番调试最终的部署脚本[见]`tools/deploy.sh`。\n\n这里把思路说一下：\n\n1. 需要在 jekyll 编译之前将md文件中的图片路径修改成编译之后能正常展示图片的路径\n2. GitHub pages 部署完成之后，为了让 main 分支上的内容与本地保持一致。还需要对变动进行回退。\n\n修改的两部分代码如下：\n\n```shell\nfix_assets_path() {\n  # 本地用typora编写的md文章引用本地图片文件，使用相对路径在本地正常，部署到GitHub pages上出现路径问题\n  # 此方法解决了这个问题\n  POSTS=`ls _posts`\n  for post in ${POSTS};\n  do\n    sed -i 's#../assets#/assets#g' \"_posts/\"${post}\n  done\n  \n  git config --global user.name \"ShoJinto\"\n  git config --global user.email \"shojinto@github.com\"\n\n  # commit changes\n  git add -A\n  git commit -m \"fix assets abspath\"\n  git push -f\n}\n# 此函数要在build前调用\n```\n\n\n\n```shell\nreset_to_last_manual_submission() {\n  # 接`fix_assets_path`函数的注释，未达到远程和本地仓库一致。`github pages` 部署结束后还需要将机器人提交的修改回滚回来\n  git config --global user.name \"ShoJinto\"\n  git config --global user.email \"shojinto@github.com\"\n  git checkout main\n  git reset --hard HEAD^\n  git push -f\n}\n# 此函数要在deploy完之后调用\n```\n\n\n\n至此大功告成！！！","slug":"Chripy-发布的文章图片路劲问题","published":1,"updated":"2022-01-22T09:06:27.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1d7s73d0001kgsc6nzobro1","content":"<h1 id=\"Chripy-发布的文章图片路劲问题\"><a href=\"#Chripy-发布的文章图片路劲问题\" class=\"headerlink\" title=\"Chripy-发布的文章图片路劲问题\"></a>Chripy-发布的文章图片路劲问题</h1><p>本博客是采用<code>Jekyll+Chirpy</code> 搭建完成，其实就是fork自<code> Chirpy-starter</code>项目</p>\n<p>本地采用<code>typora</code>进行文章编写，<code>markdown</code>引用的本地图片在<code>github pages</code>上会出现路径问题，导致博客上的图片无法正常展示。</p>\n<p>为了解决这个问题，经过查阅资料，发现在只需要修改项目目录下的<code>tools/deploy.sh</code>就行。经过一番调试最终的部署脚本[见]<code>tools/deploy.sh</code>。</p>\n<p>这里把思路说一下：</p>\n<ol>\n<li>需要在 jekyll 编译之前将md文件中的图片路径修改成编译之后能正常展示图片的路径</li>\n<li>GitHub pages 部署完成之后，为了让 main 分支上的内容与本地保持一致。还需要对变动进行回退。</li>\n</ol>\n<p>修改的两部分代码如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fix_assets_path() &#123;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">本地用typora编写的md文章引用本地图片文件，使用相对路径在本地正常，部署到GitHub pages上出现路径问题</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">此方法解决了这个问题</span></span><br><span class=\"line\">  POSTS=`ls _posts`</span><br><span class=\"line\">  for post in $&#123;POSTS&#125;;</span><br><span class=\"line\">  do</span><br><span class=\"line\">    sed -i &#x27;s#../assets#/assets#g&#x27; &quot;_posts/&quot;$&#123;post&#125;</span><br><span class=\"line\">  done</span><br><span class=\"line\">  </span><br><span class=\"line\">  git config --global user.name &quot;ShoJinto&quot;</span><br><span class=\"line\">  git config --global user.email &quot;shojinto@github.com&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">commit changes</span></span><br><span class=\"line\">  git add -A</span><br><span class=\"line\">  git commit -m &quot;fix assets abspath&quot;</span><br><span class=\"line\">  git push -f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">此函数要在build前调用</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reset_to_last_manual_submission() &#123;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">接`fix_assets_path`函数的注释，未达到远程和本地仓库一致。`github pages` 部署结束后还需要将机器人提交的修改回滚回来</span></span><br><span class=\"line\">  git config --global user.name &quot;ShoJinto&quot;</span><br><span class=\"line\">  git config --global user.email &quot;shojinto@github.com&quot;</span><br><span class=\"line\">  git checkout main</span><br><span class=\"line\">  git reset --hard HEAD^</span><br><span class=\"line\">  git push -f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">此函数要在deploy完之后调用</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>至此大功告成！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Chripy-发布的文章图片路劲问题\"><a href=\"#Chripy-发布的文章图片路劲问题\" class=\"headerlink\" title=\"Chripy-发布的文章图片路劲问题\"></a>Chripy-发布的文章图片路劲问题</h1><p>本博客是采用<code>Jekyll+Chirpy</code> 搭建完成，其实就是fork自<code> Chirpy-starter</code>项目</p>\n<p>本地采用<code>typora</code>进行文章编写，<code>markdown</code>引用的本地图片在<code>github pages</code>上会出现路径问题，导致博客上的图片无法正常展示。</p>\n<p>为了解决这个问题，经过查阅资料，发现在只需要修改项目目录下的<code>tools/deploy.sh</code>就行。经过一番调试最终的部署脚本[见]<code>tools/deploy.sh</code>。</p>\n<p>这里把思路说一下：</p>\n<ol>\n<li>需要在 jekyll 编译之前将md文件中的图片路径修改成编译之后能正常展示图片的路径</li>\n<li>GitHub pages 部署完成之后，为了让 main 分支上的内容与本地保持一致。还需要对变动进行回退。</li>\n</ol>\n<p>修改的两部分代码如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fix_assets_path() &#123;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">本地用typora编写的md文章引用本地图片文件，使用相对路径在本地正常，部署到GitHub pages上出现路径问题</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">此方法解决了这个问题</span></span><br><span class=\"line\">  POSTS=`ls _posts`</span><br><span class=\"line\">  for post in $&#123;POSTS&#125;;</span><br><span class=\"line\">  do</span><br><span class=\"line\">    sed -i &#x27;s#../assets#/assets#g&#x27; &quot;_posts/&quot;$&#123;post&#125;</span><br><span class=\"line\">  done</span><br><span class=\"line\">  </span><br><span class=\"line\">  git config --global user.name &quot;ShoJinto&quot;</span><br><span class=\"line\">  git config --global user.email &quot;shojinto@github.com&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">commit changes</span></span><br><span class=\"line\">  git add -A</span><br><span class=\"line\">  git commit -m &quot;fix assets abspath&quot;</span><br><span class=\"line\">  git push -f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">此函数要在build前调用</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reset_to_last_manual_submission() &#123;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">接`fix_assets_path`函数的注释，未达到远程和本地仓库一致。`github pages` 部署结束后还需要将机器人提交的修改回滚回来</span></span><br><span class=\"line\">  git config --global user.name &quot;ShoJinto&quot;</span><br><span class=\"line\">  git config --global user.email &quot;shojinto@github.com&quot;</span><br><span class=\"line\">  git checkout main</span><br><span class=\"line\">  git reset --hard HEAD^</span><br><span class=\"line\">  git push -f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">此函数要在deploy完之后调用</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>至此大功告成！！！</p>\n"},{"title":"Jekyll-Chirpy 搭建备忘","date":"2022-01-20T21:23:32.000Z","author":{"name":"ShoJinto","link":"https://shojinto.github.io"},"_content":"\n借助搜索引擎完成自己个人博客的搭建。\n\n主要因为自己忘性越来越好 :) 为了不至于今后自己做过的一些事情自己都一无所知。\n\n<!--more-->\n\n---\n\n\n\n#### 选择`Jekyll-Chirpy`的理由\n\n- 美观,开箱急用\n- 帮助文档虽然英文，但是还能凑合\n\n#### 符合`Chirpy`规范的文章写作指南\n\n[如何在Chripy上写文章](https://chirpy.cotes.page/posts/write-a-new-post/)\n\n等啥时候自己对`Jekyll`这个工具了解更多点儿再来整理吧，就目前来说能够将`markdown`文档通过`github.io`发布就行了。\n\n\n\n#### 搭建总结\n\n具体搭建以及布局跟着官文 step by step 即可。备忘的重点在如何开始利用markdown编写一篇符合`jekyll`规范的blog。这些`Chirpy`主题已经帮助解决了，作为用户的我只需要将心思放在写作内容上即可。\n\n其实在选择`Chirpy`这款主题之前我还尝试了另外一款`teXt-theme`风格也会这款的`dark`风格差不多，而且我还在上面写了一篇示例文章。但是最终为什么没有使用[`teXt-thems`](https://tianqi.name/jekyll-TeXt-theme/samples.html)呢？其实就是因为看了他的示例效果图，我想把博客首页给弄成如下标记的样式：\n\n![image-20220122042859794](../images/image-20220122042859794.png)\n\n但是我看了很久的文档尝试很多次（自己太菜）没有把作者的示例和`Jekyll`的`collections`搞明白，效果弄不出来自然也就放弃了。回头想来我主要是为了写东西，又不是做网站。只要大体上符合自己的要求就行。于是我的第一批博客文章就这样产生了。加油！！","source":"_posts/Jekyll-Chirpy-搭建备忘.md","raw":"---\ntitle: Jekyll-Chirpy 搭建备忘\ndate: 2022-01-21 13:23:32 +0800\ncategories: [博客搭建, 问题修复]\ntags: [博客]     # TAG names should always be lowercase\nauthor:\n  name: ShoJinto\n  link: https://shojinto.github.io\n---\n\n借助搜索引擎完成自己个人博客的搭建。\n\n主要因为自己忘性越来越好 :) 为了不至于今后自己做过的一些事情自己都一无所知。\n\n<!--more-->\n\n---\n\n\n\n#### 选择`Jekyll-Chirpy`的理由\n\n- 美观,开箱急用\n- 帮助文档虽然英文，但是还能凑合\n\n#### 符合`Chirpy`规范的文章写作指南\n\n[如何在Chripy上写文章](https://chirpy.cotes.page/posts/write-a-new-post/)\n\n等啥时候自己对`Jekyll`这个工具了解更多点儿再来整理吧，就目前来说能够将`markdown`文档通过`github.io`发布就行了。\n\n\n\n#### 搭建总结\n\n具体搭建以及布局跟着官文 step by step 即可。备忘的重点在如何开始利用markdown编写一篇符合`jekyll`规范的blog。这些`Chirpy`主题已经帮助解决了，作为用户的我只需要将心思放在写作内容上即可。\n\n其实在选择`Chirpy`这款主题之前我还尝试了另外一款`teXt-theme`风格也会这款的`dark`风格差不多，而且我还在上面写了一篇示例文章。但是最终为什么没有使用[`teXt-thems`](https://tianqi.name/jekyll-TeXt-theme/samples.html)呢？其实就是因为看了他的示例效果图，我想把博客首页给弄成如下标记的样式：\n\n![image-20220122042859794](../images/image-20220122042859794.png)\n\n但是我看了很久的文档尝试很多次（自己太菜）没有把作者的示例和`Jekyll`的`collections`搞明白，效果弄不出来自然也就放弃了。回头想来我主要是为了写东西，又不是做网站。只要大体上符合自己的要求就行。于是我的第一批博客文章就这样产生了。加油！！","slug":"Jekyll-Chirpy-搭建备忘","published":1,"updated":"2022-03-30T06:19:41.644Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1d7s73h0002kgscff102zxi","content":"<p>借助搜索引擎完成自己个人博客的搭建。</p>\n<p>主要因为自己忘性越来越好 :) 为了不至于今后自己做过的一些事情自己都一无所知。</p>\n<span id=\"more\"></span>\n\n<hr>\n<h4 id=\"选择Jekyll-Chirpy的理由\"><a href=\"#选择Jekyll-Chirpy的理由\" class=\"headerlink\" title=\"选择Jekyll-Chirpy的理由\"></a>选择<code>Jekyll-Chirpy</code>的理由</h4><ul>\n<li>美观,开箱急用</li>\n<li>帮助文档虽然英文，但是还能凑合</li>\n</ul>\n<h4 id=\"符合Chirpy规范的文章写作指南\"><a href=\"#符合Chirpy规范的文章写作指南\" class=\"headerlink\" title=\"符合Chirpy规范的文章写作指南\"></a>符合<code>Chirpy</code>规范的文章写作指南</h4><p><a href=\"https://chirpy.cotes.page/posts/write-a-new-post/\">如何在Chripy上写文章</a></p>\n<p>等啥时候自己对<code>Jekyll</code>这个工具了解更多点儿再来整理吧，就目前来说能够将<code>markdown</code>文档通过<code>github.io</code>发布就行了。</p>\n<h4 id=\"搭建总结\"><a href=\"#搭建总结\" class=\"headerlink\" title=\"搭建总结\"></a>搭建总结</h4><p>具体搭建以及布局跟着官文 step by step 即可。备忘的重点在如何开始利用markdown编写一篇符合<code>jekyll</code>规范的blog。这些<code>Chirpy</code>主题已经帮助解决了，作为用户的我只需要将心思放在写作内容上即可。</p>\n<p>其实在选择<code>Chirpy</code>这款主题之前我还尝试了另外一款<code>teXt-theme</code>风格也会这款的<code>dark</code>风格差不多，而且我还在上面写了一篇示例文章。但是最终为什么没有使用<a href=\"https://tianqi.name/jekyll-TeXt-theme/samples.html\"><code>teXt-thems</code></a>呢？其实就是因为看了他的示例效果图，我想把博客首页给弄成如下标记的样式：</p>\n<p><img src=\"/../images/image-20220122042859794.png\" alt=\"image-20220122042859794\"></p>\n<p>但是我看了很久的文档尝试很多次（自己太菜）没有把作者的示例和<code>Jekyll</code>的<code>collections</code>搞明白，效果弄不出来自然也就放弃了。回头想来我主要是为了写东西，又不是做网站。只要大体上符合自己的要求就行。于是我的第一批博客文章就这样产生了。加油！！</p>\n","site":{"data":{}},"excerpt":"<p>借助搜索引擎完成自己个人博客的搭建。</p>\n<p>主要因为自己忘性越来越好 :) 为了不至于今后自己做过的一些事情自己都一无所知。</p>","more":"<hr>\n<h4 id=\"选择Jekyll-Chirpy的理由\"><a href=\"#选择Jekyll-Chirpy的理由\" class=\"headerlink\" title=\"选择Jekyll-Chirpy的理由\"></a>选择<code>Jekyll-Chirpy</code>的理由</h4><ul>\n<li>美观,开箱急用</li>\n<li>帮助文档虽然英文，但是还能凑合</li>\n</ul>\n<h4 id=\"符合Chirpy规范的文章写作指南\"><a href=\"#符合Chirpy规范的文章写作指南\" class=\"headerlink\" title=\"符合Chirpy规范的文章写作指南\"></a>符合<code>Chirpy</code>规范的文章写作指南</h4><p><a href=\"https://chirpy.cotes.page/posts/write-a-new-post/\">如何在Chripy上写文章</a></p>\n<p>等啥时候自己对<code>Jekyll</code>这个工具了解更多点儿再来整理吧，就目前来说能够将<code>markdown</code>文档通过<code>github.io</code>发布就行了。</p>\n<h4 id=\"搭建总结\"><a href=\"#搭建总结\" class=\"headerlink\" title=\"搭建总结\"></a>搭建总结</h4><p>具体搭建以及布局跟着官文 step by step 即可。备忘的重点在如何开始利用markdown编写一篇符合<code>jekyll</code>规范的blog。这些<code>Chirpy</code>主题已经帮助解决了，作为用户的我只需要将心思放在写作内容上即可。</p>\n<p>其实在选择<code>Chirpy</code>这款主题之前我还尝试了另外一款<code>teXt-theme</code>风格也会这款的<code>dark</code>风格差不多，而且我还在上面写了一篇示例文章。但是最终为什么没有使用<a href=\"https://tianqi.name/jekyll-TeXt-theme/samples.html\"><code>teXt-thems</code></a>呢？其实就是因为看了他的示例效果图，我想把博客首页给弄成如下标记的样式：</p>\n<p><img src=\"/../images/image-20220122042859794.png\" alt=\"image-20220122042859794\"></p>\n<p>但是我看了很久的文档尝试很多次（自己太菜）没有把作者的示例和<code>Jekyll</code>的<code>collections</code>搞明白，效果弄不出来自然也就放弃了。回头想来我主要是为了写东西，又不是做网站。只要大体上符合自己的要求就行。于是我的第一批博客文章就这样产生了。加油！！</p>"},{"title":"jenkins-pipeline搭建nodejs持续集成项目","date":"2022-01-25T21:38:03.000Z","author":{"name":"ShoJinto","link":"https://shojinto.github.io"},"_content":"# Jenkins-pipeline + gitlab + nodejs 自动发布vue项目\n\n### 环境\n\nOS | SOFTWARE | NOTE\n:---:|:---:|:---:\nCentOS7.4|Jenkins2.327 |\n  x |nodejs16.3.2 | 实施版本`15.14.0`\n  x |gitlab13.2.0 |\n\n### 操作步骤\n#### 1. 编写`Pipeline`脚本\n\n公司新上项目前端项目采用`VUE`写成，需要接入`Jenkins-Pipeline`进行持续集成与发布。由于`Jenkins`上还没有`nodejs`环境所以需要配置。不上不知道以上才知道。先写好`Pipeline`脚本：\n```java\npipeline {\n    agent any\n\t\n\tenvironment {\n\t\tserviceName = \"compoment-official\"\n\t}\n    \n\ttools {\n        nodejs \"nodejs\"\n    }\n\n    stages {\n        stage('Preparation codes') {\n            steps {\n\t\t\t\tdir(\"${serviceName}\") {\n\t\t\t\t\tgit branch: \"develop\", credentialsId: 'ad3a4389-3f1f-42c8-86fe-aee55f362a8e', url: 'git@git.gitrepostory.com:compoment-web/compoment-official.git'\n\t\t\t\t}\n            }\n        }\n\n        stage('Install') {\n            steps {\n\t\t\t\tdir(\"${serviceName}\") {\n\t\t\t\t\tsh '''\n\t\t\t\t\tsource /opt/rh/devtoolset-7/enable\n\t\t\t\t\tnpm config set python /usr/local/python3/bin/python3\n\t\t\t\t\tnpm config set registry https://registry.npm.taobao.org\n\t\t\t\t\tnpm install\n\t\t\t\t\t'''\n\t\t\t\t}\n            }\n        }\n\n        stage('Build') {\n            steps {\n\t\t\t\tdir(\"${serviceName}\") {\n\t\t\t\t\tsh \"\"\"\n\t\t\t\t\tnpm run build:test\n\t\t\t\t\t\"\"\"\n                }\n            }\n        }\n\t\tstage('Build ansible-playbook') {\n\t\t\tsteps {\n\t\t\t\tscript {\n\t\t\t\t\tsh \"\"\"\n\t\t\t\t\trm -rf roles/${serviceName} # 清理release\n\t\t\t\t\tmv roles/projectname roles/${serviceName}\n\t\t\t\t\tcd ${serviceName}/dist/\n\t\t\t\t\tzip -9rv ${WORKSPACE}/roles/${serviceName}/files/${serviceName}.zip *\n\t\t\t\t\tcd ${WORKSPACE}\n\t\t\t\t\tsed -i 's/groupname/${serviceName}/' hosts\n\t\t\t\t\tsed -i 's/\\\\(projectname: \\\\).*/\\\\1${serviceName}/g' site.yml\n\t\t\t\t\tsed -i 's/\\\\(programfile: \\\\).*/\\\\1${serviceName}.zip/g' site.yml\n\t\t\t\t\t\"\"\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n        stage('Deploy To Remote Host') {\n            steps {\n\t\t\t\tscript {\n\t\t\t\t\tsh \"ansible-playbook -i hosts site.yml\"\n\t\t\t\t}\n            }\n        }\n    }\n}\n\n```\n#### 2. 解决`canvas`依赖问题\n\n`Jenkins`控制面板上一跑才发现，错误一大堆！！！\n```bash\n+ npm config set python /usr/1ocal/python3/bin/python3\n+ npm --registry=https://registry. npm. taobao. org install\nnpm WARN deprecated 9hapi/topo03. 1.6: This version has been deprecated and is no longer supported or maintained\n.....\nnpm WARN deprecated core-js02.6.12: core-js0<3.3 is no longer maintained and not recommended for usage due to the number of issues. Because of the V8 engine whims， feature detection in old core-js versions could Ci\nto the actual version of core-js.\nnpm ERR! code 1\nnpm BRR! path /var/1ib/ jenkins/ jobs/tfxing-official-dev/workspace/ode_modu1es/canvas\napm ERR! command failed  # 关键错误信息\nipm ERR! command sh -c node-pre-gyp install -- fallback-to-build\nnpm BRR! Failed to execute '/var/1ib/ jenkins/tools/ jenkins. plugins. nodejs. tools. NodeJSInstallation/nodejs/bin/node /var/1ib/ jenkins/tools/ jenkins. plugins. nodejs. tools. NodeJSInstallation/nodejs/1ib/node. modules/npm\nmodule=/var/lib/ jenkins/ jobs/tfxing-official-dev/workspace/node_ _modules/canvas/bui1d/Release/canvas. node --module_name=canvas --module_ path=/var/1ib/ jenkins/ jobs/tfxing-official-dev/workspace/node_modules/canvas/bl\nnode_ napi 1abel=node-v93 --python=/usr/1ocal/python3/bin/python3’ (1)\nnpm ERR! node-pre-gyp info it worked if it ends with ok\n.....\n```\n怎么会出现`canvas`模块无法安装呢？明明项目的`package.json`中已经把相关依赖都安装上了。重试多吃无果，只能对依赖模块进行单独安装。但仍旧报错：\n```bash\n+ npm config set python /usr/1ocal/python3/bin/python3\nnpm config set registry https://registry. npm. taobao. org\n+ npm install canvas02.9.0 # 单独安装canvas\nnpm WARN deprecated @hapi/topo03.1.6: This version has been deprecated and is no longer supported or maintained\nnpm WARN deprecated Chapi/bourne01.3.2: This version has been deprecated and is no longer supported or maintained\nnpm WARN deprecated urix0.1.0: Please see https://github. com/1yde11/urix#deprecated\nnpm WARN deprecated har-validator05.1.5: this library is no 1onger supported\nnpm WARN deprecated eslint-loader02.2. 1: This loader has been deprecated. Please use eslint-webpack-plugin\nnpm WARN deprecated resolve-ur100.2. 1: https://github. com/lyde1l/resolve-ur1#deprecated\nnpm WARN deprecated chokidar02.1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies.\nnpm WARN deprecated chokidar02. 1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies.\nnpm WARN deprecated querystring0.2.0: The querystring API is considered Legacy. new code should use the URLSearchParams API instead.\nnpm WARN deprecated html-webpack-plugin03.2.0: 3.x is no longer supported\nnpm WARN deprecated babel-eslint010.1.0: babel-eslint is now @babel/eslint-parser. This package will no longer receive updates.\nnpm WARN deprecated Qhapi/address02. 1.4: Moved to。 npm install esideway/address '\nnpm WARN deprecated uuid03.4.0: Please upgrade to version 7 or higher. 01der versions may use Math. random() in certain circumstances, which is known to be problematic. See https://v8. dev/b1og/math-random :\nnpm WARN deprecated request02. 88.2: request has been deprecated， see https://github. com/request/request/issues/3142\nnpm WARN deprecated Qhapi/hoek08.5.1: This version has been deprecated and is no 1onger supported or maintained\nnpm WARN deprecated Qhapi/joi015.1.1: Switch to 'npm install joi'\nnpm WARN deprecated svg01.3.2: This SVGO version is no longer supported. Upgrade to v2.x.x.\nnpm WARN deprecated core-js02. 6.12: core-js0<3.3 is no longer maintained and not recommended for usage due to the number of issues. Because of the V8 engine whims，feature detection in old core-js versions could\nto the actual version of core-js.\nnpm BRR! code 1\nnpm BRR! path /var/1ib/ jenkins/jobs/tfxing-official-dev/workspace/node_modules/node-sass # 此时又报依赖node-sass模块错误\nnpm ERR! command failed\nnpm ERR! command sh -c node scripts/build. js\n```\n#### 3. 解决`node-sass`依赖\n\n没办法继续对`node-sass`模块进行独立安装，但仍旧报错：\n```bash\n+ npm install --python=/usr/bin/python ，node-sass0^4.0.0'\nnpm WARN deprecated Chapi/topo@3. 1.6: This version has been deprecated and is no longer supported or maintained\nnpm WARN deprecated Chapi/bourne01. 3.2: This version has been deprecated and is no longer supported or maintained\n....\nnpm ERR! gyp info spawn args [ 'BUILDTYPE=Release', ' -C*，’huild' 1\nnpm ERR! g++: error: unrecognized command line option( ‘-std=gnu++14’ # 此处是关键错误信息\nnpm ERR! make: *** [Release/obj. target/libsass/src/libsass/src/ast.o] Error 1\nnpm ERR! gyp ERR! build error\nnpm ERR! gyp ERR! stack Error:\nmake failed with exit code: 2\n....\n```\n#### 4. 解决`gnu++14`依赖\n到此处问题开始明朗起来了！！！再接再厉。\n从错误信息中可以得知系统上没有`gnu++14`，原因很简单`CentOS7.4`默认的`GCC4.8`不支持，需要升级GCC。在网上找到一篇说得很清楚的问文章:[centos 升级gcc - tycoon3 - 博客园 (cnblogs.com) ](https://www.cnblogs.com/dream397/p/14148796.html) 根据这篇文章升级到`GCC7`——查看`devtoolset`源可得知目前其最低版本已经到7最高到11。\n```bash\n> sudo yum list |grep gcc\n...\ndevtoolset-10-gcc.x86_64                   10.2.1-11.2.el7        centos-sclo-rh\ndevtoolset-10-libgccjit-devel.x86_64       10.2.1-11.2.el7        centos-sclo-rh\ndevtoolset-10-libgccjit-docs.x86_64        10.2.1-11.2.el7        centos-sclo-rh\n...\ndevtoolset-11-annobin-plugin-gcc.x86_64    9.82-1.el7.1           centos-sclo-rh\ndevtoolset-11-libgccjit-devel.x86_64       11.2.1-1.2.el7         centos-sclo-rh\ndevtoolset-11-libgccjit-docs.x86_64        11.2.1-1.2.el7         centos-sclo-rh\n...\ndevtoolset-7-gcc-gdb-plugin.x86_64         7.3.1-5.16.el7         centos-sclo-rh\ndevtoolset-7-gcc-gfortran.x86_64           7.3.1-5.16.el7         centos-sclo-rh\ndevtoolset-7-gcc-plugin-devel.x86_64       7.3.1-5.16.el7         centos-sclo-rh\n...\ndevtoolset-8-gcc.x86_64                    8.3.1-3.2.el7          centos-sclo-rh\ndevtoolset-8-gcc-c++.x86_64                8.3.1-3.2.el7          centos-sclo-rh\ndevtoolset-8-libgccjit-docs.x86_64         8.3.1-3.2.el7          centos-sclo-rh\n...\ndevtoolset-9-libgccjit.x86_64              9.3.1-2.2.el7          centos-sclo-rh\ndevtoolset-9-libgccjit-devel.x86_64        9.3.1-2.2.el7          centos-sclo-rh\ndevtoolset-9-libgccjit-docs.x86_64         9.3.1-2.2.el7          centos-sclo-rh\n...\n```\n这里直接安装devtoolset-7\n```bash\nyum install -y devtoolset-7-gcc devtoolset-7-gcc-c++\n```\n\n值得说明的是这些软件包可以同时安装，不会相互覆盖和冲突，也不会覆盖系统的版本。即可以在系统中可同时存在gcc 6, gcc 7, gcc 8等多个版本。\n\n因为不会覆盖系统默认的gcc，使用这些软件的方法有四种：\n\n1. 使用绝对路径；\n2. 添加可执行文件路径到PATH环境变量；\n3. 使用官方推荐的加载命令：`scl enable devtoolset-x bash`, x为要启用的版本;\n4. 执行安装软件自带的脚本： `source /opt/rh/devtoolset-x/enable`，x为要启用的版本。\n\n实践推荐使用最后两种方式。例如启用gcc 6: `source /opt/rh/devtoolset-6/enable`，接着输入gcc -v查看版本已经变成gcc 6.3.1。如果希望长期使用某个高版本，可将此命令写入.bashrc等配置文件。\n\n以上说明引用自[centos 升级gcc - tycoon3 - 博客园 (cnblogs.com)](https://www.cnblogs.com/dream397/p/14148796.html)\n\n经过测试在`Jenkins-Pipeline`中使用：`source /opt/rh/devtoolset-x/enable` 才有效\n\n#### 5. 解决`python3`的依赖\n\n此时还要注意组件编译过程中需要python3.6+的支持:\n```bash\n...\nnpm ERR! gyp ERR! find Python checking Python explicitly set from command line or npm configuration\nnpm ERR! gyp ERR! find Python -”- - python=”or' 'npm config get python” is\" /usr/bin/python'\nnpm ERR! 8yp ERR! find Python - executable path is\" /usr/bin/python\nnpm ERR! gyp ERR! find Python - version is \"2. 7.5\"\nnpm ERR! gyp ERR! find Python - version is 2.7.5 - should be >=3.6.0.\nnpm ERR! gyp ERR! find Python - THIS VBRSION OF PYTHON IS NOT SUPPORTED\nnpm ERR! gyp ERR! find Python Python is not set from environment variable PYTHON\nnpm ERR! gyp ERR! find Python checking if \"python3” can be used\nnpm ERR! gyp ERR! find Python -\" python3” is not in PATH or produced an error\nnpm ERR! gyp ERR! find Python checking if\" python\" can be used\nnpm ERR! gyp ERR! find Python - executable path is\" /bin/python'\nnpm ERR! gyp ERR! find Python - version is \"2. 7.5”\nnpm ERR! 8yp ERR! find Python - version is 2. 7.5 - should be >=3. 6.0\nnpm ERR! gyp ERR! find Python - THIS VERSION 0F PYTHON IS NOT SUPPORTED\nnpm ERR! gyp ERR! find Python\nnpm ERR! gyp ERR! find Python **********************************************\nnpm ERR! gyp ERR! find Python You need to install the latest version of Python.\nnpm BRR! 8Yp ERR! find Python Node-gyp should be able to find and use Python. If not,\nnpm ERR! gyp ERR! find Python you can try one of the following options:\nnpm ERR! gyp ERR! find Python - Use the switch --python=\" /path/to/pythonexecutable\"\nnpm ERR! gyp ERR! find Python\n(accepted by both node-gyp and npm)\nnpm ERR! gyp ERR! find Python - Set the environment variable PYTHON\nnpm ERR! 8yP ERR! find Python - Set the npm configuration variable python:\nnpm ERR! gyp ERR! find Python\nnpm config set python \"/path/to/pythonexecutable\"\nnpm ERR! gyp ERR! find Python For more information consult the documentation at:\nnpm ERR! gyp ERR! find Python https://github. com/nodejs/node-gyp#installation\nnpm ERR! gyp ERR! find Python *******************************************\nnom ERR1 gvp ERR1 find Pvthon\n...\n```\n因此只需要在执行`install`之前机上如下代码即可解决`python3`依赖的问题\n```bash\n+ npm config set python /usr/1ocal/python3/bin/python3\n+ npm --registry-https:/ / registry. npm. taobao. org install\n```\n#### 6. 解决`nodejs`与`node-sass`版本匹配的问题\n\n另外对nodejs的版本也有要求，不然就会报如下错误：\n```bash\nnpm EKK! /var/ 11b/ jenkins/. cache/noae-gyp/ 10.13. 2/1ncluae/ noae/v8-1nternal. h:492:58: note: suggestea alternative:\" remove_cv\nnpm BRR! \n!std::is_ same<Data， std::remove_Cv_t<T>>::value>::Perform(data) :\nnpm BRR\nnpm BRR!\nremove_ _cv\nnpm ERR! /var/1ib/jenkins/. cache/node-gyp/16. 13. 2/include/node/v8-internal. h:492:38: error: 'remove_ _cv_t’is not a member of 'std' \nnpm ERR! /var/lib/ jenkins/. cache/node-gyp/16. 13. 2/include/node/v8-interna1. h:492:38: note: suggested alternative:‘ remove_cv'\nnpm ERR\n!std::is_same<Data， std::remove_cv_t<T>>::value>::Perform(data) ;\nnpm BRR\nnpm ERR!\nremove_cv\nnpm ERR! /var/1ib/ jenkins/.cache/node-gyp/16. 13. 2/ include/node/v8-internal. h:492:50: error: template argument 2 is invalid\nrpm RR!\n!std::is_ same<Data， std::remove_cv_t<T>>::value>::Perform (data) ;\nnpm BRR!\nnpm BRR! /var/lib/jenkins/. cache/node-gyp/16. 13. 2/include/node/v8-internal. h:492:63: error: ‘::Perform’ has not been declared\nnpm ERR!\n!std::is_ same<Data，std::remove_cv_t<T>>::value>::Perform(data) :\nnpm BRR!\nnpm BRR! /var/lib/ jenkins/.cache/node-gyp/16.13. 2/include/node/v8-internal. h:492:63: note: suggested alternative: herror '\nnpm ERR!\n!std::is_ same<Data， std::remove_Cv_t<T>>::value>: :Perform(data) :\nnpm ERR!\nnpm ERR!\nherror\nnpm BRR! make: *** [Release/obj. target/binding/src/binding.o] Error 1 # 此处为关键错误信息\nnpm BRR! gYP ERR! build error\nnpm BERR! gyp ERR! stack Brror:、 make failed with exit code: 2\nnpm ERR! gyp ERR! stack\nat ChildProcess. onExit (/var/1ib/ jenkins/ jobs/ tfxing-official-dev/workspace/node_ modules/node-gyp/1ib/build. js:194:23)\nnpm BRR! gyp BRR! stack\nnpm ERR! gyp BRR! stack\nat Process. ChildProcess.. _handle.onexit (node:internal/chi1d_ process:290:12) .\nnpm BRR! gyp ERR! System Linux 3. 10.0-327.36. 3. e17.x86_ _64\nnpm ERR! BYP ERR! command' /var/1ib/jenkins/tools/ jenkins. plugins. nodejs. tools. NodeJSInstallation/nodejs/bin/node”\" /var/lib/ jenkins/ jobs/tfxing-official-dev/workspace/node. _modules/node-8yp/bin/node-gYP\nnpm ERR! gyp ERR! cwd /var/1ib/jenkins/ jobs/tfxing-official-dev/workspace/node_ modules/node-sass\nnpm ERR! 8yp BERR! node -v v16. 13.2\nnpm BRR! gyp BRR! node-gyp -v v7.1.2\nnpm ERR! gyp ERR! not ok\nnpm ERR! Build failed with error code: 1\n```\n遇事不决问Google：谷歌出奇迹！！！在这里：[https://www.codenong.com/cs122036023/](https://www.codenong.com/cs122036023/)\n找到一张`node`与`node-sass`的匹配图：\n![](https://i2.wp.com/img-blog.csdnimg.cn/img_convert/5d3fd2526f22a1c25768eb46a9ccb290.png)\n\n出处: [https://github.com/sass/node-sass](https://github.com/sass/node-sass)\n\n再通过项目中的`packages.json`文件找到`node-sass`的版本是`5.0.0`因此正确的`nodejs`版本是`15`，需要对`nodejs`进行降级。\n降级之后仍然报错！！此时头顶飘过一万条`草泥马、草泥马、草泥马、草泥马`！！！\n```bash\nnpm ER! Package pixman-1 was not found in the pkg-config search path.\nnpm ER! Perhaps you should add the directory containing pixman- 1.pc'\nnpm ERR! to the PKG_CONFIG_ PATH envir onment variable\nnpm ERR! No package'pixman-1’ found # 此为何方妖物呀！！！:( :(\nnpm ERR! gyP: Call to’ pkg-config pixman-1 --libs’ returned exit status 1 while in binding. gyp. while trying to load binding. gyPp\nnpm ERR! gyP ERR! configure error\nnpm ERR! gyP ERR! stack Error:、 gyP failed with exit code: 1\n```\nNo package 'pixman-1' found ？ 什么鬼。。。。\n\n在StackOverflow上有人已经回答了：\n\nhttps://stackoverflow.com/questions/64562563/how-can-i-ovecome-this-error-in-npm-install \n\n跟随跳转：\n\nhttps://github.com/Automattic/node-canvas\n\n在`node-canvas`的GitHub仓库中找到解决方案：\n\n`sudo yum install gcc-c++ cairo-devel pango-devel libjpeg-turbo-devel giflib-devel`\n\n最终编译成功：\n```bash\ngcc version 7.3. 120180303 (Red Hat 7.3. 1-5) (GCC)\n+ npm config set python /usr/1ocal/ python3/bin/ python3\n+ npm config set registry https:/fregistry. npm. taobao. org\n+ npm install\nnpm WARN deprecated @hapi/topo@3. 1. 6: This version has been deprecated and is no longer supported or maintained\nnpm WARN deprecated @hapi/bourne@1.3. 2: This version has been deprecated and is no longer supported or maintained\nnpm WARN deprecated urix@0. 1.0: Please see https: 1{ github. com/ 1ydell/ur ix#deprecated\nnpm WARN deprecated har- -validator@5. 1.5: this library is no longer supported\nnpm WARN deprecated eslint- loader@2.2. 1: This loader has been deprecated. Please use eslint- -webpack- plugin\nnpm WARN deprecated resolve- url@0. 2.1: https: 11 github. com/ 1yde11/ resolve- -url#deprecated\nnpm WARN deprecated chokidar@2. 1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies.\nnpm WARN deprecated chokidar@2. 1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies.\nnpm WARN deprecated querystring@0. 2.0: The querystring API is considered Legacy. new code should use the URL SearchParams API instead.\nnpm WARN deprecated html-webpack- -plugin@3. 2.0: 3.x is no longer supported\nnpm WARN deprecated babel-eslint@10. 1.0: babel-eslint is now @babel/eslint-parser. This package will no longer receive updates.\nnpm WARN deprecated @hapi/ address@2. 1.4: Moved to’npm install @sideway/ address'\nnpm WARN deprecated uuid@3. 4. 0: Please upgrade\nto version 7 or higher.\n01der versions may use Math. random() in certain circumstances\nnpm WARN deprecated request@2. 88. 2: request has been deprecated, see https: //github. com/ request/ request/issues/3142\nnpm WARN deprecated @hapi/hoek@8.5. 1: This version has been deprecated and is no longer supported or maint ained\nnpm WARN deprecated @hapi/joi@15. 1. 1: Switch to’npm install joi'\nnpm WARN deprecated svgo@1. 3.2: This SVGO version is no longer supported. Upgrade to v2. x. x.\nnpm WARN deprecated core- js@2. 6.12: core-js@<3.3 is no longer maintained and not recommended for usage due to the number of issues. Be\nto the actual version of core- js.\nadded 1475 packages in 4m\n87 packages are looking for funding\nrun、npm fund~ for details\n```\n哎呀！妈呀！！这下成功了！！！\n\n### 总结\n\n喜大普奔，总结下经验教训：\n\n`nodejs`相关的项目编译，需要以来的东西大致有：`GCC=5+` 、`Python3.6+` 、（\"`sudo yum install gcc-c++ cairo-devel pango-devel libjpeg-turbo-devel giflib-devel`\" 如果项目没有`node-canvas`依赖应该可以跳过）。编译`nodejs`项目查看日志错误信息，`从下往上`更有助于发现问题的根源。就拿本次经历来说：根源问题还是编译node-sass的时候所依赖的\n```bash\nnpm ERR! gyp info spawn args [ 'BUILDTYPE=Release', '-C', 'build' ]\nnpm ERR! g++: error: unrecognized command line option ‘-std=gnu++14’\n```\n解决了这个报错后面nodejs与node-sass版本匹配度的问题才会浮出水面，到最后node-canvas的系统依赖库。将这些解决了编译才最终完成。 ","source":"_posts/Jenkins-Pipeline-搭建nodejs持续集成项目.md","raw":"---\ntitle: jenkins-pipeline搭建nodejs持续集成项目\ndate: 2022-01-26 13:38:03 +0800\ncategories: [运维, 环境搭建]\ntags: [运维]\nauthor: \n  name: ShoJinto\n  link: https://shojinto.github.io\n---\n# Jenkins-pipeline + gitlab + nodejs 自动发布vue项目\n\n### 环境\n\nOS | SOFTWARE | NOTE\n:---:|:---:|:---:\nCentOS7.4|Jenkins2.327 |\n  x |nodejs16.3.2 | 实施版本`15.14.0`\n  x |gitlab13.2.0 |\n\n### 操作步骤\n#### 1. 编写`Pipeline`脚本\n\n公司新上项目前端项目采用`VUE`写成，需要接入`Jenkins-Pipeline`进行持续集成与发布。由于`Jenkins`上还没有`nodejs`环境所以需要配置。不上不知道以上才知道。先写好`Pipeline`脚本：\n```java\npipeline {\n    agent any\n\t\n\tenvironment {\n\t\tserviceName = \"compoment-official\"\n\t}\n    \n\ttools {\n        nodejs \"nodejs\"\n    }\n\n    stages {\n        stage('Preparation codes') {\n            steps {\n\t\t\t\tdir(\"${serviceName}\") {\n\t\t\t\t\tgit branch: \"develop\", credentialsId: 'ad3a4389-3f1f-42c8-86fe-aee55f362a8e', url: 'git@git.gitrepostory.com:compoment-web/compoment-official.git'\n\t\t\t\t}\n            }\n        }\n\n        stage('Install') {\n            steps {\n\t\t\t\tdir(\"${serviceName}\") {\n\t\t\t\t\tsh '''\n\t\t\t\t\tsource /opt/rh/devtoolset-7/enable\n\t\t\t\t\tnpm config set python /usr/local/python3/bin/python3\n\t\t\t\t\tnpm config set registry https://registry.npm.taobao.org\n\t\t\t\t\tnpm install\n\t\t\t\t\t'''\n\t\t\t\t}\n            }\n        }\n\n        stage('Build') {\n            steps {\n\t\t\t\tdir(\"${serviceName}\") {\n\t\t\t\t\tsh \"\"\"\n\t\t\t\t\tnpm run build:test\n\t\t\t\t\t\"\"\"\n                }\n            }\n        }\n\t\tstage('Build ansible-playbook') {\n\t\t\tsteps {\n\t\t\t\tscript {\n\t\t\t\t\tsh \"\"\"\n\t\t\t\t\trm -rf roles/${serviceName} # 清理release\n\t\t\t\t\tmv roles/projectname roles/${serviceName}\n\t\t\t\t\tcd ${serviceName}/dist/\n\t\t\t\t\tzip -9rv ${WORKSPACE}/roles/${serviceName}/files/${serviceName}.zip *\n\t\t\t\t\tcd ${WORKSPACE}\n\t\t\t\t\tsed -i 's/groupname/${serviceName}/' hosts\n\t\t\t\t\tsed -i 's/\\\\(projectname: \\\\).*/\\\\1${serviceName}/g' site.yml\n\t\t\t\t\tsed -i 's/\\\\(programfile: \\\\).*/\\\\1${serviceName}.zip/g' site.yml\n\t\t\t\t\t\"\"\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n        stage('Deploy To Remote Host') {\n            steps {\n\t\t\t\tscript {\n\t\t\t\t\tsh \"ansible-playbook -i hosts site.yml\"\n\t\t\t\t}\n            }\n        }\n    }\n}\n\n```\n#### 2. 解决`canvas`依赖问题\n\n`Jenkins`控制面板上一跑才发现，错误一大堆！！！\n```bash\n+ npm config set python /usr/1ocal/python3/bin/python3\n+ npm --registry=https://registry. npm. taobao. org install\nnpm WARN deprecated 9hapi/topo03. 1.6: This version has been deprecated and is no longer supported or maintained\n.....\nnpm WARN deprecated core-js02.6.12: core-js0<3.3 is no longer maintained and not recommended for usage due to the number of issues. Because of the V8 engine whims， feature detection in old core-js versions could Ci\nto the actual version of core-js.\nnpm ERR! code 1\nnpm BRR! path /var/1ib/ jenkins/ jobs/tfxing-official-dev/workspace/ode_modu1es/canvas\napm ERR! command failed  # 关键错误信息\nipm ERR! command sh -c node-pre-gyp install -- fallback-to-build\nnpm BRR! Failed to execute '/var/1ib/ jenkins/tools/ jenkins. plugins. nodejs. tools. NodeJSInstallation/nodejs/bin/node /var/1ib/ jenkins/tools/ jenkins. plugins. nodejs. tools. NodeJSInstallation/nodejs/1ib/node. modules/npm\nmodule=/var/lib/ jenkins/ jobs/tfxing-official-dev/workspace/node_ _modules/canvas/bui1d/Release/canvas. node --module_name=canvas --module_ path=/var/1ib/ jenkins/ jobs/tfxing-official-dev/workspace/node_modules/canvas/bl\nnode_ napi 1abel=node-v93 --python=/usr/1ocal/python3/bin/python3’ (1)\nnpm ERR! node-pre-gyp info it worked if it ends with ok\n.....\n```\n怎么会出现`canvas`模块无法安装呢？明明项目的`package.json`中已经把相关依赖都安装上了。重试多吃无果，只能对依赖模块进行单独安装。但仍旧报错：\n```bash\n+ npm config set python /usr/1ocal/python3/bin/python3\nnpm config set registry https://registry. npm. taobao. org\n+ npm install canvas02.9.0 # 单独安装canvas\nnpm WARN deprecated @hapi/topo03.1.6: This version has been deprecated and is no longer supported or maintained\nnpm WARN deprecated Chapi/bourne01.3.2: This version has been deprecated and is no longer supported or maintained\nnpm WARN deprecated urix0.1.0: Please see https://github. com/1yde11/urix#deprecated\nnpm WARN deprecated har-validator05.1.5: this library is no 1onger supported\nnpm WARN deprecated eslint-loader02.2. 1: This loader has been deprecated. Please use eslint-webpack-plugin\nnpm WARN deprecated resolve-ur100.2. 1: https://github. com/lyde1l/resolve-ur1#deprecated\nnpm WARN deprecated chokidar02.1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies.\nnpm WARN deprecated chokidar02. 1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies.\nnpm WARN deprecated querystring0.2.0: The querystring API is considered Legacy. new code should use the URLSearchParams API instead.\nnpm WARN deprecated html-webpack-plugin03.2.0: 3.x is no longer supported\nnpm WARN deprecated babel-eslint010.1.0: babel-eslint is now @babel/eslint-parser. This package will no longer receive updates.\nnpm WARN deprecated Qhapi/address02. 1.4: Moved to。 npm install esideway/address '\nnpm WARN deprecated uuid03.4.0: Please upgrade to version 7 or higher. 01der versions may use Math. random() in certain circumstances, which is known to be problematic. See https://v8. dev/b1og/math-random :\nnpm WARN deprecated request02. 88.2: request has been deprecated， see https://github. com/request/request/issues/3142\nnpm WARN deprecated Qhapi/hoek08.5.1: This version has been deprecated and is no 1onger supported or maintained\nnpm WARN deprecated Qhapi/joi015.1.1: Switch to 'npm install joi'\nnpm WARN deprecated svg01.3.2: This SVGO version is no longer supported. Upgrade to v2.x.x.\nnpm WARN deprecated core-js02. 6.12: core-js0<3.3 is no longer maintained and not recommended for usage due to the number of issues. Because of the V8 engine whims，feature detection in old core-js versions could\nto the actual version of core-js.\nnpm BRR! code 1\nnpm BRR! path /var/1ib/ jenkins/jobs/tfxing-official-dev/workspace/node_modules/node-sass # 此时又报依赖node-sass模块错误\nnpm ERR! command failed\nnpm ERR! command sh -c node scripts/build. js\n```\n#### 3. 解决`node-sass`依赖\n\n没办法继续对`node-sass`模块进行独立安装，但仍旧报错：\n```bash\n+ npm install --python=/usr/bin/python ，node-sass0^4.0.0'\nnpm WARN deprecated Chapi/topo@3. 1.6: This version has been deprecated and is no longer supported or maintained\nnpm WARN deprecated Chapi/bourne01. 3.2: This version has been deprecated and is no longer supported or maintained\n....\nnpm ERR! gyp info spawn args [ 'BUILDTYPE=Release', ' -C*，’huild' 1\nnpm ERR! g++: error: unrecognized command line option( ‘-std=gnu++14’ # 此处是关键错误信息\nnpm ERR! make: *** [Release/obj. target/libsass/src/libsass/src/ast.o] Error 1\nnpm ERR! gyp ERR! build error\nnpm ERR! gyp ERR! stack Error:\nmake failed with exit code: 2\n....\n```\n#### 4. 解决`gnu++14`依赖\n到此处问题开始明朗起来了！！！再接再厉。\n从错误信息中可以得知系统上没有`gnu++14`，原因很简单`CentOS7.4`默认的`GCC4.8`不支持，需要升级GCC。在网上找到一篇说得很清楚的问文章:[centos 升级gcc - tycoon3 - 博客园 (cnblogs.com) ](https://www.cnblogs.com/dream397/p/14148796.html) 根据这篇文章升级到`GCC7`——查看`devtoolset`源可得知目前其最低版本已经到7最高到11。\n```bash\n> sudo yum list |grep gcc\n...\ndevtoolset-10-gcc.x86_64                   10.2.1-11.2.el7        centos-sclo-rh\ndevtoolset-10-libgccjit-devel.x86_64       10.2.1-11.2.el7        centos-sclo-rh\ndevtoolset-10-libgccjit-docs.x86_64        10.2.1-11.2.el7        centos-sclo-rh\n...\ndevtoolset-11-annobin-plugin-gcc.x86_64    9.82-1.el7.1           centos-sclo-rh\ndevtoolset-11-libgccjit-devel.x86_64       11.2.1-1.2.el7         centos-sclo-rh\ndevtoolset-11-libgccjit-docs.x86_64        11.2.1-1.2.el7         centos-sclo-rh\n...\ndevtoolset-7-gcc-gdb-plugin.x86_64         7.3.1-5.16.el7         centos-sclo-rh\ndevtoolset-7-gcc-gfortran.x86_64           7.3.1-5.16.el7         centos-sclo-rh\ndevtoolset-7-gcc-plugin-devel.x86_64       7.3.1-5.16.el7         centos-sclo-rh\n...\ndevtoolset-8-gcc.x86_64                    8.3.1-3.2.el7          centos-sclo-rh\ndevtoolset-8-gcc-c++.x86_64                8.3.1-3.2.el7          centos-sclo-rh\ndevtoolset-8-libgccjit-docs.x86_64         8.3.1-3.2.el7          centos-sclo-rh\n...\ndevtoolset-9-libgccjit.x86_64              9.3.1-2.2.el7          centos-sclo-rh\ndevtoolset-9-libgccjit-devel.x86_64        9.3.1-2.2.el7          centos-sclo-rh\ndevtoolset-9-libgccjit-docs.x86_64         9.3.1-2.2.el7          centos-sclo-rh\n...\n```\n这里直接安装devtoolset-7\n```bash\nyum install -y devtoolset-7-gcc devtoolset-7-gcc-c++\n```\n\n值得说明的是这些软件包可以同时安装，不会相互覆盖和冲突，也不会覆盖系统的版本。即可以在系统中可同时存在gcc 6, gcc 7, gcc 8等多个版本。\n\n因为不会覆盖系统默认的gcc，使用这些软件的方法有四种：\n\n1. 使用绝对路径；\n2. 添加可执行文件路径到PATH环境变量；\n3. 使用官方推荐的加载命令：`scl enable devtoolset-x bash`, x为要启用的版本;\n4. 执行安装软件自带的脚本： `source /opt/rh/devtoolset-x/enable`，x为要启用的版本。\n\n实践推荐使用最后两种方式。例如启用gcc 6: `source /opt/rh/devtoolset-6/enable`，接着输入gcc -v查看版本已经变成gcc 6.3.1。如果希望长期使用某个高版本，可将此命令写入.bashrc等配置文件。\n\n以上说明引用自[centos 升级gcc - tycoon3 - 博客园 (cnblogs.com)](https://www.cnblogs.com/dream397/p/14148796.html)\n\n经过测试在`Jenkins-Pipeline`中使用：`source /opt/rh/devtoolset-x/enable` 才有效\n\n#### 5. 解决`python3`的依赖\n\n此时还要注意组件编译过程中需要python3.6+的支持:\n```bash\n...\nnpm ERR! gyp ERR! find Python checking Python explicitly set from command line or npm configuration\nnpm ERR! gyp ERR! find Python -”- - python=”or' 'npm config get python” is\" /usr/bin/python'\nnpm ERR! 8yp ERR! find Python - executable path is\" /usr/bin/python\nnpm ERR! gyp ERR! find Python - version is \"2. 7.5\"\nnpm ERR! gyp ERR! find Python - version is 2.7.5 - should be >=3.6.0.\nnpm ERR! gyp ERR! find Python - THIS VBRSION OF PYTHON IS NOT SUPPORTED\nnpm ERR! gyp ERR! find Python Python is not set from environment variable PYTHON\nnpm ERR! gyp ERR! find Python checking if \"python3” can be used\nnpm ERR! gyp ERR! find Python -\" python3” is not in PATH or produced an error\nnpm ERR! gyp ERR! find Python checking if\" python\" can be used\nnpm ERR! gyp ERR! find Python - executable path is\" /bin/python'\nnpm ERR! gyp ERR! find Python - version is \"2. 7.5”\nnpm ERR! 8yp ERR! find Python - version is 2. 7.5 - should be >=3. 6.0\nnpm ERR! gyp ERR! find Python - THIS VERSION 0F PYTHON IS NOT SUPPORTED\nnpm ERR! gyp ERR! find Python\nnpm ERR! gyp ERR! find Python **********************************************\nnpm ERR! gyp ERR! find Python You need to install the latest version of Python.\nnpm BRR! 8Yp ERR! find Python Node-gyp should be able to find and use Python. If not,\nnpm ERR! gyp ERR! find Python you can try one of the following options:\nnpm ERR! gyp ERR! find Python - Use the switch --python=\" /path/to/pythonexecutable\"\nnpm ERR! gyp ERR! find Python\n(accepted by both node-gyp and npm)\nnpm ERR! gyp ERR! find Python - Set the environment variable PYTHON\nnpm ERR! 8yP ERR! find Python - Set the npm configuration variable python:\nnpm ERR! gyp ERR! find Python\nnpm config set python \"/path/to/pythonexecutable\"\nnpm ERR! gyp ERR! find Python For more information consult the documentation at:\nnpm ERR! gyp ERR! find Python https://github. com/nodejs/node-gyp#installation\nnpm ERR! gyp ERR! find Python *******************************************\nnom ERR1 gvp ERR1 find Pvthon\n...\n```\n因此只需要在执行`install`之前机上如下代码即可解决`python3`依赖的问题\n```bash\n+ npm config set python /usr/1ocal/python3/bin/python3\n+ npm --registry-https:/ / registry. npm. taobao. org install\n```\n#### 6. 解决`nodejs`与`node-sass`版本匹配的问题\n\n另外对nodejs的版本也有要求，不然就会报如下错误：\n```bash\nnpm EKK! /var/ 11b/ jenkins/. cache/noae-gyp/ 10.13. 2/1ncluae/ noae/v8-1nternal. h:492:58: note: suggestea alternative:\" remove_cv\nnpm BRR! \n!std::is_ same<Data， std::remove_Cv_t<T>>::value>::Perform(data) :\nnpm BRR\nnpm BRR!\nremove_ _cv\nnpm ERR! /var/1ib/jenkins/. cache/node-gyp/16. 13. 2/include/node/v8-internal. h:492:38: error: 'remove_ _cv_t’is not a member of 'std' \nnpm ERR! /var/lib/ jenkins/. cache/node-gyp/16. 13. 2/include/node/v8-interna1. h:492:38: note: suggested alternative:‘ remove_cv'\nnpm ERR\n!std::is_same<Data， std::remove_cv_t<T>>::value>::Perform(data) ;\nnpm BRR\nnpm ERR!\nremove_cv\nnpm ERR! /var/1ib/ jenkins/.cache/node-gyp/16. 13. 2/ include/node/v8-internal. h:492:50: error: template argument 2 is invalid\nrpm RR!\n!std::is_ same<Data， std::remove_cv_t<T>>::value>::Perform (data) ;\nnpm BRR!\nnpm BRR! /var/lib/jenkins/. cache/node-gyp/16. 13. 2/include/node/v8-internal. h:492:63: error: ‘::Perform’ has not been declared\nnpm ERR!\n!std::is_ same<Data，std::remove_cv_t<T>>::value>::Perform(data) :\nnpm BRR!\nnpm BRR! /var/lib/ jenkins/.cache/node-gyp/16.13. 2/include/node/v8-internal. h:492:63: note: suggested alternative: herror '\nnpm ERR!\n!std::is_ same<Data， std::remove_Cv_t<T>>::value>: :Perform(data) :\nnpm ERR!\nnpm ERR!\nherror\nnpm BRR! make: *** [Release/obj. target/binding/src/binding.o] Error 1 # 此处为关键错误信息\nnpm BRR! gYP ERR! build error\nnpm BERR! gyp ERR! stack Brror:、 make failed with exit code: 2\nnpm ERR! gyp ERR! stack\nat ChildProcess. onExit (/var/1ib/ jenkins/ jobs/ tfxing-official-dev/workspace/node_ modules/node-gyp/1ib/build. js:194:23)\nnpm BRR! gyp BRR! stack\nnpm ERR! gyp BRR! stack\nat Process. ChildProcess.. _handle.onexit (node:internal/chi1d_ process:290:12) .\nnpm BRR! gyp ERR! System Linux 3. 10.0-327.36. 3. e17.x86_ _64\nnpm ERR! BYP ERR! command' /var/1ib/jenkins/tools/ jenkins. plugins. nodejs. tools. NodeJSInstallation/nodejs/bin/node”\" /var/lib/ jenkins/ jobs/tfxing-official-dev/workspace/node. _modules/node-8yp/bin/node-gYP\nnpm ERR! gyp ERR! cwd /var/1ib/jenkins/ jobs/tfxing-official-dev/workspace/node_ modules/node-sass\nnpm ERR! 8yp BERR! node -v v16. 13.2\nnpm BRR! gyp BRR! node-gyp -v v7.1.2\nnpm ERR! gyp ERR! not ok\nnpm ERR! Build failed with error code: 1\n```\n遇事不决问Google：谷歌出奇迹！！！在这里：[https://www.codenong.com/cs122036023/](https://www.codenong.com/cs122036023/)\n找到一张`node`与`node-sass`的匹配图：\n![](https://i2.wp.com/img-blog.csdnimg.cn/img_convert/5d3fd2526f22a1c25768eb46a9ccb290.png)\n\n出处: [https://github.com/sass/node-sass](https://github.com/sass/node-sass)\n\n再通过项目中的`packages.json`文件找到`node-sass`的版本是`5.0.0`因此正确的`nodejs`版本是`15`，需要对`nodejs`进行降级。\n降级之后仍然报错！！此时头顶飘过一万条`草泥马、草泥马、草泥马、草泥马`！！！\n```bash\nnpm ER! Package pixman-1 was not found in the pkg-config search path.\nnpm ER! Perhaps you should add the directory containing pixman- 1.pc'\nnpm ERR! to the PKG_CONFIG_ PATH envir onment variable\nnpm ERR! No package'pixman-1’ found # 此为何方妖物呀！！！:( :(\nnpm ERR! gyP: Call to’ pkg-config pixman-1 --libs’ returned exit status 1 while in binding. gyp. while trying to load binding. gyPp\nnpm ERR! gyP ERR! configure error\nnpm ERR! gyP ERR! stack Error:、 gyP failed with exit code: 1\n```\nNo package 'pixman-1' found ？ 什么鬼。。。。\n\n在StackOverflow上有人已经回答了：\n\nhttps://stackoverflow.com/questions/64562563/how-can-i-ovecome-this-error-in-npm-install \n\n跟随跳转：\n\nhttps://github.com/Automattic/node-canvas\n\n在`node-canvas`的GitHub仓库中找到解决方案：\n\n`sudo yum install gcc-c++ cairo-devel pango-devel libjpeg-turbo-devel giflib-devel`\n\n最终编译成功：\n```bash\ngcc version 7.3. 120180303 (Red Hat 7.3. 1-5) (GCC)\n+ npm config set python /usr/1ocal/ python3/bin/ python3\n+ npm config set registry https:/fregistry. npm. taobao. org\n+ npm install\nnpm WARN deprecated @hapi/topo@3. 1. 6: This version has been deprecated and is no longer supported or maintained\nnpm WARN deprecated @hapi/bourne@1.3. 2: This version has been deprecated and is no longer supported or maintained\nnpm WARN deprecated urix@0. 1.0: Please see https: 1{ github. com/ 1ydell/ur ix#deprecated\nnpm WARN deprecated har- -validator@5. 1.5: this library is no longer supported\nnpm WARN deprecated eslint- loader@2.2. 1: This loader has been deprecated. Please use eslint- -webpack- plugin\nnpm WARN deprecated resolve- url@0. 2.1: https: 11 github. com/ 1yde11/ resolve- -url#deprecated\nnpm WARN deprecated chokidar@2. 1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies.\nnpm WARN deprecated chokidar@2. 1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies.\nnpm WARN deprecated querystring@0. 2.0: The querystring API is considered Legacy. new code should use the URL SearchParams API instead.\nnpm WARN deprecated html-webpack- -plugin@3. 2.0: 3.x is no longer supported\nnpm WARN deprecated babel-eslint@10. 1.0: babel-eslint is now @babel/eslint-parser. This package will no longer receive updates.\nnpm WARN deprecated @hapi/ address@2. 1.4: Moved to’npm install @sideway/ address'\nnpm WARN deprecated uuid@3. 4. 0: Please upgrade\nto version 7 or higher.\n01der versions may use Math. random() in certain circumstances\nnpm WARN deprecated request@2. 88. 2: request has been deprecated, see https: //github. com/ request/ request/issues/3142\nnpm WARN deprecated @hapi/hoek@8.5. 1: This version has been deprecated and is no longer supported or maint ained\nnpm WARN deprecated @hapi/joi@15. 1. 1: Switch to’npm install joi'\nnpm WARN deprecated svgo@1. 3.2: This SVGO version is no longer supported. Upgrade to v2. x. x.\nnpm WARN deprecated core- js@2. 6.12: core-js@<3.3 is no longer maintained and not recommended for usage due to the number of issues. Be\nto the actual version of core- js.\nadded 1475 packages in 4m\n87 packages are looking for funding\nrun、npm fund~ for details\n```\n哎呀！妈呀！！这下成功了！！！\n\n### 总结\n\n喜大普奔，总结下经验教训：\n\n`nodejs`相关的项目编译，需要以来的东西大致有：`GCC=5+` 、`Python3.6+` 、（\"`sudo yum install gcc-c++ cairo-devel pango-devel libjpeg-turbo-devel giflib-devel`\" 如果项目没有`node-canvas`依赖应该可以跳过）。编译`nodejs`项目查看日志错误信息，`从下往上`更有助于发现问题的根源。就拿本次经历来说：根源问题还是编译node-sass的时候所依赖的\n```bash\nnpm ERR! gyp info spawn args [ 'BUILDTYPE=Release', '-C', 'build' ]\nnpm ERR! g++: error: unrecognized command line option ‘-std=gnu++14’\n```\n解决了这个报错后面nodejs与node-sass版本匹配度的问题才会浮出水面，到最后node-canvas的系统依赖库。将这些解决了编译才最终完成。 ","slug":"Jenkins-Pipeline-搭建nodejs持续集成项目","published":1,"updated":"2022-01-26T08:08:16.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1d7s753000fkgsch8kad3jt","content":"<h1 id=\"Jenkins-pipeline-gitlab-nodejs-自动发布vue项目\"><a href=\"#Jenkins-pipeline-gitlab-nodejs-自动发布vue项目\" class=\"headerlink\" title=\"Jenkins-pipeline + gitlab + nodejs 自动发布vue项目\"></a>Jenkins-pipeline + gitlab + nodejs 自动发布vue项目</h1><h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><table>\n<thead>\n<tr>\n<th align=\"center\">OS</th>\n<th align=\"center\">SOFTWARE</th>\n<th align=\"center\">NOTE</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CentOS7.4</td>\n<td align=\"center\">Jenkins2.327</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">x</td>\n<td align=\"center\">nodejs16.3.2</td>\n<td align=\"center\">实施版本<code>15.14.0</code></td>\n</tr>\n<tr>\n<td align=\"center\">x</td>\n<td align=\"center\">gitlab13.2.0</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><h4 id=\"1-编写Pipeline脚本\"><a href=\"#1-编写Pipeline脚本\" class=\"headerlink\" title=\"1. 编写Pipeline脚本\"></a>1. 编写<code>Pipeline</code>脚本</h4><p>公司新上项目前端项目采用<code>VUE</code>写成，需要接入<code>Jenkins-Pipeline</code>进行持续集成与发布。由于<code>Jenkins</code>上还没有<code>nodejs</code>环境所以需要配置。不上不知道以上才知道。先写好<code>Pipeline</code>脚本：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tenvironment &#123;</span><br><span class=\"line\">\t\tserviceName = <span class=\"string\">&quot;compoment-official&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\ttools &#123;</span><br><span class=\"line\">        nodejs <span class=\"string\">&quot;nodejs&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Preparation codes&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">\t\t\t\tdir(<span class=\"string\">&quot;$&#123;serviceName&#125;&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tgit branch: <span class=\"string\">&quot;develop&quot;</span>, credentialsId: <span class=\"string\">&#x27;ad3a4389-3f1f-42c8-86fe-aee55f362a8e&#x27;</span>, url: <span class=\"string\">&#x27;git@git.gitrepostory.com:compoment-web/compoment-official.git&#x27;</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Install&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">\t\t\t\tdir(<span class=\"string\">&quot;$&#123;serviceName&#125;&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tsh <span class=\"string\">&#x27;&#x27;</span><span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tsource /opt/rh/devtoolset-7/enable</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tnpm config set python /usr/local/python3/bin/python3</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tnpm config set registry https://registry.npm.taobao.org</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tnpm install</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t&#x27;</span><span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Build&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">\t\t\t\tdir(<span class=\"string\">&quot;$&#123;serviceName&#125;&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tsh <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tnpm run build:test</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t&quot;&quot;&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\tstage(<span class=\"string\">&#x27;Build ansible-playbook&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\tsteps &#123;</span><br><span class=\"line\">\t\t\t\tscript &#123;</span><br><span class=\"line\">\t\t\t\t\tsh <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\trm -rf roles/$&#123;serviceName&#125; # 清理release</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tmv roles/projectname roles/$&#123;serviceName&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tcd $&#123;serviceName&#125;/dist/</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tzip -9rv $&#123;WORKSPACE&#125;/roles/$&#123;serviceName&#125;/files/$&#123;serviceName&#125;.zip *</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tcd $&#123;WORKSPACE&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tsed -i &#x27;s/groupname/$&#123;serviceName&#125;/&#x27; hosts</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tsed -i &#x27;s/\\\\(projectname: \\\\).*/\\\\1$&#123;serviceName&#125;/g&#x27; site.yml</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tsed -i &#x27;s/\\\\(programfile: \\\\).*/\\\\1$&#123;serviceName&#125;.zip/g&#x27; site.yml</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t&quot;&quot;&quot;</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Deploy To Remote Host&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">\t\t\t\tscript &#123;</span><br><span class=\"line\">\t\t\t\t\tsh <span class=\"string\">&quot;ansible-playbook -i hosts site.yml&quot;</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-解决canvas依赖问题\"><a href=\"#2-解决canvas依赖问题\" class=\"headerlink\" title=\"2. 解决canvas依赖问题\"></a>2. 解决<code>canvas</code>依赖问题</h4><p><code>Jenkins</code>控制面板上一跑才发现，错误一大堆！！！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ npm config <span class=\"built_in\">set</span> python /usr/1ocal/python3/bin/python3</span><br><span class=\"line\">+ npm --registry=https://registry. npm. taobao. org install</span><br><span class=\"line\">npm WARN deprecated 9hapi/topo03. 1.6: This version has been deprecated and is no longer supported or maintained</span><br><span class=\"line\">.....</span><br><span class=\"line\">npm WARN deprecated core-js02.6.12: core-js0&lt;3.3 is no longer maintained and not recommended <span class=\"keyword\">for</span> usage due to the number of issues. Because of the V8 engine whims， feature detection <span class=\"keyword\">in</span> old core-js versions could Ci</span><br><span class=\"line\">to the actual version of core-js.</span><br><span class=\"line\">npm ERR! code 1</span><br><span class=\"line\">npm BRR! path /var/1ib/ jenkins/ <span class=\"built_in\">jobs</span>/tfxing-official-dev/workspace/ode_modu1es/canvas</span><br><span class=\"line\">apm ERR! <span class=\"built_in\">command</span> failed  <span class=\"comment\"># 关键错误信息</span></span><br><span class=\"line\">ipm ERR! <span class=\"built_in\">command</span> sh -c node-pre-gyp install -- fallback-to-build</span><br><span class=\"line\">npm BRR! Failed to execute <span class=\"string\">&#x27;/var/1ib/ jenkins/tools/ jenkins. plugins. nodejs. tools. NodeJSInstallation/nodejs/bin/node /var/1ib/ jenkins/tools/ jenkins. plugins. nodejs. tools. NodeJSInstallation/nodejs/1ib/node. modules/npm</span></span><br><span class=\"line\"><span class=\"string\">module=/var/lib/ jenkins/ jobs/tfxing-official-dev/workspace/node_ _modules/canvas/bui1d/Release/canvas. node --module_name=canvas --module_ path=/var/1ib/ jenkins/ jobs/tfxing-official-dev/workspace/node_modules/canvas/bl</span></span><br><span class=\"line\"><span class=\"string\">node_ napi 1abel=node-v93 --python=/usr/1ocal/python3/bin/python3’ (1)</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! node-pre-gyp info it worked if it ends with ok</span></span><br><span class=\"line\"><span class=\"string\">.....</span></span><br></pre></td></tr></table></figure>\n<p>怎么会出现<code>canvas</code>模块无法安装呢？明明项目的<code>package.json</code>中已经把相关依赖都安装上了。重试多吃无果，只能对依赖模块进行单独安装。但仍旧报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ npm config <span class=\"built_in\">set</span> python /usr/1ocal/python3/bin/python3</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry. npm. taobao. org</span><br><span class=\"line\">+ npm install canvas02.9.0 <span class=\"comment\"># 单独安装canvas</span></span><br><span class=\"line\">npm WARN deprecated @hapi/topo03.1.6: This version has been deprecated and is no longer supported or maintained</span><br><span class=\"line\">npm WARN deprecated Chapi/bourne01.3.2: This version has been deprecated and is no longer supported or maintained</span><br><span class=\"line\">npm WARN deprecated urix0.1.0: Please see https://github. com/1yde11/urix<span class=\"comment\">#deprecated</span></span><br><span class=\"line\">npm WARN deprecated har-validator05.1.5: this library is no 1onger supported</span><br><span class=\"line\">npm WARN deprecated eslint-loader02.2. 1: This loader has been deprecated. Please use eslint-webpack-plugin</span><br><span class=\"line\">npm WARN deprecated resolve-ur100.2. 1: https://github. com/lyde1l/resolve-ur1<span class=\"comment\">#deprecated</span></span><br><span class=\"line\">npm WARN deprecated chokidar02.1.8: Chokidar 2 will <span class=\"built_in\">break</span> on node v14+. Upgrade to chokidar 3 with 15x less dependencies.</span><br><span class=\"line\">npm WARN deprecated chokidar02. 1.8: Chokidar 2 will <span class=\"built_in\">break</span> on node v14+. Upgrade to chokidar 3 with 15x less dependencies.</span><br><span class=\"line\">npm WARN deprecated querystring0.2.0: The querystring API is considered Legacy. new code should use the URLSearchParams API instead.</span><br><span class=\"line\">npm WARN deprecated html-webpack-plugin03.2.0: 3.x is no longer supported</span><br><span class=\"line\">npm WARN deprecated babel-eslint010.1.0: babel-eslint is now @babel/eslint-parser. This package will no longer receive updates.</span><br><span class=\"line\">npm WARN deprecated Qhapi/address02. 1.4: Moved to。 npm install esideway/address <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated uuid03.4.0: Please upgrade to version 7 or higher. 01der versions may use Math. random() in certain circumstances, which is known to be problematic. See https://v8. dev/b1og/math-random :</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated request02. 88.2: request has been deprecated， see https://github. com/request/request/issues/3142</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated Qhapi/hoek08.5.1: This version has been deprecated and is no 1onger supported or maintained</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated Qhapi/joi015.1.1: Switch to &#x27;</span>npm install joi<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated svg01.3.2: This SVGO version is no longer supported. Upgrade to v2.x.x.</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated core-js02. 6.12: core-js0&lt;3.3 is no longer maintained and not recommended for usage due to the number of issues. Because of the V8 engine whims，feature detection in old core-js versions could</span></span><br><span class=\"line\"><span class=\"string\">to the actual version of core-js.</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! code 1</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! path /var/1ib/ jenkins/jobs/tfxing-official-dev/workspace/node_modules/node-sass # 此时又报依赖node-sass模块错误</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! command failed</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! command sh -c node scripts/build. js</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-解决node-sass依赖\"><a href=\"#3-解决node-sass依赖\" class=\"headerlink\" title=\"3. 解决node-sass依赖\"></a>3. 解决<code>node-sass</code>依赖</h4><p>没办法继续对<code>node-sass</code>模块进行独立安装，但仍旧报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ npm install --python=/usr/bin/python ，node-sass0^4.0.0<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated Chapi/topo@3. 1.6: This version has been deprecated and is no longer supported or maintained</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated Chapi/bourne01. 3.2: This version has been deprecated and is no longer supported or maintained</span></span><br><span class=\"line\"><span class=\"string\">....</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! gyp info spawn args [ &#x27;</span>BUILDTYPE=Release<span class=\"string\">&#x27;, &#x27;</span> -C*，’huild<span class=\"string\">&#x27; 1</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! g++: error: unrecognized command line option( ‘-std=gnu++14’ # 此处是关键错误信息</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! make: *** [Release/obj. target/libsass/src/libsass/src/ast.o] Error 1</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! gyp ERR! build error</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! gyp ERR! stack Error:</span></span><br><span class=\"line\"><span class=\"string\">make failed with exit code: 2</span></span><br><span class=\"line\"><span class=\"string\">....</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-解决gnu-14依赖\"><a href=\"#4-解决gnu-14依赖\" class=\"headerlink\" title=\"4. 解决gnu++14依赖\"></a>4. 解决<code>gnu++14</code>依赖</h4><p>到此处问题开始明朗起来了！！！再接再厉。<br>从错误信息中可以得知系统上没有<code>gnu++14</code>，原因很简单<code>CentOS7.4</code>默认的<code>GCC4.8</code>不支持，需要升级GCC。在网上找到一篇说得很清楚的问文章:<a href=\"https://www.cnblogs.com/dream397/p/14148796.html\">centos 升级gcc - tycoon3 - 博客园 (cnblogs.com) </a> 根据这篇文章升级到<code>GCC7</code>——查看<code>devtoolset</code>源可得知目前其最低版本已经到7最高到11。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; sudo yum list |grep gcc</span><br><span class=\"line\">...</span><br><span class=\"line\">devtoolset-10-gcc.x86_64                   10.2.1-11.2.el7        centos-sclo-rh</span><br><span class=\"line\">devtoolset-10-libgccjit-devel.x86_64       10.2.1-11.2.el7        centos-sclo-rh</span><br><span class=\"line\">devtoolset-10-libgccjit-docs.x86_64        10.2.1-11.2.el7        centos-sclo-rh</span><br><span class=\"line\">...</span><br><span class=\"line\">devtoolset-11-annobin-plugin-gcc.x86_64    9.82-1.el7.1           centos-sclo-rh</span><br><span class=\"line\">devtoolset-11-libgccjit-devel.x86_64       11.2.1-1.2.el7         centos-sclo-rh</span><br><span class=\"line\">devtoolset-11-libgccjit-docs.x86_64        11.2.1-1.2.el7         centos-sclo-rh</span><br><span class=\"line\">...</span><br><span class=\"line\">devtoolset-7-gcc-gdb-plugin.x86_64         7.3.1-5.16.el7         centos-sclo-rh</span><br><span class=\"line\">devtoolset-7-gcc-gfortran.x86_64           7.3.1-5.16.el7         centos-sclo-rh</span><br><span class=\"line\">devtoolset-7-gcc-plugin-devel.x86_64       7.3.1-5.16.el7         centos-sclo-rh</span><br><span class=\"line\">...</span><br><span class=\"line\">devtoolset-8-gcc.x86_64                    8.3.1-3.2.el7          centos-sclo-rh</span><br><span class=\"line\">devtoolset-8-gcc-c++.x86_64                8.3.1-3.2.el7          centos-sclo-rh</span><br><span class=\"line\">devtoolset-8-libgccjit-docs.x86_64         8.3.1-3.2.el7          centos-sclo-rh</span><br><span class=\"line\">...</span><br><span class=\"line\">devtoolset-9-libgccjit.x86_64              9.3.1-2.2.el7          centos-sclo-rh</span><br><span class=\"line\">devtoolset-9-libgccjit-devel.x86_64        9.3.1-2.2.el7          centos-sclo-rh</span><br><span class=\"line\">devtoolset-9-libgccjit-docs.x86_64         9.3.1-2.2.el7          centos-sclo-rh</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>这里直接安装devtoolset-7</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y devtoolset-7-gcc devtoolset-7-gcc-c++</span><br></pre></td></tr></table></figure>\n\n<p>值得说明的是这些软件包可以同时安装，不会相互覆盖和冲突，也不会覆盖系统的版本。即可以在系统中可同时存在gcc 6, gcc 7, gcc 8等多个版本。</p>\n<p>因为不会覆盖系统默认的gcc，使用这些软件的方法有四种：</p>\n<ol>\n<li>使用绝对路径；</li>\n<li>添加可执行文件路径到PATH环境变量；</li>\n<li>使用官方推荐的加载命令：<code>scl enable devtoolset-x bash</code>, x为要启用的版本;</li>\n<li>执行安装软件自带的脚本： <code>source /opt/rh/devtoolset-x/enable</code>，x为要启用的版本。</li>\n</ol>\n<p>实践推荐使用最后两种方式。例如启用gcc 6: <code>source /opt/rh/devtoolset-6/enable</code>，接着输入gcc -v查看版本已经变成gcc 6.3.1。如果希望长期使用某个高版本，可将此命令写入.bashrc等配置文件。</p>\n<p>以上说明引用自<a href=\"https://www.cnblogs.com/dream397/p/14148796.html\">centos 升级gcc - tycoon3 - 博客园 (cnblogs.com)</a></p>\n<p>经过测试在<code>Jenkins-Pipeline</code>中使用：<code>source /opt/rh/devtoolset-x/enable</code> 才有效</p>\n<h4 id=\"5-解决python3的依赖\"><a href=\"#5-解决python3的依赖\" class=\"headerlink\" title=\"5. 解决python3的依赖\"></a>5. 解决<code>python3</code>的依赖</h4><p>此时还要注意组件编译过程中需要python3.6+的支持:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">npm ERR! gyp ERR! find Python checking Python explicitly <span class=\"built_in\">set</span> from <span class=\"built_in\">command</span> line or npm configuration</span><br><span class=\"line\">npm ERR! gyp ERR! find Python -”- - python=”or<span class=\"string\">&#x27; &#x27;</span>npm config get python” is<span class=\"string\">&quot; /usr/bin/python&#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! 8yp ERR! find Python - executable path is&quot;</span> /usr/bin/python</span><br><span class=\"line\">npm ERR! gyp ERR! find Python - version is <span class=\"string\">&quot;2. 7.5&quot;</span></span><br><span class=\"line\">npm ERR! gyp ERR! find Python - version is 2.7.5 - should be &gt;=3.6.0.</span><br><span class=\"line\">npm ERR! gyp ERR! find Python - THIS VBRSION OF PYTHON IS NOT SUPPORTED</span><br><span class=\"line\">npm ERR! gyp ERR! find Python Python is not <span class=\"built_in\">set</span> from environment variable PYTHON</span><br><span class=\"line\">npm ERR! gyp ERR! find Python checking <span class=\"keyword\">if</span> <span class=\"string\">&quot;python3” can be used</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! gyp ERR! find Python -&quot;</span> python3” is not <span class=\"keyword\">in</span> PATH or produced an error</span><br><span class=\"line\">npm ERR! gyp ERR! find Python checking <span class=\"keyword\">if</span><span class=\"string\">&quot; python&quot;</span> can be used</span><br><span class=\"line\">npm ERR! gyp ERR! find Python - executable path is<span class=\"string\">&quot; /bin/python&#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! gyp ERR! find Python - version is &quot;</span>2. 7.5”</span><br><span class=\"line\">npm ERR! 8yp ERR! find Python - version is 2. 7.5 - should be &gt;=3. 6.0</span><br><span class=\"line\">npm ERR! gyp ERR! find Python - THIS VERSION 0F PYTHON IS NOT SUPPORTED</span><br><span class=\"line\">npm ERR! gyp ERR! find Python</span><br><span class=\"line\">npm ERR! gyp ERR! find Python **********************************************</span><br><span class=\"line\">npm ERR! gyp ERR! find Python You need to install the latest version of Python.</span><br><span class=\"line\">npm BRR! 8Yp ERR! find Python Node-gyp should be able to find and use Python. If not,</span><br><span class=\"line\">npm ERR! gyp ERR! find Python you can try one of the following options:</span><br><span class=\"line\">npm ERR! gyp ERR! find Python - Use the switch --python=<span class=\"string\">&quot; /path/to/pythonexecutable&quot;</span></span><br><span class=\"line\">npm ERR! gyp ERR! find Python</span><br><span class=\"line\">(accepted by both node-gyp and npm)</span><br><span class=\"line\">npm ERR! gyp ERR! find Python - Set the environment variable PYTHON</span><br><span class=\"line\">npm ERR! 8yP ERR! find Python - Set the npm configuration variable python:</span><br><span class=\"line\">npm ERR! gyp ERR! find Python</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> python <span class=\"string\">&quot;/path/to/pythonexecutable&quot;</span></span><br><span class=\"line\">npm ERR! gyp ERR! find Python For more information consult the documentation at:</span><br><span class=\"line\">npm ERR! gyp ERR! find Python https://github. com/nodejs/node-gyp<span class=\"comment\">#installation</span></span><br><span class=\"line\">npm ERR! gyp ERR! find Python *******************************************</span><br><span class=\"line\">nom ERR1 gvp ERR1 find Pvthon</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>因此只需要在执行<code>install</code>之前机上如下代码即可解决<code>python3</code>依赖的问题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ npm config <span class=\"built_in\">set</span> python /usr/1ocal/python3/bin/python3</span><br><span class=\"line\">+ npm --registry-https:/ / registry. npm. taobao. org install</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-解决nodejs与node-sass版本匹配的问题\"><a href=\"#6-解决nodejs与node-sass版本匹配的问题\" class=\"headerlink\" title=\"6. 解决nodejs与node-sass版本匹配的问题\"></a>6. 解决<code>nodejs</code>与<code>node-sass</code>版本匹配的问题</h4><p>另外对nodejs的版本也有要求，不然就会报如下错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm EKK! /var/ 11b/ jenkins/. cache/noae-gyp/ 10.13. 2/1ncluae/ noae/v8-1nternal. h:492:58: note: suggestea alternative:<span class=\"string\">&quot; remove_cv</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! </span></span><br><span class=\"line\"><span class=\"string\">!std::is_ same&lt;Data， std::remove_Cv_t&lt;T&gt;&gt;::value&gt;::Perform(data) :</span></span><br><span class=\"line\"><span class=\"string\">npm BRR</span></span><br><span class=\"line\"><span class=\"string\">npm BRR!</span></span><br><span class=\"line\"><span class=\"string\">remove_ _cv</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! /var/1ib/jenkins/. cache/node-gyp/16. 13. 2/include/node/v8-internal. h:492:38: error: &#x27;remove_ _cv_t’is not a member of &#x27;std&#x27; </span></span><br><span class=\"line\"><span class=\"string\">npm ERR! /var/lib/ jenkins/. cache/node-gyp/16. 13. 2/include/node/v8-interna1. h:492:38: note: suggested alternative:‘ remove_cv&#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm ERR</span></span><br><span class=\"line\"><span class=\"string\">!std::is_same&lt;Data， std::remove_cv_t&lt;T&gt;&gt;::value&gt;::Perform(data) ;</span></span><br><span class=\"line\"><span class=\"string\">npm BRR</span></span><br><span class=\"line\"><span class=\"string\">npm ERR!</span></span><br><span class=\"line\"><span class=\"string\">remove_cv</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! /var/1ib/ jenkins/.cache/node-gyp/16. 13. 2/ include/node/v8-internal. h:492:50: error: template argument 2 is invalid</span></span><br><span class=\"line\"><span class=\"string\">rpm RR!</span></span><br><span class=\"line\"><span class=\"string\">!std::is_ same&lt;Data， std::remove_cv_t&lt;T&gt;&gt;::value&gt;::Perform (data) ;</span></span><br><span class=\"line\"><span class=\"string\">npm BRR!</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! /var/lib/jenkins/. cache/node-gyp/16. 13. 2/include/node/v8-internal. h:492:63: error: ‘::Perform’ has not been declared</span></span><br><span class=\"line\"><span class=\"string\">npm ERR!</span></span><br><span class=\"line\"><span class=\"string\">!std::is_ same&lt;Data，std::remove_cv_t&lt;T&gt;&gt;::value&gt;::Perform(data) :</span></span><br><span class=\"line\"><span class=\"string\">npm BRR!</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! /var/lib/ jenkins/.cache/node-gyp/16.13. 2/include/node/v8-internal. h:492:63: note: suggested alternative: herror &#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm ERR!</span></span><br><span class=\"line\"><span class=\"string\">!std::is_ same&lt;Data， std::remove_Cv_t&lt;T&gt;&gt;::value&gt;: :Perform(data) :</span></span><br><span class=\"line\"><span class=\"string\">npm ERR!</span></span><br><span class=\"line\"><span class=\"string\">npm ERR!</span></span><br><span class=\"line\"><span class=\"string\">herror</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! make: *** [Release/obj. target/binding/src/binding.o] Error 1 # 此处为关键错误信息</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! gYP ERR! build error</span></span><br><span class=\"line\"><span class=\"string\">npm BERR! gyp ERR! stack Brror:、 make failed with exit code: 2</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! gyp ERR! stack</span></span><br><span class=\"line\"><span class=\"string\">at ChildProcess. onExit (/var/1ib/ jenkins/ jobs/ tfxing-official-dev/workspace/node_ modules/node-gyp/1ib/build. js:194:23)</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! gyp BRR! stack</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! gyp BRR! stack</span></span><br><span class=\"line\"><span class=\"string\">at Process. ChildProcess.. _handle.onexit (node:internal/chi1d_ process:290:12) .</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! gyp ERR! System Linux 3. 10.0-327.36. 3. e17.x86_ _64</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! BYP ERR! command&#x27; /var/1ib/jenkins/tools/ jenkins. plugins. nodejs. tools. NodeJSInstallation/nodejs/bin/node”&quot;</span> /var/lib/ jenkins/ <span class=\"built_in\">jobs</span>/tfxing-official-dev/workspace/node. _modules/node-8yp/bin/node-gYP</span><br><span class=\"line\">npm ERR! gyp ERR! cwd /var/1ib/jenkins/ <span class=\"built_in\">jobs</span>/tfxing-official-dev/workspace/node_ modules/node-sass</span><br><span class=\"line\">npm ERR! 8yp BERR! node -v v16. 13.2</span><br><span class=\"line\">npm BRR! gyp BRR! node-gyp -v v7.1.2</span><br><span class=\"line\">npm ERR! gyp ERR! not ok</span><br><span class=\"line\">npm ERR! Build failed with error code: 1</span><br></pre></td></tr></table></figure>\n<p>遇事不决问Google：谷歌出奇迹！！！在这里：<a href=\"https://www.codenong.com/cs122036023/\">https://www.codenong.com/cs122036023/</a><br>找到一张<code>node</code>与<code>node-sass</code>的匹配图：<br><img src=\"https://i2.wp.com/img-blog.csdnimg.cn/img_convert/5d3fd2526f22a1c25768eb46a9ccb290.png\"></p>\n<p>出处: <a href=\"https://github.com/sass/node-sass\">https://github.com/sass/node-sass</a></p>\n<p>再通过项目中的<code>packages.json</code>文件找到<code>node-sass</code>的版本是<code>5.0.0</code>因此正确的<code>nodejs</code>版本是<code>15</code>，需要对<code>nodejs</code>进行降级。<br>降级之后仍然报错！！此时头顶飘过一万条<code>草泥马、草泥马、草泥马、草泥马</code>！！！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ER! Package pixman-1 was not found <span class=\"keyword\">in</span> the pkg-config search path.</span><br><span class=\"line\">npm ER! Perhaps you should add the directory containing pixman- 1.pc<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! to the PKG_CONFIG_ PATH envir onment variable</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! No package&#x27;</span>pixman-1’ found <span class=\"comment\"># 此为何方妖物呀！！！:( :(</span></span><br><span class=\"line\">npm ERR! gyP: Call to’ pkg-config pixman-1 --libs’ returned <span class=\"built_in\">exit</span> status 1 <span class=\"keyword\">while</span> <span class=\"keyword\">in</span> binding. gyp. <span class=\"keyword\">while</span> trying to load binding. gyPp</span><br><span class=\"line\">npm ERR! gyP ERR! configure error</span><br><span class=\"line\">npm ERR! gyP ERR! stack Error:、 gyP failed with <span class=\"built_in\">exit</span> code: 1</span><br></pre></td></tr></table></figure>\n<p>No package ‘pixman-1’ found ？ 什么鬼。。。。</p>\n<p>在StackOverflow上有人已经回答了：</p>\n<p><a href=\"https://stackoverflow.com/questions/64562563/how-can-i-ovecome-this-error-in-npm-install\">https://stackoverflow.com/questions/64562563/how-can-i-ovecome-this-error-in-npm-install</a> </p>\n<p>跟随跳转：</p>\n<p><a href=\"https://github.com/Automattic/node-canvas\">https://github.com/Automattic/node-canvas</a></p>\n<p>在<code>node-canvas</code>的GitHub仓库中找到解决方案：</p>\n<p><code>sudo yum install gcc-c++ cairo-devel pango-devel libjpeg-turbo-devel giflib-devel</code></p>\n<p>最终编译成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc version 7.3. 120180303 (Red Hat 7.3. 1-5) (GCC)</span><br><span class=\"line\">+ npm config <span class=\"built_in\">set</span> python /usr/1ocal/ python3/bin/ python3</span><br><span class=\"line\">+ npm config <span class=\"built_in\">set</span> registry https:/fregistry. npm. taobao. org</span><br><span class=\"line\">+ npm install</span><br><span class=\"line\">npm WARN deprecated @hapi/topo@3. 1. 6: This version has been deprecated and is no longer supported or maintained</span><br><span class=\"line\">npm WARN deprecated @hapi/bourne@1.3. 2: This version has been deprecated and is no longer supported or maintained</span><br><span class=\"line\">npm WARN deprecated urix@0. 1.0: Please see https: 1&#123; github. com/ 1ydell/ur ix<span class=\"comment\">#deprecated</span></span><br><span class=\"line\">npm WARN deprecated har- -validator@5. 1.5: this library is no longer supported</span><br><span class=\"line\">npm WARN deprecated eslint- loader@2.2. 1: This loader has been deprecated. Please use eslint- -webpack- plugin</span><br><span class=\"line\">npm WARN deprecated resolve- url@0. 2.1: https: 11 github. com/ 1yde11/ resolve- -url<span class=\"comment\">#deprecated</span></span><br><span class=\"line\">npm WARN deprecated chokidar@2. 1.8: Chokidar 2 will <span class=\"built_in\">break</span> on node v14+. Upgrade to chokidar 3 with 15x less dependencies.</span><br><span class=\"line\">npm WARN deprecated chokidar@2. 1.8: Chokidar 2 will <span class=\"built_in\">break</span> on node v14+. Upgrade to chokidar 3 with 15x less dependencies.</span><br><span class=\"line\">npm WARN deprecated querystring@0. 2.0: The querystring API is considered Legacy. new code should use the URL SearchParams API instead.</span><br><span class=\"line\">npm WARN deprecated html-webpack- -plugin@3. 2.0: 3.x is no longer supported</span><br><span class=\"line\">npm WARN deprecated babel-eslint@10. 1.0: babel-eslint is now @babel/eslint-parser. This package will no longer receive updates.</span><br><span class=\"line\">npm WARN deprecated @hapi/ address@2. 1.4: Moved to’npm install @sideway/ address<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated uuid@3. 4. 0: Please upgrade</span></span><br><span class=\"line\"><span class=\"string\">to version 7 or higher.</span></span><br><span class=\"line\"><span class=\"string\">01der versions may use Math. random() in certain circumstances</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated request@2. 88. 2: request has been deprecated, see https: //github. com/ request/ request/issues/3142</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated @hapi/hoek@8.5. 1: This version has been deprecated and is no longer supported or maint ained</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated @hapi/joi@15. 1. 1: Switch to’npm install joi&#x27;</span></span><br><span class=\"line\">npm WARN deprecated svgo@1. 3.2: This SVGO version is no longer supported. Upgrade to v2. x. x.</span><br><span class=\"line\">npm WARN deprecated core- js@2. 6.12: core-js@&lt;3.3 is no longer maintained and not recommended <span class=\"keyword\">for</span> usage due to the number of issues. Be</span><br><span class=\"line\">to the actual version of core- js.</span><br><span class=\"line\">added 1475 packages <span class=\"keyword\">in</span> 4m</span><br><span class=\"line\">87 packages are looking <span class=\"keyword\">for</span> funding</span><br><span class=\"line\">run、npm fund~ <span class=\"keyword\">for</span> details</span><br></pre></td></tr></table></figure>\n<p>哎呀！妈呀！！这下成功了！！！</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>喜大普奔，总结下经验教训：</p>\n<p><code>nodejs</code>相关的项目编译，需要以来的东西大致有：<code>GCC=5+</code> 、<code>Python3.6+</code> 、（”<code>sudo yum install gcc-c++ cairo-devel pango-devel libjpeg-turbo-devel giflib-devel</code>“ 如果项目没有<code>node-canvas</code>依赖应该可以跳过）。编译<code>nodejs</code>项目查看日志错误信息，<code>从下往上</code>更有助于发现问题的根源。就拿本次经历来说：根源问题还是编译node-sass的时候所依赖的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ERR! gyp info spawn args [ <span class=\"string\">&#x27;BUILDTYPE=Release&#x27;</span>, <span class=\"string\">&#x27;-C&#x27;</span>, <span class=\"string\">&#x27;build&#x27;</span> ]</span><br><span class=\"line\">npm ERR! g++: error: unrecognized <span class=\"built_in\">command</span> line option ‘-std=gnu++14’</span><br></pre></td></tr></table></figure>\n<p>解决了这个报错后面nodejs与node-sass版本匹配度的问题才会浮出水面，到最后node-canvas的系统依赖库。将这些解决了编译才最终完成。 </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Jenkins-pipeline-gitlab-nodejs-自动发布vue项目\"><a href=\"#Jenkins-pipeline-gitlab-nodejs-自动发布vue项目\" class=\"headerlink\" title=\"Jenkins-pipeline + gitlab + nodejs 自动发布vue项目\"></a>Jenkins-pipeline + gitlab + nodejs 自动发布vue项目</h1><h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><table>\n<thead>\n<tr>\n<th align=\"center\">OS</th>\n<th align=\"center\">SOFTWARE</th>\n<th align=\"center\">NOTE</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CentOS7.4</td>\n<td align=\"center\">Jenkins2.327</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">x</td>\n<td align=\"center\">nodejs16.3.2</td>\n<td align=\"center\">实施版本<code>15.14.0</code></td>\n</tr>\n<tr>\n<td align=\"center\">x</td>\n<td align=\"center\">gitlab13.2.0</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h3><h4 id=\"1-编写Pipeline脚本\"><a href=\"#1-编写Pipeline脚本\" class=\"headerlink\" title=\"1. 编写Pipeline脚本\"></a>1. 编写<code>Pipeline</code>脚本</h4><p>公司新上项目前端项目采用<code>VUE</code>写成，需要接入<code>Jenkins-Pipeline</code>进行持续集成与发布。由于<code>Jenkins</code>上还没有<code>nodejs</code>环境所以需要配置。不上不知道以上才知道。先写好<code>Pipeline</code>脚本：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tenvironment &#123;</span><br><span class=\"line\">\t\tserviceName = <span class=\"string\">&quot;compoment-official&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\ttools &#123;</span><br><span class=\"line\">        nodejs <span class=\"string\">&quot;nodejs&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Preparation codes&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">\t\t\t\tdir(<span class=\"string\">&quot;$&#123;serviceName&#125;&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tgit branch: <span class=\"string\">&quot;develop&quot;</span>, credentialsId: <span class=\"string\">&#x27;ad3a4389-3f1f-42c8-86fe-aee55f362a8e&#x27;</span>, url: <span class=\"string\">&#x27;git@git.gitrepostory.com:compoment-web/compoment-official.git&#x27;</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Install&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">\t\t\t\tdir(<span class=\"string\">&quot;$&#123;serviceName&#125;&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tsh <span class=\"string\">&#x27;&#x27;</span><span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tsource /opt/rh/devtoolset-7/enable</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tnpm config set python /usr/local/python3/bin/python3</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tnpm config set registry https://registry.npm.taobao.org</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tnpm install</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t&#x27;</span><span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Build&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">\t\t\t\tdir(<span class=\"string\">&quot;$&#123;serviceName&#125;&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tsh <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tnpm run build:test</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t&quot;&quot;&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\tstage(<span class=\"string\">&#x27;Build ansible-playbook&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\tsteps &#123;</span><br><span class=\"line\">\t\t\t\tscript &#123;</span><br><span class=\"line\">\t\t\t\t\tsh <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\trm -rf roles/$&#123;serviceName&#125; # 清理release</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tmv roles/projectname roles/$&#123;serviceName&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tcd $&#123;serviceName&#125;/dist/</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tzip -9rv $&#123;WORKSPACE&#125;/roles/$&#123;serviceName&#125;/files/$&#123;serviceName&#125;.zip *</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tcd $&#123;WORKSPACE&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tsed -i &#x27;s/groupname/$&#123;serviceName&#125;/&#x27; hosts</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tsed -i &#x27;s/\\\\(projectname: \\\\).*/\\\\1$&#123;serviceName&#125;/g&#x27; site.yml</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tsed -i &#x27;s/\\\\(programfile: \\\\).*/\\\\1$&#123;serviceName&#125;.zip/g&#x27; site.yml</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t&quot;&quot;&quot;</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Deploy To Remote Host&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">\t\t\t\tscript &#123;</span><br><span class=\"line\">\t\t\t\t\tsh <span class=\"string\">&quot;ansible-playbook -i hosts site.yml&quot;</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-解决canvas依赖问题\"><a href=\"#2-解决canvas依赖问题\" class=\"headerlink\" title=\"2. 解决canvas依赖问题\"></a>2. 解决<code>canvas</code>依赖问题</h4><p><code>Jenkins</code>控制面板上一跑才发现，错误一大堆！！！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ npm config <span class=\"built_in\">set</span> python /usr/1ocal/python3/bin/python3</span><br><span class=\"line\">+ npm --registry=https://registry. npm. taobao. org install</span><br><span class=\"line\">npm WARN deprecated 9hapi/topo03. 1.6: This version has been deprecated and is no longer supported or maintained</span><br><span class=\"line\">.....</span><br><span class=\"line\">npm WARN deprecated core-js02.6.12: core-js0&lt;3.3 is no longer maintained and not recommended <span class=\"keyword\">for</span> usage due to the number of issues. Because of the V8 engine whims， feature detection <span class=\"keyword\">in</span> old core-js versions could Ci</span><br><span class=\"line\">to the actual version of core-js.</span><br><span class=\"line\">npm ERR! code 1</span><br><span class=\"line\">npm BRR! path /var/1ib/ jenkins/ <span class=\"built_in\">jobs</span>/tfxing-official-dev/workspace/ode_modu1es/canvas</span><br><span class=\"line\">apm ERR! <span class=\"built_in\">command</span> failed  <span class=\"comment\"># 关键错误信息</span></span><br><span class=\"line\">ipm ERR! <span class=\"built_in\">command</span> sh -c node-pre-gyp install -- fallback-to-build</span><br><span class=\"line\">npm BRR! Failed to execute <span class=\"string\">&#x27;/var/1ib/ jenkins/tools/ jenkins. plugins. nodejs. tools. NodeJSInstallation/nodejs/bin/node /var/1ib/ jenkins/tools/ jenkins. plugins. nodejs. tools. NodeJSInstallation/nodejs/1ib/node. modules/npm</span></span><br><span class=\"line\"><span class=\"string\">module=/var/lib/ jenkins/ jobs/tfxing-official-dev/workspace/node_ _modules/canvas/bui1d/Release/canvas. node --module_name=canvas --module_ path=/var/1ib/ jenkins/ jobs/tfxing-official-dev/workspace/node_modules/canvas/bl</span></span><br><span class=\"line\"><span class=\"string\">node_ napi 1abel=node-v93 --python=/usr/1ocal/python3/bin/python3’ (1)</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! node-pre-gyp info it worked if it ends with ok</span></span><br><span class=\"line\"><span class=\"string\">.....</span></span><br></pre></td></tr></table></figure>\n<p>怎么会出现<code>canvas</code>模块无法安装呢？明明项目的<code>package.json</code>中已经把相关依赖都安装上了。重试多吃无果，只能对依赖模块进行单独安装。但仍旧报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ npm config <span class=\"built_in\">set</span> python /usr/1ocal/python3/bin/python3</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry. npm. taobao. org</span><br><span class=\"line\">+ npm install canvas02.9.0 <span class=\"comment\"># 单独安装canvas</span></span><br><span class=\"line\">npm WARN deprecated @hapi/topo03.1.6: This version has been deprecated and is no longer supported or maintained</span><br><span class=\"line\">npm WARN deprecated Chapi/bourne01.3.2: This version has been deprecated and is no longer supported or maintained</span><br><span class=\"line\">npm WARN deprecated urix0.1.0: Please see https://github. com/1yde11/urix<span class=\"comment\">#deprecated</span></span><br><span class=\"line\">npm WARN deprecated har-validator05.1.5: this library is no 1onger supported</span><br><span class=\"line\">npm WARN deprecated eslint-loader02.2. 1: This loader has been deprecated. Please use eslint-webpack-plugin</span><br><span class=\"line\">npm WARN deprecated resolve-ur100.2. 1: https://github. com/lyde1l/resolve-ur1<span class=\"comment\">#deprecated</span></span><br><span class=\"line\">npm WARN deprecated chokidar02.1.8: Chokidar 2 will <span class=\"built_in\">break</span> on node v14+. Upgrade to chokidar 3 with 15x less dependencies.</span><br><span class=\"line\">npm WARN deprecated chokidar02. 1.8: Chokidar 2 will <span class=\"built_in\">break</span> on node v14+. Upgrade to chokidar 3 with 15x less dependencies.</span><br><span class=\"line\">npm WARN deprecated querystring0.2.0: The querystring API is considered Legacy. new code should use the URLSearchParams API instead.</span><br><span class=\"line\">npm WARN deprecated html-webpack-plugin03.2.0: 3.x is no longer supported</span><br><span class=\"line\">npm WARN deprecated babel-eslint010.1.0: babel-eslint is now @babel/eslint-parser. This package will no longer receive updates.</span><br><span class=\"line\">npm WARN deprecated Qhapi/address02. 1.4: Moved to。 npm install esideway/address <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated uuid03.4.0: Please upgrade to version 7 or higher. 01der versions may use Math. random() in certain circumstances, which is known to be problematic. See https://v8. dev/b1og/math-random :</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated request02. 88.2: request has been deprecated， see https://github. com/request/request/issues/3142</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated Qhapi/hoek08.5.1: This version has been deprecated and is no 1onger supported or maintained</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated Qhapi/joi015.1.1: Switch to &#x27;</span>npm install joi<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated svg01.3.2: This SVGO version is no longer supported. Upgrade to v2.x.x.</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated core-js02. 6.12: core-js0&lt;3.3 is no longer maintained and not recommended for usage due to the number of issues. Because of the V8 engine whims，feature detection in old core-js versions could</span></span><br><span class=\"line\"><span class=\"string\">to the actual version of core-js.</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! code 1</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! path /var/1ib/ jenkins/jobs/tfxing-official-dev/workspace/node_modules/node-sass # 此时又报依赖node-sass模块错误</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! command failed</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! command sh -c node scripts/build. js</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-解决node-sass依赖\"><a href=\"#3-解决node-sass依赖\" class=\"headerlink\" title=\"3. 解决node-sass依赖\"></a>3. 解决<code>node-sass</code>依赖</h4><p>没办法继续对<code>node-sass</code>模块进行独立安装，但仍旧报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ npm install --python=/usr/bin/python ，node-sass0^4.0.0<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated Chapi/topo@3. 1.6: This version has been deprecated and is no longer supported or maintained</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated Chapi/bourne01. 3.2: This version has been deprecated and is no longer supported or maintained</span></span><br><span class=\"line\"><span class=\"string\">....</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! gyp info spawn args [ &#x27;</span>BUILDTYPE=Release<span class=\"string\">&#x27;, &#x27;</span> -C*，’huild<span class=\"string\">&#x27; 1</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! g++: error: unrecognized command line option( ‘-std=gnu++14’ # 此处是关键错误信息</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! make: *** [Release/obj. target/libsass/src/libsass/src/ast.o] Error 1</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! gyp ERR! build error</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! gyp ERR! stack Error:</span></span><br><span class=\"line\"><span class=\"string\">make failed with exit code: 2</span></span><br><span class=\"line\"><span class=\"string\">....</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-解决gnu-14依赖\"><a href=\"#4-解决gnu-14依赖\" class=\"headerlink\" title=\"4. 解决gnu++14依赖\"></a>4. 解决<code>gnu++14</code>依赖</h4><p>到此处问题开始明朗起来了！！！再接再厉。<br>从错误信息中可以得知系统上没有<code>gnu++14</code>，原因很简单<code>CentOS7.4</code>默认的<code>GCC4.8</code>不支持，需要升级GCC。在网上找到一篇说得很清楚的问文章:<a href=\"https://www.cnblogs.com/dream397/p/14148796.html\">centos 升级gcc - tycoon3 - 博客园 (cnblogs.com) </a> 根据这篇文章升级到<code>GCC7</code>——查看<code>devtoolset</code>源可得知目前其最低版本已经到7最高到11。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; sudo yum list |grep gcc</span><br><span class=\"line\">...</span><br><span class=\"line\">devtoolset-10-gcc.x86_64                   10.2.1-11.2.el7        centos-sclo-rh</span><br><span class=\"line\">devtoolset-10-libgccjit-devel.x86_64       10.2.1-11.2.el7        centos-sclo-rh</span><br><span class=\"line\">devtoolset-10-libgccjit-docs.x86_64        10.2.1-11.2.el7        centos-sclo-rh</span><br><span class=\"line\">...</span><br><span class=\"line\">devtoolset-11-annobin-plugin-gcc.x86_64    9.82-1.el7.1           centos-sclo-rh</span><br><span class=\"line\">devtoolset-11-libgccjit-devel.x86_64       11.2.1-1.2.el7         centos-sclo-rh</span><br><span class=\"line\">devtoolset-11-libgccjit-docs.x86_64        11.2.1-1.2.el7         centos-sclo-rh</span><br><span class=\"line\">...</span><br><span class=\"line\">devtoolset-7-gcc-gdb-plugin.x86_64         7.3.1-5.16.el7         centos-sclo-rh</span><br><span class=\"line\">devtoolset-7-gcc-gfortran.x86_64           7.3.1-5.16.el7         centos-sclo-rh</span><br><span class=\"line\">devtoolset-7-gcc-plugin-devel.x86_64       7.3.1-5.16.el7         centos-sclo-rh</span><br><span class=\"line\">...</span><br><span class=\"line\">devtoolset-8-gcc.x86_64                    8.3.1-3.2.el7          centos-sclo-rh</span><br><span class=\"line\">devtoolset-8-gcc-c++.x86_64                8.3.1-3.2.el7          centos-sclo-rh</span><br><span class=\"line\">devtoolset-8-libgccjit-docs.x86_64         8.3.1-3.2.el7          centos-sclo-rh</span><br><span class=\"line\">...</span><br><span class=\"line\">devtoolset-9-libgccjit.x86_64              9.3.1-2.2.el7          centos-sclo-rh</span><br><span class=\"line\">devtoolset-9-libgccjit-devel.x86_64        9.3.1-2.2.el7          centos-sclo-rh</span><br><span class=\"line\">devtoolset-9-libgccjit-docs.x86_64         9.3.1-2.2.el7          centos-sclo-rh</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>这里直接安装devtoolset-7</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y devtoolset-7-gcc devtoolset-7-gcc-c++</span><br></pre></td></tr></table></figure>\n\n<p>值得说明的是这些软件包可以同时安装，不会相互覆盖和冲突，也不会覆盖系统的版本。即可以在系统中可同时存在gcc 6, gcc 7, gcc 8等多个版本。</p>\n<p>因为不会覆盖系统默认的gcc，使用这些软件的方法有四种：</p>\n<ol>\n<li>使用绝对路径；</li>\n<li>添加可执行文件路径到PATH环境变量；</li>\n<li>使用官方推荐的加载命令：<code>scl enable devtoolset-x bash</code>, x为要启用的版本;</li>\n<li>执行安装软件自带的脚本： <code>source /opt/rh/devtoolset-x/enable</code>，x为要启用的版本。</li>\n</ol>\n<p>实践推荐使用最后两种方式。例如启用gcc 6: <code>source /opt/rh/devtoolset-6/enable</code>，接着输入gcc -v查看版本已经变成gcc 6.3.1。如果希望长期使用某个高版本，可将此命令写入.bashrc等配置文件。</p>\n<p>以上说明引用自<a href=\"https://www.cnblogs.com/dream397/p/14148796.html\">centos 升级gcc - tycoon3 - 博客园 (cnblogs.com)</a></p>\n<p>经过测试在<code>Jenkins-Pipeline</code>中使用：<code>source /opt/rh/devtoolset-x/enable</code> 才有效</p>\n<h4 id=\"5-解决python3的依赖\"><a href=\"#5-解决python3的依赖\" class=\"headerlink\" title=\"5. 解决python3的依赖\"></a>5. 解决<code>python3</code>的依赖</h4><p>此时还要注意组件编译过程中需要python3.6+的支持:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">npm ERR! gyp ERR! find Python checking Python explicitly <span class=\"built_in\">set</span> from <span class=\"built_in\">command</span> line or npm configuration</span><br><span class=\"line\">npm ERR! gyp ERR! find Python -”- - python=”or<span class=\"string\">&#x27; &#x27;</span>npm config get python” is<span class=\"string\">&quot; /usr/bin/python&#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! 8yp ERR! find Python - executable path is&quot;</span> /usr/bin/python</span><br><span class=\"line\">npm ERR! gyp ERR! find Python - version is <span class=\"string\">&quot;2. 7.5&quot;</span></span><br><span class=\"line\">npm ERR! gyp ERR! find Python - version is 2.7.5 - should be &gt;=3.6.0.</span><br><span class=\"line\">npm ERR! gyp ERR! find Python - THIS VBRSION OF PYTHON IS NOT SUPPORTED</span><br><span class=\"line\">npm ERR! gyp ERR! find Python Python is not <span class=\"built_in\">set</span> from environment variable PYTHON</span><br><span class=\"line\">npm ERR! gyp ERR! find Python checking <span class=\"keyword\">if</span> <span class=\"string\">&quot;python3” can be used</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! gyp ERR! find Python -&quot;</span> python3” is not <span class=\"keyword\">in</span> PATH or produced an error</span><br><span class=\"line\">npm ERR! gyp ERR! find Python checking <span class=\"keyword\">if</span><span class=\"string\">&quot; python&quot;</span> can be used</span><br><span class=\"line\">npm ERR! gyp ERR! find Python - executable path is<span class=\"string\">&quot; /bin/python&#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! gyp ERR! find Python - version is &quot;</span>2. 7.5”</span><br><span class=\"line\">npm ERR! 8yp ERR! find Python - version is 2. 7.5 - should be &gt;=3. 6.0</span><br><span class=\"line\">npm ERR! gyp ERR! find Python - THIS VERSION 0F PYTHON IS NOT SUPPORTED</span><br><span class=\"line\">npm ERR! gyp ERR! find Python</span><br><span class=\"line\">npm ERR! gyp ERR! find Python **********************************************</span><br><span class=\"line\">npm ERR! gyp ERR! find Python You need to install the latest version of Python.</span><br><span class=\"line\">npm BRR! 8Yp ERR! find Python Node-gyp should be able to find and use Python. If not,</span><br><span class=\"line\">npm ERR! gyp ERR! find Python you can try one of the following options:</span><br><span class=\"line\">npm ERR! gyp ERR! find Python - Use the switch --python=<span class=\"string\">&quot; /path/to/pythonexecutable&quot;</span></span><br><span class=\"line\">npm ERR! gyp ERR! find Python</span><br><span class=\"line\">(accepted by both node-gyp and npm)</span><br><span class=\"line\">npm ERR! gyp ERR! find Python - Set the environment variable PYTHON</span><br><span class=\"line\">npm ERR! 8yP ERR! find Python - Set the npm configuration variable python:</span><br><span class=\"line\">npm ERR! gyp ERR! find Python</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> python <span class=\"string\">&quot;/path/to/pythonexecutable&quot;</span></span><br><span class=\"line\">npm ERR! gyp ERR! find Python For more information consult the documentation at:</span><br><span class=\"line\">npm ERR! gyp ERR! find Python https://github. com/nodejs/node-gyp<span class=\"comment\">#installation</span></span><br><span class=\"line\">npm ERR! gyp ERR! find Python *******************************************</span><br><span class=\"line\">nom ERR1 gvp ERR1 find Pvthon</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>因此只需要在执行<code>install</code>之前机上如下代码即可解决<code>python3</code>依赖的问题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ npm config <span class=\"built_in\">set</span> python /usr/1ocal/python3/bin/python3</span><br><span class=\"line\">+ npm --registry-https:/ / registry. npm. taobao. org install</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-解决nodejs与node-sass版本匹配的问题\"><a href=\"#6-解决nodejs与node-sass版本匹配的问题\" class=\"headerlink\" title=\"6. 解决nodejs与node-sass版本匹配的问题\"></a>6. 解决<code>nodejs</code>与<code>node-sass</code>版本匹配的问题</h4><p>另外对nodejs的版本也有要求，不然就会报如下错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm EKK! /var/ 11b/ jenkins/. cache/noae-gyp/ 10.13. 2/1ncluae/ noae/v8-1nternal. h:492:58: note: suggestea alternative:<span class=\"string\">&quot; remove_cv</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! </span></span><br><span class=\"line\"><span class=\"string\">!std::is_ same&lt;Data， std::remove_Cv_t&lt;T&gt;&gt;::value&gt;::Perform(data) :</span></span><br><span class=\"line\"><span class=\"string\">npm BRR</span></span><br><span class=\"line\"><span class=\"string\">npm BRR!</span></span><br><span class=\"line\"><span class=\"string\">remove_ _cv</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! /var/1ib/jenkins/. cache/node-gyp/16. 13. 2/include/node/v8-internal. h:492:38: error: &#x27;remove_ _cv_t’is not a member of &#x27;std&#x27; </span></span><br><span class=\"line\"><span class=\"string\">npm ERR! /var/lib/ jenkins/. cache/node-gyp/16. 13. 2/include/node/v8-interna1. h:492:38: note: suggested alternative:‘ remove_cv&#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm ERR</span></span><br><span class=\"line\"><span class=\"string\">!std::is_same&lt;Data， std::remove_cv_t&lt;T&gt;&gt;::value&gt;::Perform(data) ;</span></span><br><span class=\"line\"><span class=\"string\">npm BRR</span></span><br><span class=\"line\"><span class=\"string\">npm ERR!</span></span><br><span class=\"line\"><span class=\"string\">remove_cv</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! /var/1ib/ jenkins/.cache/node-gyp/16. 13. 2/ include/node/v8-internal. h:492:50: error: template argument 2 is invalid</span></span><br><span class=\"line\"><span class=\"string\">rpm RR!</span></span><br><span class=\"line\"><span class=\"string\">!std::is_ same&lt;Data， std::remove_cv_t&lt;T&gt;&gt;::value&gt;::Perform (data) ;</span></span><br><span class=\"line\"><span class=\"string\">npm BRR!</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! /var/lib/jenkins/. cache/node-gyp/16. 13. 2/include/node/v8-internal. h:492:63: error: ‘::Perform’ has not been declared</span></span><br><span class=\"line\"><span class=\"string\">npm ERR!</span></span><br><span class=\"line\"><span class=\"string\">!std::is_ same&lt;Data，std::remove_cv_t&lt;T&gt;&gt;::value&gt;::Perform(data) :</span></span><br><span class=\"line\"><span class=\"string\">npm BRR!</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! /var/lib/ jenkins/.cache/node-gyp/16.13. 2/include/node/v8-internal. h:492:63: note: suggested alternative: herror &#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm ERR!</span></span><br><span class=\"line\"><span class=\"string\">!std::is_ same&lt;Data， std::remove_Cv_t&lt;T&gt;&gt;::value&gt;: :Perform(data) :</span></span><br><span class=\"line\"><span class=\"string\">npm ERR!</span></span><br><span class=\"line\"><span class=\"string\">npm ERR!</span></span><br><span class=\"line\"><span class=\"string\">herror</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! make: *** [Release/obj. target/binding/src/binding.o] Error 1 # 此处为关键错误信息</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! gYP ERR! build error</span></span><br><span class=\"line\"><span class=\"string\">npm BERR! gyp ERR! stack Brror:、 make failed with exit code: 2</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! gyp ERR! stack</span></span><br><span class=\"line\"><span class=\"string\">at ChildProcess. onExit (/var/1ib/ jenkins/ jobs/ tfxing-official-dev/workspace/node_ modules/node-gyp/1ib/build. js:194:23)</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! gyp BRR! stack</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! gyp BRR! stack</span></span><br><span class=\"line\"><span class=\"string\">at Process. ChildProcess.. _handle.onexit (node:internal/chi1d_ process:290:12) .</span></span><br><span class=\"line\"><span class=\"string\">npm BRR! gyp ERR! System Linux 3. 10.0-327.36. 3. e17.x86_ _64</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! BYP ERR! command&#x27; /var/1ib/jenkins/tools/ jenkins. plugins. nodejs. tools. NodeJSInstallation/nodejs/bin/node”&quot;</span> /var/lib/ jenkins/ <span class=\"built_in\">jobs</span>/tfxing-official-dev/workspace/node. _modules/node-8yp/bin/node-gYP</span><br><span class=\"line\">npm ERR! gyp ERR! cwd /var/1ib/jenkins/ <span class=\"built_in\">jobs</span>/tfxing-official-dev/workspace/node_ modules/node-sass</span><br><span class=\"line\">npm ERR! 8yp BERR! node -v v16. 13.2</span><br><span class=\"line\">npm BRR! gyp BRR! node-gyp -v v7.1.2</span><br><span class=\"line\">npm ERR! gyp ERR! not ok</span><br><span class=\"line\">npm ERR! Build failed with error code: 1</span><br></pre></td></tr></table></figure>\n<p>遇事不决问Google：谷歌出奇迹！！！在这里：<a href=\"https://www.codenong.com/cs122036023/\">https://www.codenong.com/cs122036023/</a><br>找到一张<code>node</code>与<code>node-sass</code>的匹配图：<br><img src=\"https://i2.wp.com/img-blog.csdnimg.cn/img_convert/5d3fd2526f22a1c25768eb46a9ccb290.png\"></p>\n<p>出处: <a href=\"https://github.com/sass/node-sass\">https://github.com/sass/node-sass</a></p>\n<p>再通过项目中的<code>packages.json</code>文件找到<code>node-sass</code>的版本是<code>5.0.0</code>因此正确的<code>nodejs</code>版本是<code>15</code>，需要对<code>nodejs</code>进行降级。<br>降级之后仍然报错！！此时头顶飘过一万条<code>草泥马、草泥马、草泥马、草泥马</code>！！！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ER! Package pixman-1 was not found <span class=\"keyword\">in</span> the pkg-config search path.</span><br><span class=\"line\">npm ER! Perhaps you should add the directory containing pixman- 1.pc<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! to the PKG_CONFIG_ PATH envir onment variable</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! No package&#x27;</span>pixman-1’ found <span class=\"comment\"># 此为何方妖物呀！！！:( :(</span></span><br><span class=\"line\">npm ERR! gyP: Call to’ pkg-config pixman-1 --libs’ returned <span class=\"built_in\">exit</span> status 1 <span class=\"keyword\">while</span> <span class=\"keyword\">in</span> binding. gyp. <span class=\"keyword\">while</span> trying to load binding. gyPp</span><br><span class=\"line\">npm ERR! gyP ERR! configure error</span><br><span class=\"line\">npm ERR! gyP ERR! stack Error:、 gyP failed with <span class=\"built_in\">exit</span> code: 1</span><br></pre></td></tr></table></figure>\n<p>No package ‘pixman-1’ found ？ 什么鬼。。。。</p>\n<p>在StackOverflow上有人已经回答了：</p>\n<p><a href=\"https://stackoverflow.com/questions/64562563/how-can-i-ovecome-this-error-in-npm-install\">https://stackoverflow.com/questions/64562563/how-can-i-ovecome-this-error-in-npm-install</a> </p>\n<p>跟随跳转：</p>\n<p><a href=\"https://github.com/Automattic/node-canvas\">https://github.com/Automattic/node-canvas</a></p>\n<p>在<code>node-canvas</code>的GitHub仓库中找到解决方案：</p>\n<p><code>sudo yum install gcc-c++ cairo-devel pango-devel libjpeg-turbo-devel giflib-devel</code></p>\n<p>最终编译成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc version 7.3. 120180303 (Red Hat 7.3. 1-5) (GCC)</span><br><span class=\"line\">+ npm config <span class=\"built_in\">set</span> python /usr/1ocal/ python3/bin/ python3</span><br><span class=\"line\">+ npm config <span class=\"built_in\">set</span> registry https:/fregistry. npm. taobao. org</span><br><span class=\"line\">+ npm install</span><br><span class=\"line\">npm WARN deprecated @hapi/topo@3. 1. 6: This version has been deprecated and is no longer supported or maintained</span><br><span class=\"line\">npm WARN deprecated @hapi/bourne@1.3. 2: This version has been deprecated and is no longer supported or maintained</span><br><span class=\"line\">npm WARN deprecated urix@0. 1.0: Please see https: 1&#123; github. com/ 1ydell/ur ix<span class=\"comment\">#deprecated</span></span><br><span class=\"line\">npm WARN deprecated har- -validator@5. 1.5: this library is no longer supported</span><br><span class=\"line\">npm WARN deprecated eslint- loader@2.2. 1: This loader has been deprecated. Please use eslint- -webpack- plugin</span><br><span class=\"line\">npm WARN deprecated resolve- url@0. 2.1: https: 11 github. com/ 1yde11/ resolve- -url<span class=\"comment\">#deprecated</span></span><br><span class=\"line\">npm WARN deprecated chokidar@2. 1.8: Chokidar 2 will <span class=\"built_in\">break</span> on node v14+. Upgrade to chokidar 3 with 15x less dependencies.</span><br><span class=\"line\">npm WARN deprecated chokidar@2. 1.8: Chokidar 2 will <span class=\"built_in\">break</span> on node v14+. Upgrade to chokidar 3 with 15x less dependencies.</span><br><span class=\"line\">npm WARN deprecated querystring@0. 2.0: The querystring API is considered Legacy. new code should use the URL SearchParams API instead.</span><br><span class=\"line\">npm WARN deprecated html-webpack- -plugin@3. 2.0: 3.x is no longer supported</span><br><span class=\"line\">npm WARN deprecated babel-eslint@10. 1.0: babel-eslint is now @babel/eslint-parser. This package will no longer receive updates.</span><br><span class=\"line\">npm WARN deprecated @hapi/ address@2. 1.4: Moved to’npm install @sideway/ address<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated uuid@3. 4. 0: Please upgrade</span></span><br><span class=\"line\"><span class=\"string\">to version 7 or higher.</span></span><br><span class=\"line\"><span class=\"string\">01der versions may use Math. random() in certain circumstances</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated request@2. 88. 2: request has been deprecated, see https: //github. com/ request/ request/issues/3142</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated @hapi/hoek@8.5. 1: This version has been deprecated and is no longer supported or maint ained</span></span><br><span class=\"line\"><span class=\"string\">npm WARN deprecated @hapi/joi@15. 1. 1: Switch to’npm install joi&#x27;</span></span><br><span class=\"line\">npm WARN deprecated svgo@1. 3.2: This SVGO version is no longer supported. Upgrade to v2. x. x.</span><br><span class=\"line\">npm WARN deprecated core- js@2. 6.12: core-js@&lt;3.3 is no longer maintained and not recommended <span class=\"keyword\">for</span> usage due to the number of issues. Be</span><br><span class=\"line\">to the actual version of core- js.</span><br><span class=\"line\">added 1475 packages <span class=\"keyword\">in</span> 4m</span><br><span class=\"line\">87 packages are looking <span class=\"keyword\">for</span> funding</span><br><span class=\"line\">run、npm fund~ <span class=\"keyword\">for</span> details</span><br></pre></td></tr></table></figure>\n<p>哎呀！妈呀！！这下成功了！！！</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>喜大普奔，总结下经验教训：</p>\n<p><code>nodejs</code>相关的项目编译，需要以来的东西大致有：<code>GCC=5+</code> 、<code>Python3.6+</code> 、（”<code>sudo yum install gcc-c++ cairo-devel pango-devel libjpeg-turbo-devel giflib-devel</code>“ 如果项目没有<code>node-canvas</code>依赖应该可以跳过）。编译<code>nodejs</code>项目查看日志错误信息，<code>从下往上</code>更有助于发现问题的根源。就拿本次经历来说：根源问题还是编译node-sass的时候所依赖的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ERR! gyp info spawn args [ <span class=\"string\">&#x27;BUILDTYPE=Release&#x27;</span>, <span class=\"string\">&#x27;-C&#x27;</span>, <span class=\"string\">&#x27;build&#x27;</span> ]</span><br><span class=\"line\">npm ERR! g++: error: unrecognized <span class=\"built_in\">command</span> line option ‘-std=gnu++14’</span><br></pre></td></tr></table></figure>\n<p>解决了这个报错后面nodejs与node-sass版本匹配度的问题才会浮出水面，到最后node-canvas的系统依赖库。将这些解决了编译才最终完成。 </p>\n"},{"title":"Python-docx-操作word文档实战","date":"2022-02-16T05:48:15.000Z","author":{"name":"ShoJinto","link":"https://shojinto.github.io"},"_content":"\n# Python-docx-操作word文档实战\n\n### 概述\n\n公司同时有一堆word版本的合同需要进行续期签订，里面牵涉到诸如：合同到期时间、收费费率之类关键信息需要进行调整。针对一个合同来说手动修改即可，但是有一堆这样的合同要操作。很容易出错并且出现错误也很难排查，为了降低人力成本这里采用python-docx模块来帮助同事完成一系列的重复工作。同事只需要维护合同模板和相应的excle表格即可。\n\n- excle 存储到期时间，费率收取等信息\n- docx 合同模板\n\n这里采用的是`python-docxtpl`模块，使用方法详见：[https://www.cnblogs.com/feifeifeisir/p/14701066.html](https://www.cnblogs.com/feifeifeisir/p/14701066.html)\n\n### 思路\n\n1. 根据`excel`中的信息编写`.docx`模板文件\n2. 从`excel`中读取关键信息生成更新的内容字典\n3. 利用`python-docxtpl`的`rander`方法对模板中的关键信息进行替换\n4. 保存修改的内容\n\n### 实操\n\n安装处理模块\n```shell\npip install xlrd python-docxtpl\n```\n\nExcel内容形如：\n\n![image-20220216140801797](../images/image-20220216140801797.png)\n\n使用`xlrd`读取excle中的内容，代码形如：\n\n![image-20220216141425332](../images/image-20220216141425332.png)\n\n\n往word文档中插入特殊字符\n处理特殊字符：应用场景详见[https://blog.csdn.net/wi162yyxq/article/details/108431881](https://blog.csdn.net/wi162yyxq/article/details/108431881)\n\n为了实现这个需求我这边可谓是煞费苦心！！！\n最开始找了`python-docx`模块根据[特殊字符处理](https://blog.csdn.net/wi162yyxq/article/details/108431881)了解到`openXML`并找到一些[稍详细描述](https://blog.csdn.net/liuqixuan1994/article/details/104486600/)通过这两篇文章我可以轻松操作word的dom节点，但是还不知道如何将修改后的dom树回写到word的document对象中，因此还是不能完成往word中插入**特殊字符的需求**。好在有强大的Google帮忙，最终找到了一篇关于[往word中添加checkbox的博客](http://jike.in/?qa=1146252/xml-how-can-i-insert-a-checkbox-form-into-a-docx-file-using-python-docx)了解到`python-docx`模块处理word的逻辑，完成了向word中添加特殊字符的需求。后来又找到一篇[日本朋友写的博客](https://www.shibutan-bloomers.com/python_library_python-docx/2247/)图文并茂简直不要太香！！这里引用一下他的图片以期更直观的理解`python-docx`模块:![python-docx中对象的层次结构](https://www.shibutan-bloomers.com/wp-content/uploads/2021/04/f087c8ef7ec4914ce8af442ffa893eb6-1024x677.png)\n\n![python-docx_Part 2_rev0.2中对象的层次结构](https://www.shibutan-bloomers.com/wp-content/uploads/2021/10/70b6f3266827ddafc897ee4276c69bd5.png)\n\n通过以上资料，我这边往`word`中添加特殊字符的代码如下:\n```python\nfrom docx import Document\nfrom docx.oxml.shared import qn, OxmlElement\ndoc = Document('123.docx')\n'''\n根据python-docx的官方文档:https://python-docx.readthedocs.io/en/latest/api/text.html#paragraph-objects\ndoc > paragraph > run\n'''\nfor p in doc.paragraphs:\n    # 定位到需要插入特殊字符的位置\n    if \"□\" in p.text and \"abc\" in p.text:\n        # print(p.runs[0].text)\n        run_id = 0 # 因为paragraph包含多个run，这里的标记是对run进行定位\n        for run in p.runs:\n            if \"□\" in run.text:\n                tag = p._p[run_id] # 找到需要被替换的run\n                # 利用OxmlElement生成一个特殊字符\n                right_mark = OxmlElement('w:sym')\n                right_mark.set(qn('w:font'), 'Wingdings 2')\n                right_mark.set(qn('w:char'), 'F052')\n                # 将特殊字符添加到run中\n                tag.append(right_mark)\n                # 清理到旧的run，因为已经插入了一个新的run所以这里可以直接清理，以达到替换的效果\n                run.clear()\n            run_id += 1\ndoc.save('xxxx.docx')\n```\n由于`DocxTemplate`不能直接读入去内存中的docx文档，因此插入特殊字符和从excel中更新信息两个步骤需要借助中间文档`xxxx.docx`进行，以及最终合同需要分三个情况生成，因此以上方式显得非常臃肿。那么有没有办法让代码更加干练呢？答案是肯定的。通过查阅资料以上步骤其实可以借助python-docxtpl模块的强大能来来实现，其实都是源于jinja2的模板语法。\n\n*以下是所有操作的基础*\n\n```python\n正常的Jinja 2语法只有%的普通标签，而docxtpl的类语法包含%p，%tr，%tc，%r\n\n%p：段落，即docx.text.paragraph.Paragraph对象\n\n%tr：表格中的一行，即docx.table._Row对象\n\n%tc：表格中的一列，即docx.table._Column对象\n\n%r：段落中的一个片段，即docx.text.run.Run对象\n\n通过使用这些标记，python-docx-template将真正的Jinja 2标记放入文档的XML源代码中的正确位置。\n\n另外，需注意，这四种标签，起始标签不能在同一行，必须在不同的行上面。\n\n\n```\n\n\n\n代码实现：\n```python\ndoctmp = DocxTemplate('123.docx')\n\"\"\"\n根据业务情况，word模板中的jinja2语法如下：\n{%r if right_mark %} {{ right_mark }}{%r endif %}{% if not right_mark %} □{% endif %}\n参考：\nhttps://www.cnblogs.com/feifeifeisir/p/14701066.html\nhttps://docxtpl.readthedocs.io/en/latest/#jinja2-like-syntax\n因为合同分为主副两份，根据情况最终生成的合同会有如下情况：\n    1. 主副\n    2. 主\n    3. 副\n因此，合同模板大致结构如：\n    {% if main %} \n    主合同内容\n    {% endif %}\n    {% if secondary %} \n    副合同内容 \n    {% endif %}\n要如何生成合同内容只需要传递相应的内容给合同模板即可\n\"\"\"\ncontext = {\n    \"main\": True,\n    \"secondary\": False,\n    \"right_mark\": '<w:sym w:font=\"Wingdings 2\" w:char=\"F052\"/>', # word中的“对号”，利用 docxtpl中的 {%r 专属标签实现\n}\ndoctmp.render(context)\ndoctmp.save(\"a123.docx\")\nprint('done.')\n\n```\n","source":"_posts/Python-docx-操作word文档实战.md","raw":"---\ntitle: Python-docx-操作word文档实战\ndate: 2022-02-16 13:48:15\ncategories: [办公自动化]\ntags: [运维]\nauthor: \n  name: ShoJinto\n  link: https://shojinto.github.io\n---\n\n# Python-docx-操作word文档实战\n\n### 概述\n\n公司同时有一堆word版本的合同需要进行续期签订，里面牵涉到诸如：合同到期时间、收费费率之类关键信息需要进行调整。针对一个合同来说手动修改即可，但是有一堆这样的合同要操作。很容易出错并且出现错误也很难排查，为了降低人力成本这里采用python-docx模块来帮助同事完成一系列的重复工作。同事只需要维护合同模板和相应的excle表格即可。\n\n- excle 存储到期时间，费率收取等信息\n- docx 合同模板\n\n这里采用的是`python-docxtpl`模块，使用方法详见：[https://www.cnblogs.com/feifeifeisir/p/14701066.html](https://www.cnblogs.com/feifeifeisir/p/14701066.html)\n\n### 思路\n\n1. 根据`excel`中的信息编写`.docx`模板文件\n2. 从`excel`中读取关键信息生成更新的内容字典\n3. 利用`python-docxtpl`的`rander`方法对模板中的关键信息进行替换\n4. 保存修改的内容\n\n### 实操\n\n安装处理模块\n```shell\npip install xlrd python-docxtpl\n```\n\nExcel内容形如：\n\n![image-20220216140801797](../images/image-20220216140801797.png)\n\n使用`xlrd`读取excle中的内容，代码形如：\n\n![image-20220216141425332](../images/image-20220216141425332.png)\n\n\n往word文档中插入特殊字符\n处理特殊字符：应用场景详见[https://blog.csdn.net/wi162yyxq/article/details/108431881](https://blog.csdn.net/wi162yyxq/article/details/108431881)\n\n为了实现这个需求我这边可谓是煞费苦心！！！\n最开始找了`python-docx`模块根据[特殊字符处理](https://blog.csdn.net/wi162yyxq/article/details/108431881)了解到`openXML`并找到一些[稍详细描述](https://blog.csdn.net/liuqixuan1994/article/details/104486600/)通过这两篇文章我可以轻松操作word的dom节点，但是还不知道如何将修改后的dom树回写到word的document对象中，因此还是不能完成往word中插入**特殊字符的需求**。好在有强大的Google帮忙，最终找到了一篇关于[往word中添加checkbox的博客](http://jike.in/?qa=1146252/xml-how-can-i-insert-a-checkbox-form-into-a-docx-file-using-python-docx)了解到`python-docx`模块处理word的逻辑，完成了向word中添加特殊字符的需求。后来又找到一篇[日本朋友写的博客](https://www.shibutan-bloomers.com/python_library_python-docx/2247/)图文并茂简直不要太香！！这里引用一下他的图片以期更直观的理解`python-docx`模块:![python-docx中对象的层次结构](https://www.shibutan-bloomers.com/wp-content/uploads/2021/04/f087c8ef7ec4914ce8af442ffa893eb6-1024x677.png)\n\n![python-docx_Part 2_rev0.2中对象的层次结构](https://www.shibutan-bloomers.com/wp-content/uploads/2021/10/70b6f3266827ddafc897ee4276c69bd5.png)\n\n通过以上资料，我这边往`word`中添加特殊字符的代码如下:\n```python\nfrom docx import Document\nfrom docx.oxml.shared import qn, OxmlElement\ndoc = Document('123.docx')\n'''\n根据python-docx的官方文档:https://python-docx.readthedocs.io/en/latest/api/text.html#paragraph-objects\ndoc > paragraph > run\n'''\nfor p in doc.paragraphs:\n    # 定位到需要插入特殊字符的位置\n    if \"□\" in p.text and \"abc\" in p.text:\n        # print(p.runs[0].text)\n        run_id = 0 # 因为paragraph包含多个run，这里的标记是对run进行定位\n        for run in p.runs:\n            if \"□\" in run.text:\n                tag = p._p[run_id] # 找到需要被替换的run\n                # 利用OxmlElement生成一个特殊字符\n                right_mark = OxmlElement('w:sym')\n                right_mark.set(qn('w:font'), 'Wingdings 2')\n                right_mark.set(qn('w:char'), 'F052')\n                # 将特殊字符添加到run中\n                tag.append(right_mark)\n                # 清理到旧的run，因为已经插入了一个新的run所以这里可以直接清理，以达到替换的效果\n                run.clear()\n            run_id += 1\ndoc.save('xxxx.docx')\n```\n由于`DocxTemplate`不能直接读入去内存中的docx文档，因此插入特殊字符和从excel中更新信息两个步骤需要借助中间文档`xxxx.docx`进行，以及最终合同需要分三个情况生成，因此以上方式显得非常臃肿。那么有没有办法让代码更加干练呢？答案是肯定的。通过查阅资料以上步骤其实可以借助python-docxtpl模块的强大能来来实现，其实都是源于jinja2的模板语法。\n\n*以下是所有操作的基础*\n\n```python\n正常的Jinja 2语法只有%的普通标签，而docxtpl的类语法包含%p，%tr，%tc，%r\n\n%p：段落，即docx.text.paragraph.Paragraph对象\n\n%tr：表格中的一行，即docx.table._Row对象\n\n%tc：表格中的一列，即docx.table._Column对象\n\n%r：段落中的一个片段，即docx.text.run.Run对象\n\n通过使用这些标记，python-docx-template将真正的Jinja 2标记放入文档的XML源代码中的正确位置。\n\n另外，需注意，这四种标签，起始标签不能在同一行，必须在不同的行上面。\n\n\n```\n\n\n\n代码实现：\n```python\ndoctmp = DocxTemplate('123.docx')\n\"\"\"\n根据业务情况，word模板中的jinja2语法如下：\n{%r if right_mark %} {{ right_mark }}{%r endif %}{% if not right_mark %} □{% endif %}\n参考：\nhttps://www.cnblogs.com/feifeifeisir/p/14701066.html\nhttps://docxtpl.readthedocs.io/en/latest/#jinja2-like-syntax\n因为合同分为主副两份，根据情况最终生成的合同会有如下情况：\n    1. 主副\n    2. 主\n    3. 副\n因此，合同模板大致结构如：\n    {% if main %} \n    主合同内容\n    {% endif %}\n    {% if secondary %} \n    副合同内容 \n    {% endif %}\n要如何生成合同内容只需要传递相应的内容给合同模板即可\n\"\"\"\ncontext = {\n    \"main\": True,\n    \"secondary\": False,\n    \"right_mark\": '<w:sym w:font=\"Wingdings 2\" w:char=\"F052\"/>', # word中的“对号”，利用 docxtpl中的 {%r 专属标签实现\n}\ndoctmp.render(context)\ndoctmp.save(\"a123.docx\")\nprint('done.')\n\n```\n","slug":"Python-docx-操作word文档实战","published":1,"updated":"2022-03-30T06:54:44.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1d7s75b000mkgsc6dp4e05z","content":"<h1 id=\"Python-docx-操作word文档实战\"><a href=\"#Python-docx-操作word文档实战\" class=\"headerlink\" title=\"Python-docx-操作word文档实战\"></a>Python-docx-操作word文档实战</h1><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>公司同时有一堆word版本的合同需要进行续期签订，里面牵涉到诸如：合同到期时间、收费费率之类关键信息需要进行调整。针对一个合同来说手动修改即可，但是有一堆这样的合同要操作。很容易出错并且出现错误也很难排查，为了降低人力成本这里采用python-docx模块来帮助同事完成一系列的重复工作。同事只需要维护合同模板和相应的excle表格即可。</p>\n<ul>\n<li>excle 存储到期时间，费率收取等信息</li>\n<li>docx 合同模板</li>\n</ul>\n<p>这里采用的是<code>python-docxtpl</code>模块，使用方法详见：<a href=\"https://www.cnblogs.com/feifeifeisir/p/14701066.html\">https://www.cnblogs.com/feifeifeisir/p/14701066.html</a></p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>根据<code>excel</code>中的信息编写<code>.docx</code>模板文件</li>\n<li>从<code>excel</code>中读取关键信息生成更新的内容字典</li>\n<li>利用<code>python-docxtpl</code>的<code>rander</code>方法对模板中的关键信息进行替换</li>\n<li>保存修改的内容</li>\n</ol>\n<h3 id=\"实操\"><a href=\"#实操\" class=\"headerlink\" title=\"实操\"></a>实操</h3><p>安装处理模块</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install xlrd python-docxtpl</span><br></pre></td></tr></table></figure>\n\n<p>Excel内容形如：</p>\n<p><img src=\"/../images/image-20220216140801797.png\" alt=\"image-20220216140801797\"></p>\n<p>使用<code>xlrd</code>读取excle中的内容，代码形如：</p>\n<p><img src=\"/../images/image-20220216141425332.png\" alt=\"image-20220216141425332\"></p>\n<p>往word文档中插入特殊字符<br>处理特殊字符：应用场景详见<a href=\"https://blog.csdn.net/wi162yyxq/article/details/108431881\">https://blog.csdn.net/wi162yyxq/article/details/108431881</a></p>\n<p>为了实现这个需求我这边可谓是煞费苦心！！！<br>最开始找了<code>python-docx</code>模块根据<a href=\"https://blog.csdn.net/wi162yyxq/article/details/108431881\">特殊字符处理</a>了解到<code>openXML</code>并找到一些<a href=\"https://blog.csdn.net/liuqixuan1994/article/details/104486600/\">稍详细描述</a>通过这两篇文章我可以轻松操作word的dom节点，但是还不知道如何将修改后的dom树回写到word的document对象中，因此还是不能完成往word中插入<strong>特殊字符的需求</strong>。好在有强大的Google帮忙，最终找到了一篇关于<a href=\"http://jike.in/?qa=1146252/xml-how-can-i-insert-a-checkbox-form-into-a-docx-file-using-python-docx\">往word中添加checkbox的博客</a>了解到<code>python-docx</code>模块处理word的逻辑，完成了向word中添加特殊字符的需求。后来又找到一篇<a href=\"https://www.shibutan-bloomers.com/python_library_python-docx/2247/\">日本朋友写的博客</a>图文并茂简直不要太香！！这里引用一下他的图片以期更直观的理解<code>python-docx</code>模块:<img src=\"https://www.shibutan-bloomers.com/wp-content/uploads/2021/04/f087c8ef7ec4914ce8af442ffa893eb6-1024x677.png\" alt=\"python-docx中对象的层次结构\"></p>\n<p><img src=\"https://www.shibutan-bloomers.com/wp-content/uploads/2021/10/70b6f3266827ddafc897ee4276c69bd5.png\" alt=\"python-docx_Part 2_rev0.2中对象的层次结构\"></p>\n<p>通过以上资料，我这边往<code>word</code>中添加特殊字符的代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> docx <span class=\"keyword\">import</span> Document</span><br><span class=\"line\"><span class=\"keyword\">from</span> docx.oxml.shared <span class=\"keyword\">import</span> qn, OxmlElement</span><br><span class=\"line\">doc = Document(<span class=\"string\">&#x27;123.docx&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">根据python-docx的官方文档:https://python-docx.readthedocs.io/en/latest/api/text.html#paragraph-objects</span></span><br><span class=\"line\"><span class=\"string\">doc &gt; paragraph &gt; run</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> doc.paragraphs:</span><br><span class=\"line\">    <span class=\"comment\"># 定位到需要插入特殊字符的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&quot;□&quot;</span> <span class=\"keyword\">in</span> p.text <span class=\"keyword\">and</span> <span class=\"string\">&quot;abc&quot;</span> <span class=\"keyword\">in</span> p.text:</span><br><span class=\"line\">        <span class=\"comment\"># print(p.runs[0].text)</span></span><br><span class=\"line\">        run_id = <span class=\"number\">0</span> <span class=\"comment\"># 因为paragraph包含多个run，这里的标记是对run进行定位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> run <span class=\"keyword\">in</span> p.runs:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&quot;□&quot;</span> <span class=\"keyword\">in</span> run.text:</span><br><span class=\"line\">                tag = p._p[run_id] <span class=\"comment\"># 找到需要被替换的run</span></span><br><span class=\"line\">                <span class=\"comment\"># 利用OxmlElement生成一个特殊字符</span></span><br><span class=\"line\">                right_mark = OxmlElement(<span class=\"string\">&#x27;w:sym&#x27;</span>)</span><br><span class=\"line\">                right_mark.<span class=\"built_in\">set</span>(qn(<span class=\"string\">&#x27;w:font&#x27;</span>), <span class=\"string\">&#x27;Wingdings 2&#x27;</span>)</span><br><span class=\"line\">                right_mark.<span class=\"built_in\">set</span>(qn(<span class=\"string\">&#x27;w:char&#x27;</span>), <span class=\"string\">&#x27;F052&#x27;</span>)</span><br><span class=\"line\">                <span class=\"comment\"># 将特殊字符添加到run中</span></span><br><span class=\"line\">                tag.append(right_mark)</span><br><span class=\"line\">                <span class=\"comment\"># 清理到旧的run，因为已经插入了一个新的run所以这里可以直接清理，以达到替换的效果</span></span><br><span class=\"line\">                run.clear()</span><br><span class=\"line\">            run_id += <span class=\"number\">1</span></span><br><span class=\"line\">doc.save(<span class=\"string\">&#x27;xxxx.docx&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>由于<code>DocxTemplate</code>不能直接读入去内存中的docx文档，因此插入特殊字符和从excel中更新信息两个步骤需要借助中间文档<code>xxxx.docx</code>进行，以及最终合同需要分三个情况生成，因此以上方式显得非常臃肿。那么有没有办法让代码更加干练呢？答案是肯定的。通过查阅资料以上步骤其实可以借助python-docxtpl模块的强大能来来实现，其实都是源于jinja2的模板语法。</p>\n<p><em>以下是所有操作的基础</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正常的Jinja <span class=\"number\">2</span>语法只有%的普通标签，而docxtpl的类语法包含%p，%tr，%tc，%r</span><br><span class=\"line\"></span><br><span class=\"line\">%p：段落，即docx.text.paragraph.Paragraph对象</span><br><span class=\"line\"></span><br><span class=\"line\">%tr：表格中的一行，即docx.table._Row对象</span><br><span class=\"line\"></span><br><span class=\"line\">%tc：表格中的一列，即docx.table._Column对象</span><br><span class=\"line\"></span><br><span class=\"line\">%r：段落中的一个片段，即docx.text.run.Run对象</span><br><span class=\"line\"></span><br><span class=\"line\">通过使用这些标记，python-docx-template将真正的Jinja <span class=\"number\">2</span>标记放入文档的XML源代码中的正确位置。</span><br><span class=\"line\"></span><br><span class=\"line\">另外，需注意，这四种标签，起始标签不能在同一行，必须在不同的行上面。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>代码实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doctmp = DocxTemplate(<span class=\"string\">&#x27;123.docx&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">根据业务情况，word模板中的jinja2语法如下：</span></span><br><span class=\"line\"><span class=\"string\">&#123;%r if right_mark %&#125; &#123;&#123; right_mark &#125;&#125;&#123;%r endif %&#125;&#123;% if not right_mark %&#125; □&#123;% endif %&#125;</span></span><br><span class=\"line\"><span class=\"string\">参考：</span></span><br><span class=\"line\"><span class=\"string\">https://www.cnblogs.com/feifeifeisir/p/14701066.html</span></span><br><span class=\"line\"><span class=\"string\">https://docxtpl.readthedocs.io/en/latest/#jinja2-like-syntax</span></span><br><span class=\"line\"><span class=\"string\">因为合同分为主副两份，根据情况最终生成的合同会有如下情况：</span></span><br><span class=\"line\"><span class=\"string\">    1. 主副</span></span><br><span class=\"line\"><span class=\"string\">    2. 主</span></span><br><span class=\"line\"><span class=\"string\">    3. 副</span></span><br><span class=\"line\"><span class=\"string\">因此，合同模板大致结构如：</span></span><br><span class=\"line\"><span class=\"string\">    &#123;% if main %&#125; </span></span><br><span class=\"line\"><span class=\"string\">    主合同内容</span></span><br><span class=\"line\"><span class=\"string\">    &#123;% endif %&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#123;% if secondary %&#125; </span></span><br><span class=\"line\"><span class=\"string\">    副合同内容 </span></span><br><span class=\"line\"><span class=\"string\">    &#123;% endif %&#125;</span></span><br><span class=\"line\"><span class=\"string\">要如何生成合同内容只需要传递相应的内容给合同模板即可</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">context = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;main&quot;</span>: <span class=\"literal\">True</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;secondary&quot;</span>: <span class=\"literal\">False</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;right_mark&quot;</span>: <span class=\"string\">&#x27;&lt;w:sym w:font=&quot;Wingdings 2&quot; w:char=&quot;F052&quot;/&gt;&#x27;</span>, <span class=\"comment\"># word中的“对号”，利用 docxtpl中的 &#123;%r 专属标签实现</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doctmp.render(context)</span><br><span class=\"line\">doctmp.save(<span class=\"string\">&quot;a123.docx&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;done.&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Python-docx-操作word文档实战\"><a href=\"#Python-docx-操作word文档实战\" class=\"headerlink\" title=\"Python-docx-操作word文档实战\"></a>Python-docx-操作word文档实战</h1><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>公司同时有一堆word版本的合同需要进行续期签订，里面牵涉到诸如：合同到期时间、收费费率之类关键信息需要进行调整。针对一个合同来说手动修改即可，但是有一堆这样的合同要操作。很容易出错并且出现错误也很难排查，为了降低人力成本这里采用python-docx模块来帮助同事完成一系列的重复工作。同事只需要维护合同模板和相应的excle表格即可。</p>\n<ul>\n<li>excle 存储到期时间，费率收取等信息</li>\n<li>docx 合同模板</li>\n</ul>\n<p>这里采用的是<code>python-docxtpl</code>模块，使用方法详见：<a href=\"https://www.cnblogs.com/feifeifeisir/p/14701066.html\">https://www.cnblogs.com/feifeifeisir/p/14701066.html</a></p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>根据<code>excel</code>中的信息编写<code>.docx</code>模板文件</li>\n<li>从<code>excel</code>中读取关键信息生成更新的内容字典</li>\n<li>利用<code>python-docxtpl</code>的<code>rander</code>方法对模板中的关键信息进行替换</li>\n<li>保存修改的内容</li>\n</ol>\n<h3 id=\"实操\"><a href=\"#实操\" class=\"headerlink\" title=\"实操\"></a>实操</h3><p>安装处理模块</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install xlrd python-docxtpl</span><br></pre></td></tr></table></figure>\n\n<p>Excel内容形如：</p>\n<p><img src=\"/../images/image-20220216140801797.png\" alt=\"image-20220216140801797\"></p>\n<p>使用<code>xlrd</code>读取excle中的内容，代码形如：</p>\n<p><img src=\"/../images/image-20220216141425332.png\" alt=\"image-20220216141425332\"></p>\n<p>往word文档中插入特殊字符<br>处理特殊字符：应用场景详见<a href=\"https://blog.csdn.net/wi162yyxq/article/details/108431881\">https://blog.csdn.net/wi162yyxq/article/details/108431881</a></p>\n<p>为了实现这个需求我这边可谓是煞费苦心！！！<br>最开始找了<code>python-docx</code>模块根据<a href=\"https://blog.csdn.net/wi162yyxq/article/details/108431881\">特殊字符处理</a>了解到<code>openXML</code>并找到一些<a href=\"https://blog.csdn.net/liuqixuan1994/article/details/104486600/\">稍详细描述</a>通过这两篇文章我可以轻松操作word的dom节点，但是还不知道如何将修改后的dom树回写到word的document对象中，因此还是不能完成往word中插入<strong>特殊字符的需求</strong>。好在有强大的Google帮忙，最终找到了一篇关于<a href=\"http://jike.in/?qa=1146252/xml-how-can-i-insert-a-checkbox-form-into-a-docx-file-using-python-docx\">往word中添加checkbox的博客</a>了解到<code>python-docx</code>模块处理word的逻辑，完成了向word中添加特殊字符的需求。后来又找到一篇<a href=\"https://www.shibutan-bloomers.com/python_library_python-docx/2247/\">日本朋友写的博客</a>图文并茂简直不要太香！！这里引用一下他的图片以期更直观的理解<code>python-docx</code>模块:<img src=\"https://www.shibutan-bloomers.com/wp-content/uploads/2021/04/f087c8ef7ec4914ce8af442ffa893eb6-1024x677.png\" alt=\"python-docx中对象的层次结构\"></p>\n<p><img src=\"https://www.shibutan-bloomers.com/wp-content/uploads/2021/10/70b6f3266827ddafc897ee4276c69bd5.png\" alt=\"python-docx_Part 2_rev0.2中对象的层次结构\"></p>\n<p>通过以上资料，我这边往<code>word</code>中添加特殊字符的代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> docx <span class=\"keyword\">import</span> Document</span><br><span class=\"line\"><span class=\"keyword\">from</span> docx.oxml.shared <span class=\"keyword\">import</span> qn, OxmlElement</span><br><span class=\"line\">doc = Document(<span class=\"string\">&#x27;123.docx&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">根据python-docx的官方文档:https://python-docx.readthedocs.io/en/latest/api/text.html#paragraph-objects</span></span><br><span class=\"line\"><span class=\"string\">doc &gt; paragraph &gt; run</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> doc.paragraphs:</span><br><span class=\"line\">    <span class=\"comment\"># 定位到需要插入特殊字符的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&quot;□&quot;</span> <span class=\"keyword\">in</span> p.text <span class=\"keyword\">and</span> <span class=\"string\">&quot;abc&quot;</span> <span class=\"keyword\">in</span> p.text:</span><br><span class=\"line\">        <span class=\"comment\"># print(p.runs[0].text)</span></span><br><span class=\"line\">        run_id = <span class=\"number\">0</span> <span class=\"comment\"># 因为paragraph包含多个run，这里的标记是对run进行定位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> run <span class=\"keyword\">in</span> p.runs:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&quot;□&quot;</span> <span class=\"keyword\">in</span> run.text:</span><br><span class=\"line\">                tag = p._p[run_id] <span class=\"comment\"># 找到需要被替换的run</span></span><br><span class=\"line\">                <span class=\"comment\"># 利用OxmlElement生成一个特殊字符</span></span><br><span class=\"line\">                right_mark = OxmlElement(<span class=\"string\">&#x27;w:sym&#x27;</span>)</span><br><span class=\"line\">                right_mark.<span class=\"built_in\">set</span>(qn(<span class=\"string\">&#x27;w:font&#x27;</span>), <span class=\"string\">&#x27;Wingdings 2&#x27;</span>)</span><br><span class=\"line\">                right_mark.<span class=\"built_in\">set</span>(qn(<span class=\"string\">&#x27;w:char&#x27;</span>), <span class=\"string\">&#x27;F052&#x27;</span>)</span><br><span class=\"line\">                <span class=\"comment\"># 将特殊字符添加到run中</span></span><br><span class=\"line\">                tag.append(right_mark)</span><br><span class=\"line\">                <span class=\"comment\"># 清理到旧的run，因为已经插入了一个新的run所以这里可以直接清理，以达到替换的效果</span></span><br><span class=\"line\">                run.clear()</span><br><span class=\"line\">            run_id += <span class=\"number\">1</span></span><br><span class=\"line\">doc.save(<span class=\"string\">&#x27;xxxx.docx&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>由于<code>DocxTemplate</code>不能直接读入去内存中的docx文档，因此插入特殊字符和从excel中更新信息两个步骤需要借助中间文档<code>xxxx.docx</code>进行，以及最终合同需要分三个情况生成，因此以上方式显得非常臃肿。那么有没有办法让代码更加干练呢？答案是肯定的。通过查阅资料以上步骤其实可以借助python-docxtpl模块的强大能来来实现，其实都是源于jinja2的模板语法。</p>\n<p><em>以下是所有操作的基础</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正常的Jinja <span class=\"number\">2</span>语法只有%的普通标签，而docxtpl的类语法包含%p，%tr，%tc，%r</span><br><span class=\"line\"></span><br><span class=\"line\">%p：段落，即docx.text.paragraph.Paragraph对象</span><br><span class=\"line\"></span><br><span class=\"line\">%tr：表格中的一行，即docx.table._Row对象</span><br><span class=\"line\"></span><br><span class=\"line\">%tc：表格中的一列，即docx.table._Column对象</span><br><span class=\"line\"></span><br><span class=\"line\">%r：段落中的一个片段，即docx.text.run.Run对象</span><br><span class=\"line\"></span><br><span class=\"line\">通过使用这些标记，python-docx-template将真正的Jinja <span class=\"number\">2</span>标记放入文档的XML源代码中的正确位置。</span><br><span class=\"line\"></span><br><span class=\"line\">另外，需注意，这四种标签，起始标签不能在同一行，必须在不同的行上面。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>代码实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doctmp = DocxTemplate(<span class=\"string\">&#x27;123.docx&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">根据业务情况，word模板中的jinja2语法如下：</span></span><br><span class=\"line\"><span class=\"string\">&#123;%r if right_mark %&#125; &#123;&#123; right_mark &#125;&#125;&#123;%r endif %&#125;&#123;% if not right_mark %&#125; □&#123;% endif %&#125;</span></span><br><span class=\"line\"><span class=\"string\">参考：</span></span><br><span class=\"line\"><span class=\"string\">https://www.cnblogs.com/feifeifeisir/p/14701066.html</span></span><br><span class=\"line\"><span class=\"string\">https://docxtpl.readthedocs.io/en/latest/#jinja2-like-syntax</span></span><br><span class=\"line\"><span class=\"string\">因为合同分为主副两份，根据情况最终生成的合同会有如下情况：</span></span><br><span class=\"line\"><span class=\"string\">    1. 主副</span></span><br><span class=\"line\"><span class=\"string\">    2. 主</span></span><br><span class=\"line\"><span class=\"string\">    3. 副</span></span><br><span class=\"line\"><span class=\"string\">因此，合同模板大致结构如：</span></span><br><span class=\"line\"><span class=\"string\">    &#123;% if main %&#125; </span></span><br><span class=\"line\"><span class=\"string\">    主合同内容</span></span><br><span class=\"line\"><span class=\"string\">    &#123;% endif %&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#123;% if secondary %&#125; </span></span><br><span class=\"line\"><span class=\"string\">    副合同内容 </span></span><br><span class=\"line\"><span class=\"string\">    &#123;% endif %&#125;</span></span><br><span class=\"line\"><span class=\"string\">要如何生成合同内容只需要传递相应的内容给合同模板即可</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">context = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;main&quot;</span>: <span class=\"literal\">True</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;secondary&quot;</span>: <span class=\"literal\">False</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;right_mark&quot;</span>: <span class=\"string\">&#x27;&lt;w:sym w:font=&quot;Wingdings 2&quot; w:char=&quot;F052&quot;/&gt;&#x27;</span>, <span class=\"comment\"># word中的“对号”，利用 docxtpl中的 &#123;%r 专属标签实现</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doctmp.render(context)</span><br><span class=\"line\">doctmp.save(<span class=\"string\">&quot;a123.docx&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;done.&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"巧用VSCode实现front-matter自动生成","date":"2022-01-25T07:12:02.000Z","author":{"name":"ShoJinto","link":"https://shojinto.github.io"},"_content":"\n# 巧用VSCode实现front-matter自动生成\n\n接`博客搭建备忘`Jekyll将`.md`文件转换成静态页面需要依赖`Front-matter`信息来对整个博客进行组织。至于什么是`Front-matter`可以Google查下，这里就不搬运了。\n\n由于每写片文件就需要编辑`Front-matter`，里面的诸如`date`,`author`,`link`等信息都是固定且需要根据实际情况进行动态更新。有没有方法自动生成这些内容呢？一开始就想到有没有类似于`PyCharm`中新建代码文件的时候自定义的模板文件。于是Google了一番还真有，只是不是`Typora`的而是`VSCode`有个`file template`插件，可以实现。同时这个插件还默认内置了：\n\n- JavaScript\n- HTML\n- CSS\n- PHP\n- Python\n- Ruby\n- XML\n- Vue\n\n虽然没有内置`markdown`的支持，不过没关系它支持自己定义模板，只需要在`~/.vscode/extensions/ralfzhang.filetemplate-2.0.4/asset/templates`目录下新建一个`.tmpl`文件即可。文件内容仿照目录里面其他文件的内容填写即可。我这边`markdown`的模板文件内容如下：\n```yml\n---\ntitle: ${1:title}\ndate: ${date} +0800\ncategories: [${2:categories}]\ntags: [${3:tag}]\nauthor:\n  name: ShoJinto\n  link: https://shojinto.github.io\n---\n$0\n```\n大概解释一下变量的意思：`${1:title}`导入模板之后光标定位的第一个位置，其中`1`表示按`Tab`键的时候光标的切换顺序。\n\n### 设置模板快捷键\n我这里设置成`Alt+M`\n\n### 操作步骤：\n- 在`VSCode`中`Ctrl+N`新建文件\n- `Ctrl+K M`选择文件类型为`markdown`\n- `Alt+M`导入模板信息并修改需要修改的内容\n- 撰写文章内容\n\n### 致谢\n\n感谢插件的制作者：https://github.com/RalfZhang/File-Template\n\n### 今后markdown的编写工具切换到VSCode上咯！！","source":"_posts/巧用VSCode插件实现front-matter自动生成.md","raw":"---\ntitle: 巧用VSCode实现front-matter自动生成\ndate: 2022-01-25 23:12:02 +0800\ncategories: [博客搭建, 技巧]\ntags: [博客]\nauthor: \n  name: ShoJinto \n  link: https://shojinto.github.io\n---\n\n# 巧用VSCode实现front-matter自动生成\n\n接`博客搭建备忘`Jekyll将`.md`文件转换成静态页面需要依赖`Front-matter`信息来对整个博客进行组织。至于什么是`Front-matter`可以Google查下，这里就不搬运了。\n\n由于每写片文件就需要编辑`Front-matter`，里面的诸如`date`,`author`,`link`等信息都是固定且需要根据实际情况进行动态更新。有没有方法自动生成这些内容呢？一开始就想到有没有类似于`PyCharm`中新建代码文件的时候自定义的模板文件。于是Google了一番还真有，只是不是`Typora`的而是`VSCode`有个`file template`插件，可以实现。同时这个插件还默认内置了：\n\n- JavaScript\n- HTML\n- CSS\n- PHP\n- Python\n- Ruby\n- XML\n- Vue\n\n虽然没有内置`markdown`的支持，不过没关系它支持自己定义模板，只需要在`~/.vscode/extensions/ralfzhang.filetemplate-2.0.4/asset/templates`目录下新建一个`.tmpl`文件即可。文件内容仿照目录里面其他文件的内容填写即可。我这边`markdown`的模板文件内容如下：\n```yml\n---\ntitle: ${1:title}\ndate: ${date} +0800\ncategories: [${2:categories}]\ntags: [${3:tag}]\nauthor:\n  name: ShoJinto\n  link: https://shojinto.github.io\n---\n$0\n```\n大概解释一下变量的意思：`${1:title}`导入模板之后光标定位的第一个位置，其中`1`表示按`Tab`键的时候光标的切换顺序。\n\n### 设置模板快捷键\n我这里设置成`Alt+M`\n\n### 操作步骤：\n- 在`VSCode`中`Ctrl+N`新建文件\n- `Ctrl+K M`选择文件类型为`markdown`\n- `Alt+M`导入模板信息并修改需要修改的内容\n- 撰写文章内容\n\n### 致谢\n\n感谢插件的制作者：https://github.com/RalfZhang/File-Template\n\n### 今后markdown的编写工具切换到VSCode上咯！！","slug":"巧用VSCode插件实现front-matter自动生成","published":1,"updated":"2022-01-28T03:09:32.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1d7s75c000nkgschgpuc26u","content":"<h1 id=\"巧用VSCode实现front-matter自动生成\"><a href=\"#巧用VSCode实现front-matter自动生成\" class=\"headerlink\" title=\"巧用VSCode实现front-matter自动生成\"></a>巧用VSCode实现front-matter自动生成</h1><p>接<code>博客搭建备忘</code>Jekyll将<code>.md</code>文件转换成静态页面需要依赖<code>Front-matter</code>信息来对整个博客进行组织。至于什么是<code>Front-matter</code>可以Google查下，这里就不搬运了。</p>\n<p>由于每写片文件就需要编辑<code>Front-matter</code>，里面的诸如<code>date</code>,<code>author</code>,<code>link</code>等信息都是固定且需要根据实际情况进行动态更新。有没有方法自动生成这些内容呢？一开始就想到有没有类似于<code>PyCharm</code>中新建代码文件的时候自定义的模板文件。于是Google了一番还真有，只是不是<code>Typora</code>的而是<code>VSCode</code>有个<code>file template</code>插件，可以实现。同时这个插件还默认内置了：</p>\n<ul>\n<li>JavaScript</li>\n<li>HTML</li>\n<li>CSS</li>\n<li>PHP</li>\n<li>Python</li>\n<li>Ruby</li>\n<li>XML</li>\n<li>Vue</li>\n</ul>\n<p>虽然没有内置<code>markdown</code>的支持，不过没关系它支持自己定义模板，只需要在<code>~/.vscode/extensions/ralfzhang.filetemplate-2.0.4/asset/templates</code>目录下新建一个<code>.tmpl</code>文件即可。文件内容仿照目录里面其他文件的内容填写即可。我这边<code>markdown</code>的模板文件内容如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">$&#123;1:title&#125;</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"string\">$&#123;date&#125;</span> <span class=\"string\">+0800</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> [<span class=\"string\">$</span>&#123;<span class=\"number\">2</span><span class=\"string\">:categories</span>&#125;]</span><br><span class=\"line\"><span class=\"attr\">tags:</span> [<span class=\"string\">$</span>&#123;<span class=\"number\">3</span><span class=\"string\">:tag</span>&#125;]</span><br><span class=\"line\"><span class=\"attr\">author:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ShoJinto</span></span><br><span class=\"line\">  <span class=\"attr\">link:</span> <span class=\"string\">https://shojinto.github.io</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"string\">$0</span></span><br></pre></td></tr></table></figure>\n<p>大概解释一下变量的意思：<code>$&#123;1:title&#125;</code>导入模板之后光标定位的第一个位置，其中<code>1</code>表示按<code>Tab</code>键的时候光标的切换顺序。</p>\n<h3 id=\"设置模板快捷键\"><a href=\"#设置模板快捷键\" class=\"headerlink\" title=\"设置模板快捷键\"></a>设置模板快捷键</h3><p>我这里设置成<code>Alt+M</code></p>\n<h3 id=\"操作步骤：\"><a href=\"#操作步骤：\" class=\"headerlink\" title=\"操作步骤：\"></a>操作步骤：</h3><ul>\n<li>在<code>VSCode</code>中<code>Ctrl+N</code>新建文件</li>\n<li><code>Ctrl+K M</code>选择文件类型为<code>markdown</code></li>\n<li><code>Alt+M</code>导入模板信息并修改需要修改的内容</li>\n<li>撰写文章内容</li>\n</ul>\n<h3 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h3><p>感谢插件的制作者：<a href=\"https://github.com/RalfZhang/File-Template\">https://github.com/RalfZhang/File-Template</a></p>\n<h3 id=\"今后markdown的编写工具切换到VSCode上咯！！\"><a href=\"#今后markdown的编写工具切换到VSCode上咯！！\" class=\"headerlink\" title=\"今后markdown的编写工具切换到VSCode上咯！！\"></a>今后markdown的编写工具切换到VSCode上咯！！</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"巧用VSCode实现front-matter自动生成\"><a href=\"#巧用VSCode实现front-matter自动生成\" class=\"headerlink\" title=\"巧用VSCode实现front-matter自动生成\"></a>巧用VSCode实现front-matter自动生成</h1><p>接<code>博客搭建备忘</code>Jekyll将<code>.md</code>文件转换成静态页面需要依赖<code>Front-matter</code>信息来对整个博客进行组织。至于什么是<code>Front-matter</code>可以Google查下，这里就不搬运了。</p>\n<p>由于每写片文件就需要编辑<code>Front-matter</code>，里面的诸如<code>date</code>,<code>author</code>,<code>link</code>等信息都是固定且需要根据实际情况进行动态更新。有没有方法自动生成这些内容呢？一开始就想到有没有类似于<code>PyCharm</code>中新建代码文件的时候自定义的模板文件。于是Google了一番还真有，只是不是<code>Typora</code>的而是<code>VSCode</code>有个<code>file template</code>插件，可以实现。同时这个插件还默认内置了：</p>\n<ul>\n<li>JavaScript</li>\n<li>HTML</li>\n<li>CSS</li>\n<li>PHP</li>\n<li>Python</li>\n<li>Ruby</li>\n<li>XML</li>\n<li>Vue</li>\n</ul>\n<p>虽然没有内置<code>markdown</code>的支持，不过没关系它支持自己定义模板，只需要在<code>~/.vscode/extensions/ralfzhang.filetemplate-2.0.4/asset/templates</code>目录下新建一个<code>.tmpl</code>文件即可。文件内容仿照目录里面其他文件的内容填写即可。我这边<code>markdown</code>的模板文件内容如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">$&#123;1:title&#125;</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"string\">$&#123;date&#125;</span> <span class=\"string\">+0800</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> [<span class=\"string\">$</span>&#123;<span class=\"number\">2</span><span class=\"string\">:categories</span>&#125;]</span><br><span class=\"line\"><span class=\"attr\">tags:</span> [<span class=\"string\">$</span>&#123;<span class=\"number\">3</span><span class=\"string\">:tag</span>&#125;]</span><br><span class=\"line\"><span class=\"attr\">author:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ShoJinto</span></span><br><span class=\"line\">  <span class=\"attr\">link:</span> <span class=\"string\">https://shojinto.github.io</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"string\">$0</span></span><br></pre></td></tr></table></figure>\n<p>大概解释一下变量的意思：<code>$&#123;1:title&#125;</code>导入模板之后光标定位的第一个位置，其中<code>1</code>表示按<code>Tab</code>键的时候光标的切换顺序。</p>\n<h3 id=\"设置模板快捷键\"><a href=\"#设置模板快捷键\" class=\"headerlink\" title=\"设置模板快捷键\"></a>设置模板快捷键</h3><p>我这里设置成<code>Alt+M</code></p>\n<h3 id=\"操作步骤：\"><a href=\"#操作步骤：\" class=\"headerlink\" title=\"操作步骤：\"></a>操作步骤：</h3><ul>\n<li>在<code>VSCode</code>中<code>Ctrl+N</code>新建文件</li>\n<li><code>Ctrl+K M</code>选择文件类型为<code>markdown</code></li>\n<li><code>Alt+M</code>导入模板信息并修改需要修改的内容</li>\n<li>撰写文章内容</li>\n</ul>\n<h3 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h3><p>感谢插件的制作者：<a href=\"https://github.com/RalfZhang/File-Template\">https://github.com/RalfZhang/File-Template</a></p>\n<h3 id=\"今后markdown的编写工具切换到VSCode上咯！！\"><a href=\"#今后markdown的编写工具切换到VSCode上咯！！\" class=\"headerlink\" title=\"今后markdown的编写工具切换到VSCode上咯！！\"></a>今后markdown的编写工具切换到VSCode上咯！！</h3>"},{"title":"Redis 安装 - 超详细","date":"2022-01-25T01:23:32.000Z","author":{"name":"ShoJinto","link":"https://shojinto.github.io"},"_content":"\n# Redis 安装 - 超详细\n\n作为一名运维软件的安装应该是信手拈来的。尤其是对于redis这样的软件，还是那句话自己忘性太好了。不废话，上操作步骤：\n\n```bash\n> wget https://download.redis.io/releases/redis-4.0.14.tar.gz\n> tar xf redis-4.0.14.tar.gz\n> cd redis-4.0.14\n> make \n```\n\n根据官网描述到这里已经安装结束了，但是对于运维怎么可能有没有启动脚本呢。\n其实redis的源码中已经包含后续步骤的所有脚本，我们只需要执行即可。好！我们开始。。。\n\n```bash\n> ls -l utils/\ntotal 52\n-rw-rw-r-- 1 root root  593 Mar 19  2019 build-static-symbols.tcl\n-rw-rw-r-- 1 root root 1303 Mar 19  2019 cluster_fail_time.tcl\n-rw-rw-r-- 1 root root 1070 Mar 19  2019 corrupt_rdb.c\ndrwxrwxr-x 2 root root   60 Mar 19  2019 create-cluster\n-rwxrwxr-x 1 root root 2137 Mar 19  2019 generate-command-help.rb\ndrwxrwxr-x 3 root root   31 Mar 19  2019 graphs\ndrwxrwxr-x 2 root root   39 Mar 19  2019 hashtable\ndrwxrwxr-x 2 root root   70 Mar 19  2019 hyperloglog\n-rwxrwxr-x 1 root root 9567 Mar 19  2019 install_server.sh\ndrwxrwxr-x 2 root root   63 Mar 19  2019 lru\n-rw-rw-r-- 1 root root 1277 Mar 19  2019 redis-copy.rb\n-rwxrwxr-x 1 root root 1352 Mar 19  2019 redis_init_script\n-rwxrwxr-x 1 root root 1047 Mar 19  2019 redis_init_script.tpl\n-rw-rw-r-- 1 root root 1762 Mar 19  2019 redis-sha1.rb\ndrwxrwxr-x 2 root root  135 Mar 19  2019 releasetools\n-rwxrwxr-x 1 root root 3787 Mar 19  2019 speed-regression.tcl\n-rwxrwxr-x 1 root root  693 Mar 19  2019 whatisdoing.sh\n```\n\n看名字就知道这些脚本是干啥用的，这里安装standard-land模式，直接进行如下操作即可\n\n```bash\n> find src -perm 755 -exec cp \"{}\" /usr/local/sbin/ \\;\n> utils/install_server.sh\nWelcome to the redis service installer\nThis script will help you easily set up a running redis server\n\nPlease select the redis port for this instance: [6379] [Enter键]\nSelecting default: 6379\nPlease select the redis config file name [/etc/redis/6379.conf] [Enter键]\nSelected default - /etc/redis/6379.conf\nPlease select the redis log file name [/var/log/redis_6379.log] [Enter键]\nSelected default - /var/log/redis_6379.log\nPlease select the data directory for this instance [/var/lib/redis/6379] [Enter键]\nSelected default - /var/lib/redis/6379\nPlease select the redis executable path [/usr/local/sbin/redis-server] [Enter键]\nSelected config:\nPort           : 6379\nConfig file    : /etc/redis/6379.conf\nLog file       : /var/log/redis_6379.log\nData dir       : /var/lib/redis/6379\nExecutable     : /usr/local/sbin/redis-server\nCli Executable : /usr/local/sbin/redis-cli\nIs this ok? Then press ENTER to go on or Ctrl-C to abort\n```\n\n支持已经安装完成了，并且redis服务已经启动\n\n```shell\n> /etc/init.d/redis_6379 status\nRedis is running (10511)\n```\n\n到这里就结束了哇。。我不！都2022了怎么可能没有systemd？于是继续。。。\n\n去github上找一份system的模板，最好是redis的systemd模板。根据实际情况进行修改，最终的修改结果如下\n\n```bash\n> cat /usr/lib/systemd/system/redis.service\nDescription=Redis In-Memory Data Store\nAfter=network.target\n\n[Service]\nType=simple\nUser=redis\nGroup=redis\nEnvironment=statedir=/run/redis\nPermissionsStartOnly=true\nPIDFile=/run/redis/redis.pid\nExecStartPre=/bin/touch /var/log/redis.log\nExecStartPre=/bin/chown redis:redis /var/log/redis.log\nExecStartPre=/bin/mkdir -p ${statedir}\nExecStartPre=/bin/chown -R redis:redis ${statedir}\nExecStart=/usr/local/sbin/redis-server /etc/redis/redis.conf\nExecStop=/bin/kill $MAINPID\nExecReload=/bin/kill -USR2 $MAINPID\nRestart=always\nRestartSec=3\n\n[Install]\nWantedBy=multi-user.target\n```\n\n对`install_sercver.sh`脚本生成的配置信息进行修正，使其与`systemd`配置文件中的配置项相符\n\n```bash\n> ln -sf /etc/redis/6379.conf /etc/redis/redis.conf\n> sed -i 's/redis_6379/redis/g' /etc/redis/redis.conf\n> sed -i 's/\\(bind \\)127.0.0.1/\\10.0.0.0/g' /etc/redis/redis.conf\n> sed -i 's#\\(daemonize \\)yes#\\1no#g' /etc/redis/redis.conf\n> sed -n '/redis_6379/p' /etc/redis/redis.conf\npidfile /var/run/redis_6379.pid\nlogfile /var/log/redis_6379.log\n>  sed -i 's/\\(redis\\)_6379/\\1/g' /etc/redis/redis.conf\n> adduser -s /usr/sbin/nologin -d /var/lib/redis -r redis\n> chow redis.redis -R /var/lib/redis \n\n```\n\n重新以systemd启动redis\n\n```bash\n> pkill -9 redis-server\n> systemctl daemon-reload\n> systemctl start redis\n> systemctl status redis\n● redis.service\n   Loaded: loaded (/usr/lib/systemd/system/redis.service; disabled; vendor preset: disabled)\n   Active: active (running) since Wed 2022-01-26 11:14:33 CST; 7s ago\n  Process: 16587 ExecStop=/bin/kill $MAINPID (code=exited, status=0/SUCCESS)\n  Process: 16599 ExecStartPre=/bin/chown -R redis:redis ${statedir} (code=exited, status=0/SUCCESS)\n  Process: 16595 ExecStartPre=/bin/mkdir -p ${statedir} (code=exited, status=0/SUCCESS)\n  Process: 16592 ExecStartPre=/bin/chown redis:redis /var/log/redis.log (code=exited, status=0/SUCCESS)\n  Process: 16590 ExecStartPre=/bin/touch /var/log/redis.log (code=exited, status=0/SUCCESS)\n Main PID: 16602 (redis-server)\n    Tasks: 4\n   Memory: 976.0K\n   CGroup: /system.slice/redis.service\n           └─16602 /usr/local/sbin/redis-server 0.0.0.0:6379\n\nJan 26 11:14:33 apollo-yapi-210 systemd[1]: Starting redis.service...\nJan 26 11:14:33 apollo-yapi-210 systemd[1]: Started redis.service.\n```\n\n至此redis按照完成。","source":"_posts/Redis-安装-超详细.md","raw":"---\ntitle: Redis 安装 - 超详细\ndate: 2022-01-25 17:23:32 +0800\ncategories: [运维, 软件安装]\ntags: [运维]     # TAG names should always be lowercase\nauthor:\n  name: ShoJinto\n  link: https://shojinto.github.io\n---\n\n# Redis 安装 - 超详细\n\n作为一名运维软件的安装应该是信手拈来的。尤其是对于redis这样的软件，还是那句话自己忘性太好了。不废话，上操作步骤：\n\n```bash\n> wget https://download.redis.io/releases/redis-4.0.14.tar.gz\n> tar xf redis-4.0.14.tar.gz\n> cd redis-4.0.14\n> make \n```\n\n根据官网描述到这里已经安装结束了，但是对于运维怎么可能有没有启动脚本呢。\n其实redis的源码中已经包含后续步骤的所有脚本，我们只需要执行即可。好！我们开始。。。\n\n```bash\n> ls -l utils/\ntotal 52\n-rw-rw-r-- 1 root root  593 Mar 19  2019 build-static-symbols.tcl\n-rw-rw-r-- 1 root root 1303 Mar 19  2019 cluster_fail_time.tcl\n-rw-rw-r-- 1 root root 1070 Mar 19  2019 corrupt_rdb.c\ndrwxrwxr-x 2 root root   60 Mar 19  2019 create-cluster\n-rwxrwxr-x 1 root root 2137 Mar 19  2019 generate-command-help.rb\ndrwxrwxr-x 3 root root   31 Mar 19  2019 graphs\ndrwxrwxr-x 2 root root   39 Mar 19  2019 hashtable\ndrwxrwxr-x 2 root root   70 Mar 19  2019 hyperloglog\n-rwxrwxr-x 1 root root 9567 Mar 19  2019 install_server.sh\ndrwxrwxr-x 2 root root   63 Mar 19  2019 lru\n-rw-rw-r-- 1 root root 1277 Mar 19  2019 redis-copy.rb\n-rwxrwxr-x 1 root root 1352 Mar 19  2019 redis_init_script\n-rwxrwxr-x 1 root root 1047 Mar 19  2019 redis_init_script.tpl\n-rw-rw-r-- 1 root root 1762 Mar 19  2019 redis-sha1.rb\ndrwxrwxr-x 2 root root  135 Mar 19  2019 releasetools\n-rwxrwxr-x 1 root root 3787 Mar 19  2019 speed-regression.tcl\n-rwxrwxr-x 1 root root  693 Mar 19  2019 whatisdoing.sh\n```\n\n看名字就知道这些脚本是干啥用的，这里安装standard-land模式，直接进行如下操作即可\n\n```bash\n> find src -perm 755 -exec cp \"{}\" /usr/local/sbin/ \\;\n> utils/install_server.sh\nWelcome to the redis service installer\nThis script will help you easily set up a running redis server\n\nPlease select the redis port for this instance: [6379] [Enter键]\nSelecting default: 6379\nPlease select the redis config file name [/etc/redis/6379.conf] [Enter键]\nSelected default - /etc/redis/6379.conf\nPlease select the redis log file name [/var/log/redis_6379.log] [Enter键]\nSelected default - /var/log/redis_6379.log\nPlease select the data directory for this instance [/var/lib/redis/6379] [Enter键]\nSelected default - /var/lib/redis/6379\nPlease select the redis executable path [/usr/local/sbin/redis-server] [Enter键]\nSelected config:\nPort           : 6379\nConfig file    : /etc/redis/6379.conf\nLog file       : /var/log/redis_6379.log\nData dir       : /var/lib/redis/6379\nExecutable     : /usr/local/sbin/redis-server\nCli Executable : /usr/local/sbin/redis-cli\nIs this ok? Then press ENTER to go on or Ctrl-C to abort\n```\n\n支持已经安装完成了，并且redis服务已经启动\n\n```shell\n> /etc/init.d/redis_6379 status\nRedis is running (10511)\n```\n\n到这里就结束了哇。。我不！都2022了怎么可能没有systemd？于是继续。。。\n\n去github上找一份system的模板，最好是redis的systemd模板。根据实际情况进行修改，最终的修改结果如下\n\n```bash\n> cat /usr/lib/systemd/system/redis.service\nDescription=Redis In-Memory Data Store\nAfter=network.target\n\n[Service]\nType=simple\nUser=redis\nGroup=redis\nEnvironment=statedir=/run/redis\nPermissionsStartOnly=true\nPIDFile=/run/redis/redis.pid\nExecStartPre=/bin/touch /var/log/redis.log\nExecStartPre=/bin/chown redis:redis /var/log/redis.log\nExecStartPre=/bin/mkdir -p ${statedir}\nExecStartPre=/bin/chown -R redis:redis ${statedir}\nExecStart=/usr/local/sbin/redis-server /etc/redis/redis.conf\nExecStop=/bin/kill $MAINPID\nExecReload=/bin/kill -USR2 $MAINPID\nRestart=always\nRestartSec=3\n\n[Install]\nWantedBy=multi-user.target\n```\n\n对`install_sercver.sh`脚本生成的配置信息进行修正，使其与`systemd`配置文件中的配置项相符\n\n```bash\n> ln -sf /etc/redis/6379.conf /etc/redis/redis.conf\n> sed -i 's/redis_6379/redis/g' /etc/redis/redis.conf\n> sed -i 's/\\(bind \\)127.0.0.1/\\10.0.0.0/g' /etc/redis/redis.conf\n> sed -i 's#\\(daemonize \\)yes#\\1no#g' /etc/redis/redis.conf\n> sed -n '/redis_6379/p' /etc/redis/redis.conf\npidfile /var/run/redis_6379.pid\nlogfile /var/log/redis_6379.log\n>  sed -i 's/\\(redis\\)_6379/\\1/g' /etc/redis/redis.conf\n> adduser -s /usr/sbin/nologin -d /var/lib/redis -r redis\n> chow redis.redis -R /var/lib/redis \n\n```\n\n重新以systemd启动redis\n\n```bash\n> pkill -9 redis-server\n> systemctl daemon-reload\n> systemctl start redis\n> systemctl status redis\n● redis.service\n   Loaded: loaded (/usr/lib/systemd/system/redis.service; disabled; vendor preset: disabled)\n   Active: active (running) since Wed 2022-01-26 11:14:33 CST; 7s ago\n  Process: 16587 ExecStop=/bin/kill $MAINPID (code=exited, status=0/SUCCESS)\n  Process: 16599 ExecStartPre=/bin/chown -R redis:redis ${statedir} (code=exited, status=0/SUCCESS)\n  Process: 16595 ExecStartPre=/bin/mkdir -p ${statedir} (code=exited, status=0/SUCCESS)\n  Process: 16592 ExecStartPre=/bin/chown redis:redis /var/log/redis.log (code=exited, status=0/SUCCESS)\n  Process: 16590 ExecStartPre=/bin/touch /var/log/redis.log (code=exited, status=0/SUCCESS)\n Main PID: 16602 (redis-server)\n    Tasks: 4\n   Memory: 976.0K\n   CGroup: /system.slice/redis.service\n           └─16602 /usr/local/sbin/redis-server 0.0.0.0:6379\n\nJan 26 11:14:33 apollo-yapi-210 systemd[1]: Starting redis.service...\nJan 26 11:14:33 apollo-yapi-210 systemd[1]: Started redis.service.\n```\n\n至此redis按照完成。","slug":"Redis-安装-超详细","published":1,"updated":"2022-01-26T03:34:07.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1d7s75f000qkgsc2piz6bf4","content":"<h1 id=\"Redis-安装-超详细\"><a href=\"#Redis-安装-超详细\" class=\"headerlink\" title=\"Redis 安装 - 超详细\"></a>Redis 安装 - 超详细</h1><p>作为一名运维软件的安装应该是信手拈来的。尤其是对于redis这样的软件，还是那句话自己忘性太好了。不废话，上操作步骤：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; wget https://download.redis.io/releases/redis-4.0.14.tar.gz</span><br><span class=\"line\">&gt; tar xf redis-4.0.14.tar.gz</span><br><span class=\"line\">&gt; <span class=\"built_in\">cd</span> redis-4.0.14</span><br><span class=\"line\">&gt; make </span><br></pre></td></tr></table></figure>\n\n<p>根据官网描述到这里已经安装结束了，但是对于运维怎么可能有没有启动脚本呢。<br>其实redis的源码中已经包含后续步骤的所有脚本，我们只需要执行即可。好！我们开始。。。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">ls</span> -l utils/</span><br><span class=\"line\">total 52</span><br><span class=\"line\">-rw-rw-r-- 1 root root  593 Mar 19  2019 build-static-symbols.tcl</span><br><span class=\"line\">-rw-rw-r-- 1 root root 1303 Mar 19  2019 cluster_fail_time.tcl</span><br><span class=\"line\">-rw-rw-r-- 1 root root 1070 Mar 19  2019 corrupt_rdb.c</span><br><span class=\"line\">drwxrwxr-x 2 root root   60 Mar 19  2019 create-cluster</span><br><span class=\"line\">-rwxrwxr-x 1 root root 2137 Mar 19  2019 generate-command-help.rb</span><br><span class=\"line\">drwxrwxr-x 3 root root   31 Mar 19  2019 graphs</span><br><span class=\"line\">drwxrwxr-x 2 root root   39 Mar 19  2019 hashtable</span><br><span class=\"line\">drwxrwxr-x 2 root root   70 Mar 19  2019 hyperloglog</span><br><span class=\"line\">-rwxrwxr-x 1 root root 9567 Mar 19  2019 install_server.sh</span><br><span class=\"line\">drwxrwxr-x 2 root root   63 Mar 19  2019 lru</span><br><span class=\"line\">-rw-rw-r-- 1 root root 1277 Mar 19  2019 redis-copy.rb</span><br><span class=\"line\">-rwxrwxr-x 1 root root 1352 Mar 19  2019 redis_init_script</span><br><span class=\"line\">-rwxrwxr-x 1 root root 1047 Mar 19  2019 redis_init_script.tpl</span><br><span class=\"line\">-rw-rw-r-- 1 root root 1762 Mar 19  2019 redis-sha1.rb</span><br><span class=\"line\">drwxrwxr-x 2 root root  135 Mar 19  2019 releasetools</span><br><span class=\"line\">-rwxrwxr-x 1 root root 3787 Mar 19  2019 speed-regression.tcl</span><br><span class=\"line\">-rwxrwxr-x 1 root root  693 Mar 19  2019 whatisdoing.sh</span><br></pre></td></tr></table></figure>\n\n<p>看名字就知道这些脚本是干啥用的，这里安装standard-land模式，直接进行如下操作即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; find src -perm 755 -<span class=\"built_in\">exec</span> <span class=\"built_in\">cp</span> <span class=\"string\">&quot;&#123;&#125;&quot;</span> /usr/local/sbin/ \\;</span><br><span class=\"line\">&gt; utils/install_server.sh</span><br><span class=\"line\">Welcome to the redis service installer</span><br><span class=\"line\">This script will <span class=\"built_in\">help</span> you easily <span class=\"built_in\">set</span> up a running redis server</span><br><span class=\"line\"></span><br><span class=\"line\">Please select the redis port <span class=\"keyword\">for</span> this instance: [6379] [Enter键]</span><br><span class=\"line\">Selecting default: 6379</span><br><span class=\"line\">Please select the redis config file name [/etc/redis/6379.conf] [Enter键]</span><br><span class=\"line\">Selected default - /etc/redis/6379.conf</span><br><span class=\"line\">Please select the redis <span class=\"built_in\">log</span> file name [/var/log/redis_6379.<span class=\"built_in\">log</span>] [Enter键]</span><br><span class=\"line\">Selected default - /var/log/redis_6379.<span class=\"built_in\">log</span></span><br><span class=\"line\">Please select the data directory <span class=\"keyword\">for</span> this instance [/var/lib/redis/6379] [Enter键]</span><br><span class=\"line\">Selected default - /var/lib/redis/6379</span><br><span class=\"line\">Please select the redis executable path [/usr/local/sbin/redis-server] [Enter键]</span><br><span class=\"line\">Selected config:</span><br><span class=\"line\">Port           : 6379</span><br><span class=\"line\">Config file    : /etc/redis/6379.conf</span><br><span class=\"line\">Log file       : /var/log/redis_6379.<span class=\"built_in\">log</span></span><br><span class=\"line\">Data <span class=\"built_in\">dir</span>       : /var/lib/redis/6379</span><br><span class=\"line\">Executable     : /usr/local/sbin/redis-server</span><br><span class=\"line\">Cli Executable : /usr/local/sbin/redis-cli</span><br><span class=\"line\">Is this ok? Then press ENTER to go on or Ctrl-C to abort</span><br></pre></td></tr></table></figure>\n\n<p>支持已经安装完成了，并且redis服务已经启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">/etc/init.d/redis_6379 status</span></span><br><span class=\"line\">Redis is running (10511)</span><br></pre></td></tr></table></figure>\n\n<p>到这里就结束了哇。。我不！都2022了怎么可能没有systemd？于是继续。。。</p>\n<p>去github上找一份system的模板，最好是redis的systemd模板。根据实际情况进行修改，最终的修改结果如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">cat</span> /usr/lib/systemd/system/redis.service</span><br><span class=\"line\">Description=Redis In-Memory Data Store</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">User=redis</span><br><span class=\"line\">Group=redis</span><br><span class=\"line\">Environment=statedir=/run/redis</span><br><span class=\"line\">PermissionsStartOnly=<span class=\"literal\">true</span></span><br><span class=\"line\">PIDFile=/run/redis/redis.pid</span><br><span class=\"line\">ExecStartPre=/bin/touch /var/log/redis.log</span><br><span class=\"line\">ExecStartPre=/bin/chown redis:redis /var/log/redis.log</span><br><span class=\"line\">ExecStartPre=/bin/mkdir -p <span class=\"variable\">$&#123;statedir&#125;</span></span><br><span class=\"line\">ExecStartPre=/bin/chown -R redis:redis <span class=\"variable\">$&#123;statedir&#125;</span></span><br><span class=\"line\">ExecStart=/usr/local/sbin/redis-server /etc/redis/redis.conf</span><br><span class=\"line\">ExecStop=/bin/kill <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\">ExecReload=/bin/kill -USR2 <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">RestartSec=3</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>对<code>install_sercver.sh</code>脚本生成的配置信息进行修正，使其与<code>systemd</code>配置文件中的配置项相符</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">ln</span> -sf /etc/redis/6379.conf /etc/redis/redis.conf</span><br><span class=\"line\">&gt; sed -i <span class=\"string\">&#x27;s/redis_6379/redis/g&#x27;</span> /etc/redis/redis.conf</span><br><span class=\"line\">&gt; sed -i <span class=\"string\">&#x27;s/\\(bind \\)127.0.0.1/\\10.0.0.0/g&#x27;</span> /etc/redis/redis.conf</span><br><span class=\"line\">&gt; sed -i <span class=\"string\">&#x27;s#\\(daemonize \\)yes#\\1no#g&#x27;</span> /etc/redis/redis.conf</span><br><span class=\"line\">&gt; sed -n <span class=\"string\">&#x27;/redis_6379/p&#x27;</span> /etc/redis/redis.conf</span><br><span class=\"line\">pidfile /var/run/redis_6379.pid</span><br><span class=\"line\">logfile /var/log/redis_6379.<span class=\"built_in\">log</span></span><br><span class=\"line\">&gt;  sed -i <span class=\"string\">&#x27;s/\\(redis\\)_6379/\\1/g&#x27;</span> /etc/redis/redis.conf</span><br><span class=\"line\">&gt; adduser -s /usr/sbin/nologin -d /var/lib/redis -r redis</span><br><span class=\"line\">&gt; chow redis.redis -R /var/lib/redis </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>重新以systemd启动redis</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; pkill -9 redis-server</span><br><span class=\"line\">&gt; systemctl daemon-reload</span><br><span class=\"line\">&gt; systemctl start redis</span><br><span class=\"line\">&gt; systemctl status redis</span><br><span class=\"line\">● redis.service</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/redis.service; disabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Wed 2022-01-26 11:14:33 CST; 7s ago</span><br><span class=\"line\">  Process: 16587 ExecStop=/bin/kill <span class=\"variable\">$MAINPID</span> (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 16599 ExecStartPre=/bin/chown -R redis:redis <span class=\"variable\">$&#123;statedir&#125;</span> (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 16595 ExecStartPre=/bin/mkdir -p <span class=\"variable\">$&#123;statedir&#125;</span> (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 16592 ExecStartPre=/bin/chown redis:redis /var/log/redis.log (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 16590 ExecStartPre=/bin/touch /var/log/redis.log (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 16602 (redis-server)</span><br><span class=\"line\">    Tasks: 4</span><br><span class=\"line\">   Memory: 976.0K</span><br><span class=\"line\">   CGroup: /system.slice/redis.service</span><br><span class=\"line\">           └─16602 /usr/local/sbin/redis-server 0.0.0.0:6379</span><br><span class=\"line\"></span><br><span class=\"line\">Jan 26 11:14:33 apollo-yapi-210 systemd[1]: Starting redis.service...</span><br><span class=\"line\">Jan 26 11:14:33 apollo-yapi-210 systemd[1]: Started redis.service.</span><br></pre></td></tr></table></figure>\n\n<p>至此redis按照完成。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redis-安装-超详细\"><a href=\"#Redis-安装-超详细\" class=\"headerlink\" title=\"Redis 安装 - 超详细\"></a>Redis 安装 - 超详细</h1><p>作为一名运维软件的安装应该是信手拈来的。尤其是对于redis这样的软件，还是那句话自己忘性太好了。不废话，上操作步骤：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; wget https://download.redis.io/releases/redis-4.0.14.tar.gz</span><br><span class=\"line\">&gt; tar xf redis-4.0.14.tar.gz</span><br><span class=\"line\">&gt; <span class=\"built_in\">cd</span> redis-4.0.14</span><br><span class=\"line\">&gt; make </span><br></pre></td></tr></table></figure>\n\n<p>根据官网描述到这里已经安装结束了，但是对于运维怎么可能有没有启动脚本呢。<br>其实redis的源码中已经包含后续步骤的所有脚本，我们只需要执行即可。好！我们开始。。。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">ls</span> -l utils/</span><br><span class=\"line\">total 52</span><br><span class=\"line\">-rw-rw-r-- 1 root root  593 Mar 19  2019 build-static-symbols.tcl</span><br><span class=\"line\">-rw-rw-r-- 1 root root 1303 Mar 19  2019 cluster_fail_time.tcl</span><br><span class=\"line\">-rw-rw-r-- 1 root root 1070 Mar 19  2019 corrupt_rdb.c</span><br><span class=\"line\">drwxrwxr-x 2 root root   60 Mar 19  2019 create-cluster</span><br><span class=\"line\">-rwxrwxr-x 1 root root 2137 Mar 19  2019 generate-command-help.rb</span><br><span class=\"line\">drwxrwxr-x 3 root root   31 Mar 19  2019 graphs</span><br><span class=\"line\">drwxrwxr-x 2 root root   39 Mar 19  2019 hashtable</span><br><span class=\"line\">drwxrwxr-x 2 root root   70 Mar 19  2019 hyperloglog</span><br><span class=\"line\">-rwxrwxr-x 1 root root 9567 Mar 19  2019 install_server.sh</span><br><span class=\"line\">drwxrwxr-x 2 root root   63 Mar 19  2019 lru</span><br><span class=\"line\">-rw-rw-r-- 1 root root 1277 Mar 19  2019 redis-copy.rb</span><br><span class=\"line\">-rwxrwxr-x 1 root root 1352 Mar 19  2019 redis_init_script</span><br><span class=\"line\">-rwxrwxr-x 1 root root 1047 Mar 19  2019 redis_init_script.tpl</span><br><span class=\"line\">-rw-rw-r-- 1 root root 1762 Mar 19  2019 redis-sha1.rb</span><br><span class=\"line\">drwxrwxr-x 2 root root  135 Mar 19  2019 releasetools</span><br><span class=\"line\">-rwxrwxr-x 1 root root 3787 Mar 19  2019 speed-regression.tcl</span><br><span class=\"line\">-rwxrwxr-x 1 root root  693 Mar 19  2019 whatisdoing.sh</span><br></pre></td></tr></table></figure>\n\n<p>看名字就知道这些脚本是干啥用的，这里安装standard-land模式，直接进行如下操作即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; find src -perm 755 -<span class=\"built_in\">exec</span> <span class=\"built_in\">cp</span> <span class=\"string\">&quot;&#123;&#125;&quot;</span> /usr/local/sbin/ \\;</span><br><span class=\"line\">&gt; utils/install_server.sh</span><br><span class=\"line\">Welcome to the redis service installer</span><br><span class=\"line\">This script will <span class=\"built_in\">help</span> you easily <span class=\"built_in\">set</span> up a running redis server</span><br><span class=\"line\"></span><br><span class=\"line\">Please select the redis port <span class=\"keyword\">for</span> this instance: [6379] [Enter键]</span><br><span class=\"line\">Selecting default: 6379</span><br><span class=\"line\">Please select the redis config file name [/etc/redis/6379.conf] [Enter键]</span><br><span class=\"line\">Selected default - /etc/redis/6379.conf</span><br><span class=\"line\">Please select the redis <span class=\"built_in\">log</span> file name [/var/log/redis_6379.<span class=\"built_in\">log</span>] [Enter键]</span><br><span class=\"line\">Selected default - /var/log/redis_6379.<span class=\"built_in\">log</span></span><br><span class=\"line\">Please select the data directory <span class=\"keyword\">for</span> this instance [/var/lib/redis/6379] [Enter键]</span><br><span class=\"line\">Selected default - /var/lib/redis/6379</span><br><span class=\"line\">Please select the redis executable path [/usr/local/sbin/redis-server] [Enter键]</span><br><span class=\"line\">Selected config:</span><br><span class=\"line\">Port           : 6379</span><br><span class=\"line\">Config file    : /etc/redis/6379.conf</span><br><span class=\"line\">Log file       : /var/log/redis_6379.<span class=\"built_in\">log</span></span><br><span class=\"line\">Data <span class=\"built_in\">dir</span>       : /var/lib/redis/6379</span><br><span class=\"line\">Executable     : /usr/local/sbin/redis-server</span><br><span class=\"line\">Cli Executable : /usr/local/sbin/redis-cli</span><br><span class=\"line\">Is this ok? Then press ENTER to go on or Ctrl-C to abort</span><br></pre></td></tr></table></figure>\n\n<p>支持已经安装完成了，并且redis服务已经启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">/etc/init.d/redis_6379 status</span></span><br><span class=\"line\">Redis is running (10511)</span><br></pre></td></tr></table></figure>\n\n<p>到这里就结束了哇。。我不！都2022了怎么可能没有systemd？于是继续。。。</p>\n<p>去github上找一份system的模板，最好是redis的systemd模板。根据实际情况进行修改，最终的修改结果如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">cat</span> /usr/lib/systemd/system/redis.service</span><br><span class=\"line\">Description=Redis In-Memory Data Store</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">User=redis</span><br><span class=\"line\">Group=redis</span><br><span class=\"line\">Environment=statedir=/run/redis</span><br><span class=\"line\">PermissionsStartOnly=<span class=\"literal\">true</span></span><br><span class=\"line\">PIDFile=/run/redis/redis.pid</span><br><span class=\"line\">ExecStartPre=/bin/touch /var/log/redis.log</span><br><span class=\"line\">ExecStartPre=/bin/chown redis:redis /var/log/redis.log</span><br><span class=\"line\">ExecStartPre=/bin/mkdir -p <span class=\"variable\">$&#123;statedir&#125;</span></span><br><span class=\"line\">ExecStartPre=/bin/chown -R redis:redis <span class=\"variable\">$&#123;statedir&#125;</span></span><br><span class=\"line\">ExecStart=/usr/local/sbin/redis-server /etc/redis/redis.conf</span><br><span class=\"line\">ExecStop=/bin/kill <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\">ExecReload=/bin/kill -USR2 <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">RestartSec=3</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>对<code>install_sercver.sh</code>脚本生成的配置信息进行修正，使其与<code>systemd</code>配置文件中的配置项相符</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">ln</span> -sf /etc/redis/6379.conf /etc/redis/redis.conf</span><br><span class=\"line\">&gt; sed -i <span class=\"string\">&#x27;s/redis_6379/redis/g&#x27;</span> /etc/redis/redis.conf</span><br><span class=\"line\">&gt; sed -i <span class=\"string\">&#x27;s/\\(bind \\)127.0.0.1/\\10.0.0.0/g&#x27;</span> /etc/redis/redis.conf</span><br><span class=\"line\">&gt; sed -i <span class=\"string\">&#x27;s#\\(daemonize \\)yes#\\1no#g&#x27;</span> /etc/redis/redis.conf</span><br><span class=\"line\">&gt; sed -n <span class=\"string\">&#x27;/redis_6379/p&#x27;</span> /etc/redis/redis.conf</span><br><span class=\"line\">pidfile /var/run/redis_6379.pid</span><br><span class=\"line\">logfile /var/log/redis_6379.<span class=\"built_in\">log</span></span><br><span class=\"line\">&gt;  sed -i <span class=\"string\">&#x27;s/\\(redis\\)_6379/\\1/g&#x27;</span> /etc/redis/redis.conf</span><br><span class=\"line\">&gt; adduser -s /usr/sbin/nologin -d /var/lib/redis -r redis</span><br><span class=\"line\">&gt; chow redis.redis -R /var/lib/redis </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>重新以systemd启动redis</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; pkill -9 redis-server</span><br><span class=\"line\">&gt; systemctl daemon-reload</span><br><span class=\"line\">&gt; systemctl start redis</span><br><span class=\"line\">&gt; systemctl status redis</span><br><span class=\"line\">● redis.service</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/redis.service; disabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Wed 2022-01-26 11:14:33 CST; 7s ago</span><br><span class=\"line\">  Process: 16587 ExecStop=/bin/kill <span class=\"variable\">$MAINPID</span> (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 16599 ExecStartPre=/bin/chown -R redis:redis <span class=\"variable\">$&#123;statedir&#125;</span> (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 16595 ExecStartPre=/bin/mkdir -p <span class=\"variable\">$&#123;statedir&#125;</span> (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 16592 ExecStartPre=/bin/chown redis:redis /var/log/redis.log (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 16590 ExecStartPre=/bin/touch /var/log/redis.log (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 16602 (redis-server)</span><br><span class=\"line\">    Tasks: 4</span><br><span class=\"line\">   Memory: 976.0K</span><br><span class=\"line\">   CGroup: /system.slice/redis.service</span><br><span class=\"line\">           └─16602 /usr/local/sbin/redis-server 0.0.0.0:6379</span><br><span class=\"line\"></span><br><span class=\"line\">Jan 26 11:14:33 apollo-yapi-210 systemd[1]: Starting redis.service...</span><br><span class=\"line\">Jan 26 11:14:33 apollo-yapi-210 systemd[1]: Started redis.service.</span><br></pre></td></tr></table></figure>\n\n<p>至此redis按照完成。</p>\n"},{"title":"RDM 从源码编译","date":"2022-01-27T07:08:16.000Z","author":{"name":"ShoJinto","link":"https://shojinto.github.io"},"_content":"\n# RDM 从源码编译\n\nRedis Desktop Manager -> **RDM** 一个超赞的`redis`开源客户端管理工具。感谢项目的作者[`@uglide`](https://github.com/uglide/RedisDesktopManager)，一个软件从源码到编译也不是一件容易的事情。所以有条件且嫌麻烦的朋友可以直接去官网购买[https://resp.app/pricing](https://resp.app/pricing)。\n\n### 环境准备\n\n根据官文[Build from source](http://docs.redisdesktop.com/en/latest/install/#build-from-source)准备所需依赖\n\n- [Visual Studio 2019 Community Edition](https://visualstudio.microsoft.com/vs/)\n- [Qt 5.15.x](https://www.qt.io/download)\n- [Python3.9+](https://www.python.org)\n- [Git](https://git-scm.com/downloads)\n- Windows 10 x64\n- [cmake](https://cmake.org/download/) 、[make](http://www.equation.com/servlet/equation.cmd?fa=make) 、[nuget](https://www.nuget.org/downloads)\n\n接下来对上面的提到的依赖进行逐一破解。\n\n本着先易后难的原则`VS2019`、`git`、`python39`这三个软件都是常用软件不做过多介绍，需要说明的安装`VS2019`的时候必须现在`C++`载荷因为**RDM**使用`C++`开发的。\n\n分别去[`https://cmake.org/download/`](https://cmake.org/download/)、[`http://www.equation.com/servlet/equation.cmd?fa=make`](http://www.equation.com/servlet/equation.cmd?fa=make)、[`https://www.nuget.org/downloads`](https://www.nuget.org/downloads)这三个地方把`cmake`、`make`和`nuget`下载到本地并添加到系统环境变量中,追加到`%path%`上，在找make for windows 命令的时候发现这篇关于[windows上make和cmake命令的集成](https://zhuanlan.zhihu.com/p/149305469)说的比较好。\n\n![image-20220127234804448](../images/image-20220127234804448.png)\n\n接下来就是按照官网[在windows上编译](http://docs.redisdesktop.com/en/latest/install/#build-from-source)小节`step by step`。在这期间自己犯了一个非常严重且愚蠢的错误，在上面起码耗费了4个小时甚至还跑到RDM的GitHub上提交[issue](https://github.com/uglide/RedisDesktopManager/issues/5184)。究竟怎么回事儿请继续往下看！！！\n\n### 编译lz4\n\n根据官网说明进行操作，需要注意的时候Windows上执行make命令会报错：\n\n```shell\n/WorkSpace/rdm/3rdparty/lz4/build/cmake $ make\nmake: *** No targets specified and no makefile found.  Stop.\n```\n\n解决办法是：直接用VS2019进行编译。\n\n编译过*程极度舒适*进入`lz4/build/cmake`目录双击`LZ4.sln`解决方案文件默认用VS2019打开。按照如下截图操作![image-20220128005609606](../images/image-20220128005609606.png)\n\n等待编译完成即可。\n\n### 使用Qt Creator 构建rdm项目\n\n由于Qt从5.15开始不提供离线安装包，在GFW内无疑是阻碍了丝滑度。所以我这边一股脑儿的想要找到5.15的离线按照包。找来找去对本次编译唯一有用的是发现了这个[网站](http://dts.digitser.cn/zh-CN/download/qt/qt5.html#Qt5)如果要学习Qt她绝对是国内不二的选择，根据上面的介绍如果要得到5.15的离线安装包就需要自行编译，这个的编译成本非常之高。究竟有多高，看看在你这里就知道了[[在 Windows 10 编译 Qt 5.15 源代码的详细过程 步骤详解](http://wiki.digitser.cn/zh-CN/qt/compile5.15.html#)]。哇哇哇哇~~~~ 这么多依赖，关键是对于一个不进行Qt开发的人来说这么一次编译成本未免也太大了。果断选择其他方式。也许是快过年了头脑以己经开始了休假模式，一不留神把![img](../images/image-20220128001412487.png)看成了![img](../images/image-20220128001840194.png)\n\n心想不是说不开放离线按照包么，怎么被我找到了呢。这就是我在RDM的GitHub上[issue](https://github.com/uglide/RedisDesktopManager/issues/5184)的开端。具体问题欢迎[强势围观](https://github.com/uglide/RedisDesktopManager/issues/5184)。\n\n心情开始烦闷了。。。。。正好午饭时间到，去食堂解决一下口腹之欲再说。\n\n午休间隙突然发现，明明官文上说的是*Qt5.15*我这里怎么是**Qt5.14.2**，这不是自己搞错了么还跑去提*issue*丢人丢到家了。怎么搞呢，`5.15`没有离线安装，哎~~~ 为了把RDM编译成功我也是拼了。哈哈哈~ ~ ~ 拿出我珍藏多年的梯(dai)子(li)去Qt官网的[`5.15`下载站点](https://download.qt.io/archive/qt/5.14/5.14.0/)将在线安装包下载下来进行安装。\n\n安装的时候按照如下截图选择主键即可：\n\n![image-20220128004402035](../images/image-20220128004402035.png)\n\n等待安装完成即可。\n\n#### 修改项目文件以符合实际情况\n\n![image-20220128010633957](../images/image-20220128010402803.png)\n\n被注释掉代码是原有的，需要修改成实际python的地址。\n\n### 更新语言\n\n如果不做此操作编译后的程序默认是英文的\n\n![image-20220128164608048](../images/image-20220128164608048.png)\n\n**Run build. (Just hit `Ctrl-B`)**\n\n### 解决其他依赖\n\n观察`Qt Creator`的信息输出窗口没有出现之前的\n\n```shell\nE:\\WorkSpace\\rdm\\src\\app\\models\\connectionsmanager.cpp:133: error: C2027: 使用了未定义类型“QUuid”\nE:\\WorkSpace\\rdm\\3rdparty\\qredisclient\\src\\qredisclient\\connectionconfig.h:120: error: C2027: 使用了未定义类型“QSet<T>”\nwith\n[\n    T=QString\n]\nE:\\WorkSpace\\rdm\\src\\app\\models\\connectionsmanager.cpp:133: error: C3861: “createUuid”: 找不到标识符\n\nE:\\WorkSpace\\rdm\\src\\app\\models\\connectionsmanager.cpp:133: error: C2027: 使用了未定义类型“QUuid”\n```\n\n类似报错了，心想总算进入了实质性的编译阶段了。但是。。。。。\n\n![image-20220128160641398](../images/image-20220128160641398.png)\n\n根据错误提示定位到第三方模块`snappy`经过一番查找发现只有`snappy-stubs-public.h.in`文件，我不懂C/C++抱着试一试的想法把这个模块编译一下。查看其`README.md`与编译相关信息可以得知该模块是如何编译的：\n\n![image-20220128161314580](../images/image-20220128161314580.png)\n\n因为是在Windows平台所以这里仅仅执行到`cmake`就需要切换到`VS2019`上进行最后的的`make`操作。在这过程中在`build`目录下发现了所需要的`snappy-stubs-public.h`文件。省去make步骤直接把它拷贝到`snappy.h`同级目录。再在`Qt Creator`中执行Build操作。但是。。。还是但是。。。。\n\n![image-20220128011300968](../images/image-20220128011300968.png)\n\n明明之前都把python的绝对路径写死在代码里面了，这会儿怎么又冒出这个python相关的问题，看错误信息\n\n\t## Fatal Python error on Windows 10 ModuleNotFoundError: No module named 'encodings'\n\n用`ipython`测试一下：\n\n```shell\n$ ipython\nPython 3.9.7 (tags/v3.9.7:1016ef3, Aug 30 2021, 20:19:38) [MSC v.1929 64 bit (AMD64)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.30.1 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: import encodings\n\nIn [2]:\n```\n\n没有问题呀！怎么回事儿。好！是时候请出Google大神了\n\n找到了一篇文章[Windows 10上的致命Python错误ModuleNotFoundError：没有名为’encodings’的模块](https://www.codenong.com/42512817/)根据文章的说明新建两个环境变量`PYTHONHOME=E:\\program\\python39`和`PYTOHNPATH=E:\\program\\python39\\Scripts`然后重启`Qt Creator`让配置的新环境变量生效。然后继续编译，好事多磨，这次编译又报出![image-20220128012502642](../images/image-20220128012502642.png)\n\n好在问题越来越具体和清洗了，**根据报错信息定位到`3rdparty`模块的对应目录，找到他的`README.md`文件查看该库是如何编译以及使用的**。依据其README.md，项目已经在`zstd/build/cmake/`中提供了`cmake`的项目生成器，可以生成`Makefile`或者编译脚本。那么直接转到该目录下执行`cmake`命令即可生成编译脚本，然后使用VS2019编译出对应的生成物，然后将生成物拷贝的依赖提示的位置接下来的错误均是按照此操作进行\n\n![image-20220128013028710](../images/image-20220128013028710.png)\n\n此处还有一个报错，不像前面的报错可以清洗的知道属于哪个第三方模块所在的目录![image-20220128013317738](../images/image-20220128013317738.png)\n\n这么办呢，好在我这里收藏的神器比较多，铛铛铛铛铛~~~~`everything`![image-20220128013638288](../images/image-20220128013638288.png)\n\n咿~~~~ 这货是个 `java` ，翻看其`README.md`果然不同寻常，难道我还要去搞个`mvn`来编译这货。。。。结果让我失望了，他提供了`cmake`编译方式：![image-20220128014137121](../images/image-20220128014137121.png)\n\n通过`cmake`也能编译。好吧，执行上面的命令，进行编译，编译完成将`out/Release`目录拷贝的插件的根目录下也就是`README.md`同级目录。\n\n### 编译成功\n\n千呼万唤始出来。。。\n\n![image-20220128014652491](../images/image-20220128014652491.png)\n\n ### 软打包\n\n到`rdm\\bin\\windows\\release`去执行一下`rdm.exe`看看效果。┭┮﹏┭┮ 呜呜~~~~ 不带这么玩儿的呀！！\n\n![image-20220128015227879](../images/image-20220128015227879.png)\n\n在`Qt Creator`里面RUN一下呢，这又能跑起来。好奇怪。![image-20220128015512864](../images/image-20220128015512864.png)\n\n查了一下，这是因为`Qt Creator`编译好的exe程序是没有关联依赖库的，需要使用`windeployqt`这个工具将依赖库部署过来。也就是说编译成功只是倒数第二步或者第三步。\n\n### `windeployqt`对rdm.exe进行部署\n\n将编译好的`rdm.exe`拷贝到`rdm/build/windows/installer/resources`目录中，并在此目录中编写`assemble.bat`文件。\n\n文件内容如下:\n\n```powershell\n@echo off\n:: 执行依赖库引入\n:: 注意: 命令中的windeployqt是一个exe程序, \n:: 该程序的目录需要按实际Qt的安装位置修改, \n:: \\src\\qml目录也是按源码解压时所在位置的绝对路径修改\nset windeployqt=E:\\Qt\\5.15.2\\msvc2019_64\\bin\\windeployqt.exe\nset src_path=E:\\WorkSpace\\rdm\\src\n%windeployqt% --no-angle --no-opengl-sw --no-compiler-runtime --no-translations --release --force --qmldir %src_path%\\qml rdm.exe\n:: 删除一些不必要的文件\nrmdir /S /Q .\\qmltooling\nrmdir /S /Q .\\QtGraphicalEffects\ndel /Q  .\\imageformats\\qtiff.dll\ndel /Q  .\\imageformats\\qwebp.dll\necho Assemble complate! Press every key exit.\npause > nul\n```\n\n现在双击`rdm/build/windows/installer/resources/rdm.exe`能正常运行了\n\n![image-20220128021252933](../images/image-20220128021252933.png)\n\n\n\n### 处理软件分发\n\n到现在位置软件已经`RDM`算是编译完成并且可以在本机中分发了，为什么说是本机呢？因为程序运行运行所需的python.dll和python.zip依赖包旨在本机中存在，如果分发找其他其上一定会报错缺少`python.dll`而无法运行。因此需要将这两个依赖从[[python-embed]](https://www.python.org/ftp/python/3.9.7/python-3.9.7-embed-amd64.zip)包中复制到`rdm/build/windows/installer/resources/`中（`python-embed`是pytohn的一种机制提供了C/C++调用python代码进行交互）。这样分发到其他机器上就可以正常使用了。但是点击右上角的【日志】按钮出现如下信息，感觉似乎哪个依赖包不正确。![image-20220128090942876](../images/image-20220128090942876.png)\n\n经查原因如下：\n\n\t这是对redis的value值进行解析的扩展没有找到, 比如显示为二进制, msgpack等, 默认已经自带文本, json, 十六进制。添加对应的处理依赖包\n\n只需要将`rdm/src/py/formatters/`所有`.py`文件拷贝到`rdm/build/windows/installer/resources/formatters`目录下就想了。即在`git-bash`执行：\n\n`cp -rv rdm/src/py/formatters/*.py rdm/build/windows/installer/resources/formatters/` \n\n为了节省空间可以在`formatters`目录中执行如下命令\n\n```shell\nrdm/build/windows/installer/resources/formatters/ $ python -m compileall -b .\nrdm/build/windows/installer/resources/formatters/ $ rm -rf *.py\n```\n\n至此，一个绿色版的`rdm`就生成了。为了方便可以执行如下命令进行打包：\n\n```shell\nrdm/build/windows/installer/resources $ 7z a -tzip -mx9 resp-noinstaller-2022.zip * -r\n7-Zip [32] 15.12 : Copyright (c) 1999-2015 Igor Pavlov : 2015-11-19\n\nScanning the drive:\n42 folders, 736 files, 60113121 bytes (58 MiB)\n\nCreating archive: rdm-2021.zip\n\nItems to compress: 778\n\n\nFiles read from disk: 736\nArchive size: 24479939 bytes (24 MiB)\nEverything is Ok\n```\n\n### 制作安装包\n\n根据我自己的使用习惯做出`noinstaller`就可以了。但是rdm项目的作者很用心居然提供了`NSI`脚本，那我就来试一下将rdm制作成安装包。\n\n首先需要下载[`nsis`](https://sourceforge.net/projects/nsis/files/NSIS%203/3.08/nsis-3.08.zip/download)这个软件，它是制作软件安装包的工具，目前版本是*v3.08*同样我也是下载的`noInstaller`版本。运行`NSIS.exe`\n\n![image-20220128100350201](../images/image-20220128100350201.png)\n\n我们有`NSI`脚本因此选择这个\n\n![image-20220128100623377](../images/image-20220128100623377.png)\n\n对`installer.nsi`脚本进行修改\n\n```shell\nrdm/build/windows/installer $ sed -i '/^Name \"RDM\"/a\\# version\\n!define VERSION \"2021.10.0\"' installer.nsi # branch 2021\nrdm/build/windows/installer $ sed -i '/^Name \"RESP/a\\# version\\n!define VERSION \"2022.1.0\"' installer.nsi # branch 2022\n```\n\n请注意此处`VERSION`必须定义写成'x.x.x'这样的格式。不然`NSIN`在打包过程中就会报错：\n\n\tProcessed 1 file, writing output (x86-unicode):\n\tAdding plug-ins initializing function... Done!\n\tError: invalid VIProductVersion format, should be X.X.X.X\n\tError - aborting creation process\n\n通过两种打包方式可以看出`NSIN`的压缩比例明显占优，就看各自喜好。我个人喜欢`noinstaller`\n\n![image-20220128104220735](../images/image-20220128104026274.png)\n\n\n\n编译好的[rdm下载](https://github.com/ShoJinto/shojinto.github.io/releases/tag/rdm)，另外文章中的截图由于使用`2021`和`2022`两个分支的代码进行过编译，因此截图看着有点儿混乱，不过对编译总体流程没有影响。\n\n\n\n### 致谢\n\n[RDM作者](https://github.com/uglide/RedisDesktopManager)\n\n[Redis Desktop Manager 2020.2 Windows 源码编译](https://blog.csdn.net/aileitianshi/article/details/107920808)幸亏此参考\n\n[Visual C++ Redistributable for Visual Studio各版本的官方链接](https://blog.csdn.net/ZxqSoftWare/article/details/104993372)\n\n[Windows10+QT5.9+VS2017编译并打包RedisDesktopManager](https://zhuanlan.zhihu.com/p/82747325)\n\n[源码编译Redis Desktop Manager参考](http://www.cxyzjd.com/article/n447194252/107932227)\n\n","source":"_posts/RDM-从源码编译.md","raw":"---\ntitle: RDM 从源码编译\ndate: 2022-01-27 23:08:16 +0800\ncategories: [运维, 软件安装]\ntags: [运维]\nauthor:\n  name: ShoJinto\n  link: https://shojinto.github.io\n---\n\n# RDM 从源码编译\n\nRedis Desktop Manager -> **RDM** 一个超赞的`redis`开源客户端管理工具。感谢项目的作者[`@uglide`](https://github.com/uglide/RedisDesktopManager)，一个软件从源码到编译也不是一件容易的事情。所以有条件且嫌麻烦的朋友可以直接去官网购买[https://resp.app/pricing](https://resp.app/pricing)。\n\n### 环境准备\n\n根据官文[Build from source](http://docs.redisdesktop.com/en/latest/install/#build-from-source)准备所需依赖\n\n- [Visual Studio 2019 Community Edition](https://visualstudio.microsoft.com/vs/)\n- [Qt 5.15.x](https://www.qt.io/download)\n- [Python3.9+](https://www.python.org)\n- [Git](https://git-scm.com/downloads)\n- Windows 10 x64\n- [cmake](https://cmake.org/download/) 、[make](http://www.equation.com/servlet/equation.cmd?fa=make) 、[nuget](https://www.nuget.org/downloads)\n\n接下来对上面的提到的依赖进行逐一破解。\n\n本着先易后难的原则`VS2019`、`git`、`python39`这三个软件都是常用软件不做过多介绍，需要说明的安装`VS2019`的时候必须现在`C++`载荷因为**RDM**使用`C++`开发的。\n\n分别去[`https://cmake.org/download/`](https://cmake.org/download/)、[`http://www.equation.com/servlet/equation.cmd?fa=make`](http://www.equation.com/servlet/equation.cmd?fa=make)、[`https://www.nuget.org/downloads`](https://www.nuget.org/downloads)这三个地方把`cmake`、`make`和`nuget`下载到本地并添加到系统环境变量中,追加到`%path%`上，在找make for windows 命令的时候发现这篇关于[windows上make和cmake命令的集成](https://zhuanlan.zhihu.com/p/149305469)说的比较好。\n\n![image-20220127234804448](../images/image-20220127234804448.png)\n\n接下来就是按照官网[在windows上编译](http://docs.redisdesktop.com/en/latest/install/#build-from-source)小节`step by step`。在这期间自己犯了一个非常严重且愚蠢的错误，在上面起码耗费了4个小时甚至还跑到RDM的GitHub上提交[issue](https://github.com/uglide/RedisDesktopManager/issues/5184)。究竟怎么回事儿请继续往下看！！！\n\n### 编译lz4\n\n根据官网说明进行操作，需要注意的时候Windows上执行make命令会报错：\n\n```shell\n/WorkSpace/rdm/3rdparty/lz4/build/cmake $ make\nmake: *** No targets specified and no makefile found.  Stop.\n```\n\n解决办法是：直接用VS2019进行编译。\n\n编译过*程极度舒适*进入`lz4/build/cmake`目录双击`LZ4.sln`解决方案文件默认用VS2019打开。按照如下截图操作![image-20220128005609606](../images/image-20220128005609606.png)\n\n等待编译完成即可。\n\n### 使用Qt Creator 构建rdm项目\n\n由于Qt从5.15开始不提供离线安装包，在GFW内无疑是阻碍了丝滑度。所以我这边一股脑儿的想要找到5.15的离线按照包。找来找去对本次编译唯一有用的是发现了这个[网站](http://dts.digitser.cn/zh-CN/download/qt/qt5.html#Qt5)如果要学习Qt她绝对是国内不二的选择，根据上面的介绍如果要得到5.15的离线安装包就需要自行编译，这个的编译成本非常之高。究竟有多高，看看在你这里就知道了[[在 Windows 10 编译 Qt 5.15 源代码的详细过程 步骤详解](http://wiki.digitser.cn/zh-CN/qt/compile5.15.html#)]。哇哇哇哇~~~~ 这么多依赖，关键是对于一个不进行Qt开发的人来说这么一次编译成本未免也太大了。果断选择其他方式。也许是快过年了头脑以己经开始了休假模式，一不留神把![img](../images/image-20220128001412487.png)看成了![img](../images/image-20220128001840194.png)\n\n心想不是说不开放离线按照包么，怎么被我找到了呢。这就是我在RDM的GitHub上[issue](https://github.com/uglide/RedisDesktopManager/issues/5184)的开端。具体问题欢迎[强势围观](https://github.com/uglide/RedisDesktopManager/issues/5184)。\n\n心情开始烦闷了。。。。。正好午饭时间到，去食堂解决一下口腹之欲再说。\n\n午休间隙突然发现，明明官文上说的是*Qt5.15*我这里怎么是**Qt5.14.2**，这不是自己搞错了么还跑去提*issue*丢人丢到家了。怎么搞呢，`5.15`没有离线安装，哎~~~ 为了把RDM编译成功我也是拼了。哈哈哈~ ~ ~ 拿出我珍藏多年的梯(dai)子(li)去Qt官网的[`5.15`下载站点](https://download.qt.io/archive/qt/5.14/5.14.0/)将在线安装包下载下来进行安装。\n\n安装的时候按照如下截图选择主键即可：\n\n![image-20220128004402035](../images/image-20220128004402035.png)\n\n等待安装完成即可。\n\n#### 修改项目文件以符合实际情况\n\n![image-20220128010633957](../images/image-20220128010402803.png)\n\n被注释掉代码是原有的，需要修改成实际python的地址。\n\n### 更新语言\n\n如果不做此操作编译后的程序默认是英文的\n\n![image-20220128164608048](../images/image-20220128164608048.png)\n\n**Run build. (Just hit `Ctrl-B`)**\n\n### 解决其他依赖\n\n观察`Qt Creator`的信息输出窗口没有出现之前的\n\n```shell\nE:\\WorkSpace\\rdm\\src\\app\\models\\connectionsmanager.cpp:133: error: C2027: 使用了未定义类型“QUuid”\nE:\\WorkSpace\\rdm\\3rdparty\\qredisclient\\src\\qredisclient\\connectionconfig.h:120: error: C2027: 使用了未定义类型“QSet<T>”\nwith\n[\n    T=QString\n]\nE:\\WorkSpace\\rdm\\src\\app\\models\\connectionsmanager.cpp:133: error: C3861: “createUuid”: 找不到标识符\n\nE:\\WorkSpace\\rdm\\src\\app\\models\\connectionsmanager.cpp:133: error: C2027: 使用了未定义类型“QUuid”\n```\n\n类似报错了，心想总算进入了实质性的编译阶段了。但是。。。。。\n\n![image-20220128160641398](../images/image-20220128160641398.png)\n\n根据错误提示定位到第三方模块`snappy`经过一番查找发现只有`snappy-stubs-public.h.in`文件，我不懂C/C++抱着试一试的想法把这个模块编译一下。查看其`README.md`与编译相关信息可以得知该模块是如何编译的：\n\n![image-20220128161314580](../images/image-20220128161314580.png)\n\n因为是在Windows平台所以这里仅仅执行到`cmake`就需要切换到`VS2019`上进行最后的的`make`操作。在这过程中在`build`目录下发现了所需要的`snappy-stubs-public.h`文件。省去make步骤直接把它拷贝到`snappy.h`同级目录。再在`Qt Creator`中执行Build操作。但是。。。还是但是。。。。\n\n![image-20220128011300968](../images/image-20220128011300968.png)\n\n明明之前都把python的绝对路径写死在代码里面了，这会儿怎么又冒出这个python相关的问题，看错误信息\n\n\t## Fatal Python error on Windows 10 ModuleNotFoundError: No module named 'encodings'\n\n用`ipython`测试一下：\n\n```shell\n$ ipython\nPython 3.9.7 (tags/v3.9.7:1016ef3, Aug 30 2021, 20:19:38) [MSC v.1929 64 bit (AMD64)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.30.1 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: import encodings\n\nIn [2]:\n```\n\n没有问题呀！怎么回事儿。好！是时候请出Google大神了\n\n找到了一篇文章[Windows 10上的致命Python错误ModuleNotFoundError：没有名为’encodings’的模块](https://www.codenong.com/42512817/)根据文章的说明新建两个环境变量`PYTHONHOME=E:\\program\\python39`和`PYTOHNPATH=E:\\program\\python39\\Scripts`然后重启`Qt Creator`让配置的新环境变量生效。然后继续编译，好事多磨，这次编译又报出![image-20220128012502642](../images/image-20220128012502642.png)\n\n好在问题越来越具体和清洗了，**根据报错信息定位到`3rdparty`模块的对应目录，找到他的`README.md`文件查看该库是如何编译以及使用的**。依据其README.md，项目已经在`zstd/build/cmake/`中提供了`cmake`的项目生成器，可以生成`Makefile`或者编译脚本。那么直接转到该目录下执行`cmake`命令即可生成编译脚本，然后使用VS2019编译出对应的生成物，然后将生成物拷贝的依赖提示的位置接下来的错误均是按照此操作进行\n\n![image-20220128013028710](../images/image-20220128013028710.png)\n\n此处还有一个报错，不像前面的报错可以清洗的知道属于哪个第三方模块所在的目录![image-20220128013317738](../images/image-20220128013317738.png)\n\n这么办呢，好在我这里收藏的神器比较多，铛铛铛铛铛~~~~`everything`![image-20220128013638288](../images/image-20220128013638288.png)\n\n咿~~~~ 这货是个 `java` ，翻看其`README.md`果然不同寻常，难道我还要去搞个`mvn`来编译这货。。。。结果让我失望了，他提供了`cmake`编译方式：![image-20220128014137121](../images/image-20220128014137121.png)\n\n通过`cmake`也能编译。好吧，执行上面的命令，进行编译，编译完成将`out/Release`目录拷贝的插件的根目录下也就是`README.md`同级目录。\n\n### 编译成功\n\n千呼万唤始出来。。。\n\n![image-20220128014652491](../images/image-20220128014652491.png)\n\n ### 软打包\n\n到`rdm\\bin\\windows\\release`去执行一下`rdm.exe`看看效果。┭┮﹏┭┮ 呜呜~~~~ 不带这么玩儿的呀！！\n\n![image-20220128015227879](../images/image-20220128015227879.png)\n\n在`Qt Creator`里面RUN一下呢，这又能跑起来。好奇怪。![image-20220128015512864](../images/image-20220128015512864.png)\n\n查了一下，这是因为`Qt Creator`编译好的exe程序是没有关联依赖库的，需要使用`windeployqt`这个工具将依赖库部署过来。也就是说编译成功只是倒数第二步或者第三步。\n\n### `windeployqt`对rdm.exe进行部署\n\n将编译好的`rdm.exe`拷贝到`rdm/build/windows/installer/resources`目录中，并在此目录中编写`assemble.bat`文件。\n\n文件内容如下:\n\n```powershell\n@echo off\n:: 执行依赖库引入\n:: 注意: 命令中的windeployqt是一个exe程序, \n:: 该程序的目录需要按实际Qt的安装位置修改, \n:: \\src\\qml目录也是按源码解压时所在位置的绝对路径修改\nset windeployqt=E:\\Qt\\5.15.2\\msvc2019_64\\bin\\windeployqt.exe\nset src_path=E:\\WorkSpace\\rdm\\src\n%windeployqt% --no-angle --no-opengl-sw --no-compiler-runtime --no-translations --release --force --qmldir %src_path%\\qml rdm.exe\n:: 删除一些不必要的文件\nrmdir /S /Q .\\qmltooling\nrmdir /S /Q .\\QtGraphicalEffects\ndel /Q  .\\imageformats\\qtiff.dll\ndel /Q  .\\imageformats\\qwebp.dll\necho Assemble complate! Press every key exit.\npause > nul\n```\n\n现在双击`rdm/build/windows/installer/resources/rdm.exe`能正常运行了\n\n![image-20220128021252933](../images/image-20220128021252933.png)\n\n\n\n### 处理软件分发\n\n到现在位置软件已经`RDM`算是编译完成并且可以在本机中分发了，为什么说是本机呢？因为程序运行运行所需的python.dll和python.zip依赖包旨在本机中存在，如果分发找其他其上一定会报错缺少`python.dll`而无法运行。因此需要将这两个依赖从[[python-embed]](https://www.python.org/ftp/python/3.9.7/python-3.9.7-embed-amd64.zip)包中复制到`rdm/build/windows/installer/resources/`中（`python-embed`是pytohn的一种机制提供了C/C++调用python代码进行交互）。这样分发到其他机器上就可以正常使用了。但是点击右上角的【日志】按钮出现如下信息，感觉似乎哪个依赖包不正确。![image-20220128090942876](../images/image-20220128090942876.png)\n\n经查原因如下：\n\n\t这是对redis的value值进行解析的扩展没有找到, 比如显示为二进制, msgpack等, 默认已经自带文本, json, 十六进制。添加对应的处理依赖包\n\n只需要将`rdm/src/py/formatters/`所有`.py`文件拷贝到`rdm/build/windows/installer/resources/formatters`目录下就想了。即在`git-bash`执行：\n\n`cp -rv rdm/src/py/formatters/*.py rdm/build/windows/installer/resources/formatters/` \n\n为了节省空间可以在`formatters`目录中执行如下命令\n\n```shell\nrdm/build/windows/installer/resources/formatters/ $ python -m compileall -b .\nrdm/build/windows/installer/resources/formatters/ $ rm -rf *.py\n```\n\n至此，一个绿色版的`rdm`就生成了。为了方便可以执行如下命令进行打包：\n\n```shell\nrdm/build/windows/installer/resources $ 7z a -tzip -mx9 resp-noinstaller-2022.zip * -r\n7-Zip [32] 15.12 : Copyright (c) 1999-2015 Igor Pavlov : 2015-11-19\n\nScanning the drive:\n42 folders, 736 files, 60113121 bytes (58 MiB)\n\nCreating archive: rdm-2021.zip\n\nItems to compress: 778\n\n\nFiles read from disk: 736\nArchive size: 24479939 bytes (24 MiB)\nEverything is Ok\n```\n\n### 制作安装包\n\n根据我自己的使用习惯做出`noinstaller`就可以了。但是rdm项目的作者很用心居然提供了`NSI`脚本，那我就来试一下将rdm制作成安装包。\n\n首先需要下载[`nsis`](https://sourceforge.net/projects/nsis/files/NSIS%203/3.08/nsis-3.08.zip/download)这个软件，它是制作软件安装包的工具，目前版本是*v3.08*同样我也是下载的`noInstaller`版本。运行`NSIS.exe`\n\n![image-20220128100350201](../images/image-20220128100350201.png)\n\n我们有`NSI`脚本因此选择这个\n\n![image-20220128100623377](../images/image-20220128100623377.png)\n\n对`installer.nsi`脚本进行修改\n\n```shell\nrdm/build/windows/installer $ sed -i '/^Name \"RDM\"/a\\# version\\n!define VERSION \"2021.10.0\"' installer.nsi # branch 2021\nrdm/build/windows/installer $ sed -i '/^Name \"RESP/a\\# version\\n!define VERSION \"2022.1.0\"' installer.nsi # branch 2022\n```\n\n请注意此处`VERSION`必须定义写成'x.x.x'这样的格式。不然`NSIN`在打包过程中就会报错：\n\n\tProcessed 1 file, writing output (x86-unicode):\n\tAdding plug-ins initializing function... Done!\n\tError: invalid VIProductVersion format, should be X.X.X.X\n\tError - aborting creation process\n\n通过两种打包方式可以看出`NSIN`的压缩比例明显占优，就看各自喜好。我个人喜欢`noinstaller`\n\n![image-20220128104220735](../images/image-20220128104026274.png)\n\n\n\n编译好的[rdm下载](https://github.com/ShoJinto/shojinto.github.io/releases/tag/rdm)，另外文章中的截图由于使用`2021`和`2022`两个分支的代码进行过编译，因此截图看着有点儿混乱，不过对编译总体流程没有影响。\n\n\n\n### 致谢\n\n[RDM作者](https://github.com/uglide/RedisDesktopManager)\n\n[Redis Desktop Manager 2020.2 Windows 源码编译](https://blog.csdn.net/aileitianshi/article/details/107920808)幸亏此参考\n\n[Visual C++ Redistributable for Visual Studio各版本的官方链接](https://blog.csdn.net/ZxqSoftWare/article/details/104993372)\n\n[Windows10+QT5.9+VS2017编译并打包RedisDesktopManager](https://zhuanlan.zhihu.com/p/82747325)\n\n[源码编译Redis Desktop Manager参考](http://www.cxyzjd.com/article/n447194252/107932227)\n\n","slug":"RDM-从源码编译","published":1,"updated":"2022-03-30T06:25:42.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1d7s75h000skgscfke9ggw4","content":"<h1 id=\"RDM-从源码编译\"><a href=\"#RDM-从源码编译\" class=\"headerlink\" title=\"RDM 从源码编译\"></a>RDM 从源码编译</h1><p>Redis Desktop Manager -&gt; <strong>RDM</strong> 一个超赞的<code>redis</code>开源客户端管理工具。感谢项目的作者<a href=\"https://github.com/uglide/RedisDesktopManager\"><code>@uglide</code></a>，一个软件从源码到编译也不是一件容易的事情。所以有条件且嫌麻烦的朋友可以直接去官网购买<a href=\"https://resp.app/pricing\">https://resp.app/pricing</a>。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>根据官文<a href=\"http://docs.redisdesktop.com/en/latest/install/#build-from-source\">Build from source</a>准备所需依赖</p>\n<ul>\n<li><a href=\"https://visualstudio.microsoft.com/vs/\">Visual Studio 2019 Community Edition</a></li>\n<li><a href=\"https://www.qt.io/download\">Qt 5.15.x</a></li>\n<li><a href=\"https://www.python.org/\">Python3.9+</a></li>\n<li><a href=\"https://git-scm.com/downloads\">Git</a></li>\n<li>Windows 10 x64</li>\n<li><a href=\"https://cmake.org/download/\">cmake</a> 、<a href=\"http://www.equation.com/servlet/equation.cmd?fa=make\">make</a> 、<a href=\"https://www.nuget.org/downloads\">nuget</a></li>\n</ul>\n<p>接下来对上面的提到的依赖进行逐一破解。</p>\n<p>本着先易后难的原则<code>VS2019</code>、<code>git</code>、<code>python39</code>这三个软件都是常用软件不做过多介绍，需要说明的安装<code>VS2019</code>的时候必须现在<code>C++</code>载荷因为<strong>RDM</strong>使用<code>C++</code>开发的。</p>\n<p>分别去<a href=\"https://cmake.org/download/\"><code>https://cmake.org/download/</code></a>、<a href=\"http://www.equation.com/servlet/equation.cmd?fa=make\"><code>http://www.equation.com/servlet/equation.cmd?fa=make</code></a>、<a href=\"https://www.nuget.org/downloads\"><code>https://www.nuget.org/downloads</code></a>这三个地方把<code>cmake</code>、<code>make</code>和<code>nuget</code>下载到本地并添加到系统环境变量中,追加到<code>%path%</code>上，在找make for windows 命令的时候发现这篇关于<a href=\"https://zhuanlan.zhihu.com/p/149305469\">windows上make和cmake命令的集成</a>说的比较好。</p>\n<p><img src=\"/../images/image-20220127234804448.png\" alt=\"image-20220127234804448\"></p>\n<p>接下来就是按照官网<a href=\"http://docs.redisdesktop.com/en/latest/install/#build-from-source\">在windows上编译</a>小节<code>step by step</code>。在这期间自己犯了一个非常严重且愚蠢的错误，在上面起码耗费了4个小时甚至还跑到RDM的GitHub上提交<a href=\"https://github.com/uglide/RedisDesktopManager/issues/5184\">issue</a>。究竟怎么回事儿请继续往下看！！！</p>\n<h3 id=\"编译lz4\"><a href=\"#编译lz4\" class=\"headerlink\" title=\"编译lz4\"></a>编译lz4</h3><p>根据官网说明进行操作，需要注意的时候Windows上执行make命令会报错：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/WorkSpace/rdm/3rdparty/lz4/build/cmake $ make</span><br><span class=\"line\">make: *** No targets specified and no makefile found.  Stop.</span><br></pre></td></tr></table></figure>\n\n<p>解决办法是：直接用VS2019进行编译。</p>\n<p>编译过<em>程极度舒适</em>进入<code>lz4/build/cmake</code>目录双击<code>LZ4.sln</code>解决方案文件默认用VS2019打开。按照如下截图操作<img src=\"/../images/image-20220128005609606.png\" alt=\"image-20220128005609606\"></p>\n<p>等待编译完成即可。</p>\n<h3 id=\"使用Qt-Creator-构建rdm项目\"><a href=\"#使用Qt-Creator-构建rdm项目\" class=\"headerlink\" title=\"使用Qt Creator 构建rdm项目\"></a>使用Qt Creator 构建rdm项目</h3><p>由于Qt从5.15开始不提供离线安装包，在GFW内无疑是阻碍了丝滑度。所以我这边一股脑儿的想要找到5.15的离线按照包。找来找去对本次编译唯一有用的是发现了这个<a href=\"http://dts.digitser.cn/zh-CN/download/qt/qt5.html#Qt5\">网站</a>如果要学习Qt她绝对是国内不二的选择，根据上面的介绍如果要得到5.15的离线安装包就需要自行编译，这个的编译成本非常之高。究竟有多高，看看在你这里就知道了[<a href=\"http://wiki.digitser.cn/zh-CN/qt/compile5.15.html#\">在 Windows 10 编译 Qt 5.15 源代码的详细过程 步骤详解</a>]。哇哇哇哇~~~~ 这么多依赖，关键是对于一个不进行Qt开发的人来说这么一次编译成本未免也太大了。果断选择其他方式。也许是快过年了头脑以己经开始了休假模式，一不留神把<img src=\"/../images/image-20220128001412487.png\" alt=\"img\">看成了<img src=\"/../images/image-20220128001840194.png\" alt=\"img\"></p>\n<p>心想不是说不开放离线按照包么，怎么被我找到了呢。这就是我在RDM的GitHub上<a href=\"https://github.com/uglide/RedisDesktopManager/issues/5184\">issue</a>的开端。具体问题欢迎<a href=\"https://github.com/uglide/RedisDesktopManager/issues/5184\">强势围观</a>。</p>\n<p>心情开始烦闷了。。。。。正好午饭时间到，去食堂解决一下口腹之欲再说。</p>\n<p>午休间隙突然发现，明明官文上说的是<em>Qt5.15</em>我这里怎么是<strong>Qt5.14.2</strong>，这不是自己搞错了么还跑去提<em>issue</em>丢人丢到家了。怎么搞呢，<code>5.15</code>没有离线安装，哎~~~ 为了把RDM编译成功我也是拼了。哈哈哈~ ~ ~ 拿出我珍藏多年的梯(dai)子(li)去Qt官网的<a href=\"https://download.qt.io/archive/qt/5.14/5.14.0/\"><code>5.15</code>下载站点</a>将在线安装包下载下来进行安装。</p>\n<p>安装的时候按照如下截图选择主键即可：</p>\n<p><img src=\"/../images/image-20220128004402035.png\" alt=\"image-20220128004402035\"></p>\n<p>等待安装完成即可。</p>\n<h4 id=\"修改项目文件以符合实际情况\"><a href=\"#修改项目文件以符合实际情况\" class=\"headerlink\" title=\"修改项目文件以符合实际情况\"></a>修改项目文件以符合实际情况</h4><p><img src=\"/../images/image-20220128010402803.png\" alt=\"image-20220128010633957\"></p>\n<p>被注释掉代码是原有的，需要修改成实际python的地址。</p>\n<h3 id=\"更新语言\"><a href=\"#更新语言\" class=\"headerlink\" title=\"更新语言\"></a>更新语言</h3><p>如果不做此操作编译后的程序默认是英文的</p>\n<p><img src=\"/../images/image-20220128164608048.png\" alt=\"image-20220128164608048\"></p>\n<p><strong>Run build. (Just hit <code>Ctrl-B</code>)</strong></p>\n<h3 id=\"解决其他依赖\"><a href=\"#解决其他依赖\" class=\"headerlink\" title=\"解决其他依赖\"></a>解决其他依赖</h3><p>观察<code>Qt Creator</code>的信息输出窗口没有出现之前的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\WorkSpace\\rdm\\src\\app\\models\\connectionsmanager.cpp:133: error: C2027: 使用了未定义类型“QUuid”</span><br><span class=\"line\">E:\\WorkSpace\\rdm\\3rdparty\\qredisclient\\src\\qredisclient\\connectionconfig.h:120: error: C2027: 使用了未定义类型“QSet&lt;T&gt;”</span><br><span class=\"line\">with</span><br><span class=\"line\">[</span><br><span class=\"line\">    T=QString</span><br><span class=\"line\">]</span><br><span class=\"line\">E:\\WorkSpace\\rdm\\src\\app\\models\\connectionsmanager.cpp:133: error: C3861: “createUuid”: 找不到标识符</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\WorkSpace\\rdm\\src\\app\\models\\connectionsmanager.cpp:133: error: C2027: 使用了未定义类型“QUuid”</span><br></pre></td></tr></table></figure>\n\n<p>类似报错了，心想总算进入了实质性的编译阶段了。但是。。。。。</p>\n<p><img src=\"/../images/image-20220128160641398.png\" alt=\"image-20220128160641398\"></p>\n<p>根据错误提示定位到第三方模块<code>snappy</code>经过一番查找发现只有<code>snappy-stubs-public.h.in</code>文件，我不懂C&#x2F;C++抱着试一试的想法把这个模块编译一下。查看其<code>README.md</code>与编译相关信息可以得知该模块是如何编译的：</p>\n<p><img src=\"/../images/image-20220128161314580.png\" alt=\"image-20220128161314580\"></p>\n<p>因为是在Windows平台所以这里仅仅执行到<code>cmake</code>就需要切换到<code>VS2019</code>上进行最后的的<code>make</code>操作。在这过程中在<code>build</code>目录下发现了所需要的<code>snappy-stubs-public.h</code>文件。省去make步骤直接把它拷贝到<code>snappy.h</code>同级目录。再在<code>Qt Creator</code>中执行Build操作。但是。。。还是但是。。。。</p>\n<p><img src=\"/../images/image-20220128011300968.png\" alt=\"image-20220128011300968\"></p>\n<p>明明之前都把python的绝对路径写死在代码里面了，这会儿怎么又冒出这个python相关的问题，看错误信息</p>\n<pre><code>## Fatal Python error on Windows 10 ModuleNotFoundError: No module named &#39;encodings&#39;\n</code></pre>\n<p>用<code>ipython</code>测试一下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ipython</span></span><br><span class=\"line\">Python 3.9.7 (tags/v3.9.7:1016ef3, Aug 30 2021, 20:19:38) [MSC v.1929 64 bit (AMD64)]</span><br><span class=\"line\">Type &#x27;copyright&#x27;, &#x27;credits&#x27; or &#x27;license&#x27; for more information</span><br><span class=\"line\">IPython 7.30.1 -- An enhanced Interactive Python. Type &#x27;?&#x27; for help.</span><br><span class=\"line\"></span><br><span class=\"line\">In [1]: import encodings</span><br><span class=\"line\"></span><br><span class=\"line\">In [2]:</span><br></pre></td></tr></table></figure>\n\n<p>没有问题呀！怎么回事儿。好！是时候请出Google大神了</p>\n<p>找到了一篇文章<a href=\"https://www.codenong.com/42512817/\">Windows 10上的致命Python错误ModuleNotFoundError：没有名为’encodings’的模块</a>根据文章的说明新建两个环境变量<code>PYTHONHOME=E:\\program\\python39</code>和<code>PYTOHNPATH=E:\\program\\python39\\Scripts</code>然后重启<code>Qt Creator</code>让配置的新环境变量生效。然后继续编译，好事多磨，这次编译又报出<img src=\"/../images/image-20220128012502642.png\" alt=\"image-20220128012502642\"></p>\n<p>好在问题越来越具体和清洗了，<strong>根据报错信息定位到<code>3rdparty</code>模块的对应目录，找到他的<code>README.md</code>文件查看该库是如何编译以及使用的</strong>。依据其README.md，项目已经在<code>zstd/build/cmake/</code>中提供了<code>cmake</code>的项目生成器，可以生成<code>Makefile</code>或者编译脚本。那么直接转到该目录下执行<code>cmake</code>命令即可生成编译脚本，然后使用VS2019编译出对应的生成物，然后将生成物拷贝的依赖提示的位置接下来的错误均是按照此操作进行</p>\n<p><img src=\"/../images/image-20220128013028710.png\" alt=\"image-20220128013028710\"></p>\n<p>此处还有一个报错，不像前面的报错可以清洗的知道属于哪个第三方模块所在的目录<img src=\"/../images/image-20220128013317738.png\" alt=\"image-20220128013317738\"></p>\n<p>这么办呢，好在我这里收藏的神器比较多，铛铛铛铛铛~~~~&#96;everything&#96;<img src=\"/../images/image-20220128013638288.png\" alt=\"image-20220128013638288\"></p>\n<p>咿~~~~ 这货是个 <code>java</code> ，翻看其<code>README.md</code>果然不同寻常，难道我还要去搞个<code>mvn</code>来编译这货。。。。结果让我失望了，他提供了<code>cmake</code>编译方式：<img src=\"/../images/image-20220128014137121.png\" alt=\"image-20220128014137121\"></p>\n<p>通过<code>cmake</code>也能编译。好吧，执行上面的命令，进行编译，编译完成将<code>out/Release</code>目录拷贝的插件的根目录下也就是<code>README.md</code>同级目录。</p>\n<h3 id=\"编译成功\"><a href=\"#编译成功\" class=\"headerlink\" title=\"编译成功\"></a>编译成功</h3><p>千呼万唤始出来。。。</p>\n<p><img src=\"/../images/image-20220128014652491.png\" alt=\"image-20220128014652491\"></p>\n<h3 id=\"软打包\"><a href=\"#软打包\" class=\"headerlink\" title=\"软打包\"></a>软打包</h3><p>到<code>rdm\\bin\\windows\\release</code>去执行一下<code>rdm.exe</code>看看效果。┭┮﹏┭┮ 呜呜~~~~ 不带这么玩儿的呀！！</p>\n<p><img src=\"/../images/image-20220128015227879.png\" alt=\"image-20220128015227879\"></p>\n<p>在<code>Qt Creator</code>里面RUN一下呢，这又能跑起来。好奇怪。<img src=\"/../images/image-20220128015512864.png\" alt=\"image-20220128015512864\"></p>\n<p>查了一下，这是因为<code>Qt Creator</code>编译好的exe程序是没有关联依赖库的，需要使用<code>windeployqt</code>这个工具将依赖库部署过来。也就是说编译成功只是倒数第二步或者第三步。</p>\n<h3 id=\"windeployqt对rdm-exe进行部署\"><a href=\"#windeployqt对rdm-exe进行部署\" class=\"headerlink\" title=\"windeployqt对rdm.exe进行部署\"></a><code>windeployqt</code>对rdm.exe进行部署</h3><p>将编译好的<code>rdm.exe</code>拷贝到<code>rdm/build/windows/installer/resources</code>目录中，并在此目录中编写<code>assemble.bat</code>文件。</p>\n<p>文件内容如下:</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\">:: 执行依赖库引入</span><br><span class=\"line\">:: 注意: 命令中的windeployqt是一个exe程序, </span><br><span class=\"line\">:: 该程序的目录需要按实际Qt的安装位置修改, </span><br><span class=\"line\">:: \\src\\qml目录也是按源码解压时所在位置的绝对路径修改</span><br><span class=\"line\"><span class=\"built_in\">set</span> windeployqt=E:\\Qt\\<span class=\"number\">5.15</span>.<span class=\"number\">2</span>\\msvc2019_64\\bin\\windeployqt.exe</span><br><span class=\"line\"><span class=\"built_in\">set</span> src_path=E:\\WorkSpace\\rdm\\src</span><br><span class=\"line\">%windeployqt% <span class=\"literal\">--no-angle</span> <span class=\"literal\">--no-opengl-sw</span> <span class=\"literal\">--no-compiler-runtime</span> <span class=\"literal\">--no-translations</span> <span class=\"literal\">--release</span> <span class=\"literal\">--force</span> <span class=\"literal\">--qmldir</span> %src_path%\\qml rdm.exe</span><br><span class=\"line\">:: 删除一些不必要的文件</span><br><span class=\"line\"><span class=\"built_in\">rmdir</span> /S /Q .\\qmltooling</span><br><span class=\"line\"><span class=\"built_in\">rmdir</span> /S /Q .\\QtGraphicalEffects</span><br><span class=\"line\"><span class=\"built_in\">del</span> /Q  .\\imageformats\\qtiff.dll</span><br><span class=\"line\"><span class=\"built_in\">del</span> /Q  .\\imageformats\\qwebp.dll</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Assemble complate! Press every key <span class=\"keyword\">exit</span>.</span><br><span class=\"line\">pause &gt; nul</span><br></pre></td></tr></table></figure>\n\n<p>现在双击<code>rdm/build/windows/installer/resources/rdm.exe</code>能正常运行了</p>\n<p><img src=\"/../images/image-20220128021252933.png\" alt=\"image-20220128021252933\"></p>\n<h3 id=\"处理软件分发\"><a href=\"#处理软件分发\" class=\"headerlink\" title=\"处理软件分发\"></a>处理软件分发</h3><p>到现在位置软件已经<code>RDM</code>算是编译完成并且可以在本机中分发了，为什么说是本机呢？因为程序运行运行所需的python.dll和python.zip依赖包旨在本机中存在，如果分发找其他其上一定会报错缺少<code>python.dll</code>而无法运行。因此需要将这两个依赖从<a href=\"https://www.python.org/ftp/python/3.9.7/python-3.9.7-embed-amd64.zip\">[python-embed]</a>包中复制到<code>rdm/build/windows/installer/resources/</code>中（<code>python-embed</code>是pytohn的一种机制提供了C&#x2F;C++调用python代码进行交互）。这样分发到其他机器上就可以正常使用了。但是点击右上角的【日志】按钮出现如下信息，感觉似乎哪个依赖包不正确。<img src=\"/../images/image-20220128090942876.png\" alt=\"image-20220128090942876\"></p>\n<p>经查原因如下：</p>\n<pre><code>这是对redis的value值进行解析的扩展没有找到, 比如显示为二进制, msgpack等, 默认已经自带文本, json, 十六进制。添加对应的处理依赖包\n</code></pre>\n<p>只需要将<code>rdm/src/py/formatters/</code>所有<code>.py</code>文件拷贝到<code>rdm/build/windows/installer/resources/formatters</code>目录下就想了。即在<code>git-bash</code>执行：</p>\n<p><code>cp -rv rdm/src/py/formatters/*.py rdm/build/windows/installer/resources/formatters/</code> </p>\n<p>为了节省空间可以在<code>formatters</code>目录中执行如下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rdm/build/windows/installer/resources/formatters/ $ python -m compileall -b .</span><br><span class=\"line\">rdm/build/windows/installer/resources/formatters/ $ rm -rf *.py</span><br></pre></td></tr></table></figure>\n\n<p>至此，一个绿色版的<code>rdm</code>就生成了。为了方便可以执行如下命令进行打包：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rdm/build/windows/installer/resources $ 7z a -tzip -mx9 resp-noinstaller-2022.zip * -r</span><br><span class=\"line\">7-Zip [32] 15.12 : Copyright (c) 1999-2015 Igor Pavlov : 2015-11-19</span><br><span class=\"line\"></span><br><span class=\"line\">Scanning the drive:</span><br><span class=\"line\">42 folders, 736 files, 60113121 bytes (58 MiB)</span><br><span class=\"line\"></span><br><span class=\"line\">Creating archive: rdm-2021.zip</span><br><span class=\"line\"></span><br><span class=\"line\">Items to compress: 778</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Files read from disk: 736</span><br><span class=\"line\">Archive size: 24479939 bytes (24 MiB)</span><br><span class=\"line\">Everything is Ok</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"制作安装包\"><a href=\"#制作安装包\" class=\"headerlink\" title=\"制作安装包\"></a>制作安装包</h3><p>根据我自己的使用习惯做出<code>noinstaller</code>就可以了。但是rdm项目的作者很用心居然提供了<code>NSI</code>脚本，那我就来试一下将rdm制作成安装包。</p>\n<p>首先需要下载<a href=\"https://sourceforge.net/projects/nsis/files/NSIS%203/3.08/nsis-3.08.zip/download\"><code>nsis</code></a>这个软件，它是制作软件安装包的工具，目前版本是<em>v3.08</em>同样我也是下载的<code>noInstaller</code>版本。运行<code>NSIS.exe</code></p>\n<p><img src=\"/../images/image-20220128100350201.png\" alt=\"image-20220128100350201\"></p>\n<p>我们有<code>NSI</code>脚本因此选择这个</p>\n<p><img src=\"/../images/image-20220128100623377.png\" alt=\"image-20220128100623377\"></p>\n<p>对<code>installer.nsi</code>脚本进行修改</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rdm/build/windows/installer $ sed -i &#x27;/^Name &quot;RDM&quot;/a\\# version\\n!define VERSION &quot;2021.10.0&quot;&#x27; installer.nsi # branch 2021</span><br><span class=\"line\">rdm/build/windows/installer $ sed -i &#x27;/^Name &quot;RESP/a\\# version\\n!define VERSION &quot;2022.1.0&quot;&#x27; installer.nsi # branch 2022</span><br></pre></td></tr></table></figure>\n\n<p>请注意此处<code>VERSION</code>必须定义写成’x.x.x’这样的格式。不然<code>NSIN</code>在打包过程中就会报错：</p>\n<pre><code>Processed 1 file, writing output (x86-unicode):\nAdding plug-ins initializing function... Done!\nError: invalid VIProductVersion format, should be X.X.X.X\nError - aborting creation process\n</code></pre>\n<p>通过两种打包方式可以看出<code>NSIN</code>的压缩比例明显占优，就看各自喜好。我个人喜欢<code>noinstaller</code></p>\n<p><img src=\"/../images/image-20220128104026274.png\" alt=\"image-20220128104220735\"></p>\n<p>编译好的<a href=\"https://github.com/ShoJinto/shojinto.github.io/releases/tag/rdm\">rdm下载</a>，另外文章中的截图由于使用<code>2021</code>和<code>2022</code>两个分支的代码进行过编译，因此截图看着有点儿混乱，不过对编译总体流程没有影响。</p>\n<h3 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h3><p><a href=\"https://github.com/uglide/RedisDesktopManager\">RDM作者</a></p>\n<p><a href=\"https://blog.csdn.net/aileitianshi/article/details/107920808\">Redis Desktop Manager 2020.2 Windows 源码编译</a>幸亏此参考</p>\n<p><a href=\"https://blog.csdn.net/ZxqSoftWare/article/details/104993372\">Visual C++ Redistributable for Visual Studio各版本的官方链接</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/82747325\">Windows10+QT5.9+VS2017编译并打包RedisDesktopManager</a></p>\n<p><a href=\"http://www.cxyzjd.com/article/n447194252/107932227\">源码编译Redis Desktop Manager参考</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"RDM-从源码编译\"><a href=\"#RDM-从源码编译\" class=\"headerlink\" title=\"RDM 从源码编译\"></a>RDM 从源码编译</h1><p>Redis Desktop Manager -&gt; <strong>RDM</strong> 一个超赞的<code>redis</code>开源客户端管理工具。感谢项目的作者<a href=\"https://github.com/uglide/RedisDesktopManager\"><code>@uglide</code></a>，一个软件从源码到编译也不是一件容易的事情。所以有条件且嫌麻烦的朋友可以直接去官网购买<a href=\"https://resp.app/pricing\">https://resp.app/pricing</a>。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>根据官文<a href=\"http://docs.redisdesktop.com/en/latest/install/#build-from-source\">Build from source</a>准备所需依赖</p>\n<ul>\n<li><a href=\"https://visualstudio.microsoft.com/vs/\">Visual Studio 2019 Community Edition</a></li>\n<li><a href=\"https://www.qt.io/download\">Qt 5.15.x</a></li>\n<li><a href=\"https://www.python.org/\">Python3.9+</a></li>\n<li><a href=\"https://git-scm.com/downloads\">Git</a></li>\n<li>Windows 10 x64</li>\n<li><a href=\"https://cmake.org/download/\">cmake</a> 、<a href=\"http://www.equation.com/servlet/equation.cmd?fa=make\">make</a> 、<a href=\"https://www.nuget.org/downloads\">nuget</a></li>\n</ul>\n<p>接下来对上面的提到的依赖进行逐一破解。</p>\n<p>本着先易后难的原则<code>VS2019</code>、<code>git</code>、<code>python39</code>这三个软件都是常用软件不做过多介绍，需要说明的安装<code>VS2019</code>的时候必须现在<code>C++</code>载荷因为<strong>RDM</strong>使用<code>C++</code>开发的。</p>\n<p>分别去<a href=\"https://cmake.org/download/\"><code>https://cmake.org/download/</code></a>、<a href=\"http://www.equation.com/servlet/equation.cmd?fa=make\"><code>http://www.equation.com/servlet/equation.cmd?fa=make</code></a>、<a href=\"https://www.nuget.org/downloads\"><code>https://www.nuget.org/downloads</code></a>这三个地方把<code>cmake</code>、<code>make</code>和<code>nuget</code>下载到本地并添加到系统环境变量中,追加到<code>%path%</code>上，在找make for windows 命令的时候发现这篇关于<a href=\"https://zhuanlan.zhihu.com/p/149305469\">windows上make和cmake命令的集成</a>说的比较好。</p>\n<p><img src=\"/../images/image-20220127234804448.png\" alt=\"image-20220127234804448\"></p>\n<p>接下来就是按照官网<a href=\"http://docs.redisdesktop.com/en/latest/install/#build-from-source\">在windows上编译</a>小节<code>step by step</code>。在这期间自己犯了一个非常严重且愚蠢的错误，在上面起码耗费了4个小时甚至还跑到RDM的GitHub上提交<a href=\"https://github.com/uglide/RedisDesktopManager/issues/5184\">issue</a>。究竟怎么回事儿请继续往下看！！！</p>\n<h3 id=\"编译lz4\"><a href=\"#编译lz4\" class=\"headerlink\" title=\"编译lz4\"></a>编译lz4</h3><p>根据官网说明进行操作，需要注意的时候Windows上执行make命令会报错：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/WorkSpace/rdm/3rdparty/lz4/build/cmake $ make</span><br><span class=\"line\">make: *** No targets specified and no makefile found.  Stop.</span><br></pre></td></tr></table></figure>\n\n<p>解决办法是：直接用VS2019进行编译。</p>\n<p>编译过<em>程极度舒适</em>进入<code>lz4/build/cmake</code>目录双击<code>LZ4.sln</code>解决方案文件默认用VS2019打开。按照如下截图操作<img src=\"/../images/image-20220128005609606.png\" alt=\"image-20220128005609606\"></p>\n<p>等待编译完成即可。</p>\n<h3 id=\"使用Qt-Creator-构建rdm项目\"><a href=\"#使用Qt-Creator-构建rdm项目\" class=\"headerlink\" title=\"使用Qt Creator 构建rdm项目\"></a>使用Qt Creator 构建rdm项目</h3><p>由于Qt从5.15开始不提供离线安装包，在GFW内无疑是阻碍了丝滑度。所以我这边一股脑儿的想要找到5.15的离线按照包。找来找去对本次编译唯一有用的是发现了这个<a href=\"http://dts.digitser.cn/zh-CN/download/qt/qt5.html#Qt5\">网站</a>如果要学习Qt她绝对是国内不二的选择，根据上面的介绍如果要得到5.15的离线安装包就需要自行编译，这个的编译成本非常之高。究竟有多高，看看在你这里就知道了[<a href=\"http://wiki.digitser.cn/zh-CN/qt/compile5.15.html#\">在 Windows 10 编译 Qt 5.15 源代码的详细过程 步骤详解</a>]。哇哇哇哇~~~~ 这么多依赖，关键是对于一个不进行Qt开发的人来说这么一次编译成本未免也太大了。果断选择其他方式。也许是快过年了头脑以己经开始了休假模式，一不留神把<img src=\"/../images/image-20220128001412487.png\" alt=\"img\">看成了<img src=\"/../images/image-20220128001840194.png\" alt=\"img\"></p>\n<p>心想不是说不开放离线按照包么，怎么被我找到了呢。这就是我在RDM的GitHub上<a href=\"https://github.com/uglide/RedisDesktopManager/issues/5184\">issue</a>的开端。具体问题欢迎<a href=\"https://github.com/uglide/RedisDesktopManager/issues/5184\">强势围观</a>。</p>\n<p>心情开始烦闷了。。。。。正好午饭时间到，去食堂解决一下口腹之欲再说。</p>\n<p>午休间隙突然发现，明明官文上说的是<em>Qt5.15</em>我这里怎么是<strong>Qt5.14.2</strong>，这不是自己搞错了么还跑去提<em>issue</em>丢人丢到家了。怎么搞呢，<code>5.15</code>没有离线安装，哎~~~ 为了把RDM编译成功我也是拼了。哈哈哈~ ~ ~ 拿出我珍藏多年的梯(dai)子(li)去Qt官网的<a href=\"https://download.qt.io/archive/qt/5.14/5.14.0/\"><code>5.15</code>下载站点</a>将在线安装包下载下来进行安装。</p>\n<p>安装的时候按照如下截图选择主键即可：</p>\n<p><img src=\"/../images/image-20220128004402035.png\" alt=\"image-20220128004402035\"></p>\n<p>等待安装完成即可。</p>\n<h4 id=\"修改项目文件以符合实际情况\"><a href=\"#修改项目文件以符合实际情况\" class=\"headerlink\" title=\"修改项目文件以符合实际情况\"></a>修改项目文件以符合实际情况</h4><p><img src=\"/../images/image-20220128010402803.png\" alt=\"image-20220128010633957\"></p>\n<p>被注释掉代码是原有的，需要修改成实际python的地址。</p>\n<h3 id=\"更新语言\"><a href=\"#更新语言\" class=\"headerlink\" title=\"更新语言\"></a>更新语言</h3><p>如果不做此操作编译后的程序默认是英文的</p>\n<p><img src=\"/../images/image-20220128164608048.png\" alt=\"image-20220128164608048\"></p>\n<p><strong>Run build. (Just hit <code>Ctrl-B</code>)</strong></p>\n<h3 id=\"解决其他依赖\"><a href=\"#解决其他依赖\" class=\"headerlink\" title=\"解决其他依赖\"></a>解决其他依赖</h3><p>观察<code>Qt Creator</code>的信息输出窗口没有出现之前的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\WorkSpace\\rdm\\src\\app\\models\\connectionsmanager.cpp:133: error: C2027: 使用了未定义类型“QUuid”</span><br><span class=\"line\">E:\\WorkSpace\\rdm\\3rdparty\\qredisclient\\src\\qredisclient\\connectionconfig.h:120: error: C2027: 使用了未定义类型“QSet&lt;T&gt;”</span><br><span class=\"line\">with</span><br><span class=\"line\">[</span><br><span class=\"line\">    T=QString</span><br><span class=\"line\">]</span><br><span class=\"line\">E:\\WorkSpace\\rdm\\src\\app\\models\\connectionsmanager.cpp:133: error: C3861: “createUuid”: 找不到标识符</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\WorkSpace\\rdm\\src\\app\\models\\connectionsmanager.cpp:133: error: C2027: 使用了未定义类型“QUuid”</span><br></pre></td></tr></table></figure>\n\n<p>类似报错了，心想总算进入了实质性的编译阶段了。但是。。。。。</p>\n<p><img src=\"/../images/image-20220128160641398.png\" alt=\"image-20220128160641398\"></p>\n<p>根据错误提示定位到第三方模块<code>snappy</code>经过一番查找发现只有<code>snappy-stubs-public.h.in</code>文件，我不懂C&#x2F;C++抱着试一试的想法把这个模块编译一下。查看其<code>README.md</code>与编译相关信息可以得知该模块是如何编译的：</p>\n<p><img src=\"/../images/image-20220128161314580.png\" alt=\"image-20220128161314580\"></p>\n<p>因为是在Windows平台所以这里仅仅执行到<code>cmake</code>就需要切换到<code>VS2019</code>上进行最后的的<code>make</code>操作。在这过程中在<code>build</code>目录下发现了所需要的<code>snappy-stubs-public.h</code>文件。省去make步骤直接把它拷贝到<code>snappy.h</code>同级目录。再在<code>Qt Creator</code>中执行Build操作。但是。。。还是但是。。。。</p>\n<p><img src=\"/../images/image-20220128011300968.png\" alt=\"image-20220128011300968\"></p>\n<p>明明之前都把python的绝对路径写死在代码里面了，这会儿怎么又冒出这个python相关的问题，看错误信息</p>\n<pre><code>## Fatal Python error on Windows 10 ModuleNotFoundError: No module named &#39;encodings&#39;\n</code></pre>\n<p>用<code>ipython</code>测试一下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ipython</span></span><br><span class=\"line\">Python 3.9.7 (tags/v3.9.7:1016ef3, Aug 30 2021, 20:19:38) [MSC v.1929 64 bit (AMD64)]</span><br><span class=\"line\">Type &#x27;copyright&#x27;, &#x27;credits&#x27; or &#x27;license&#x27; for more information</span><br><span class=\"line\">IPython 7.30.1 -- An enhanced Interactive Python. Type &#x27;?&#x27; for help.</span><br><span class=\"line\"></span><br><span class=\"line\">In [1]: import encodings</span><br><span class=\"line\"></span><br><span class=\"line\">In [2]:</span><br></pre></td></tr></table></figure>\n\n<p>没有问题呀！怎么回事儿。好！是时候请出Google大神了</p>\n<p>找到了一篇文章<a href=\"https://www.codenong.com/42512817/\">Windows 10上的致命Python错误ModuleNotFoundError：没有名为’encodings’的模块</a>根据文章的说明新建两个环境变量<code>PYTHONHOME=E:\\program\\python39</code>和<code>PYTOHNPATH=E:\\program\\python39\\Scripts</code>然后重启<code>Qt Creator</code>让配置的新环境变量生效。然后继续编译，好事多磨，这次编译又报出<img src=\"/../images/image-20220128012502642.png\" alt=\"image-20220128012502642\"></p>\n<p>好在问题越来越具体和清洗了，<strong>根据报错信息定位到<code>3rdparty</code>模块的对应目录，找到他的<code>README.md</code>文件查看该库是如何编译以及使用的</strong>。依据其README.md，项目已经在<code>zstd/build/cmake/</code>中提供了<code>cmake</code>的项目生成器，可以生成<code>Makefile</code>或者编译脚本。那么直接转到该目录下执行<code>cmake</code>命令即可生成编译脚本，然后使用VS2019编译出对应的生成物，然后将生成物拷贝的依赖提示的位置接下来的错误均是按照此操作进行</p>\n<p><img src=\"/../images/image-20220128013028710.png\" alt=\"image-20220128013028710\"></p>\n<p>此处还有一个报错，不像前面的报错可以清洗的知道属于哪个第三方模块所在的目录<img src=\"/../images/image-20220128013317738.png\" alt=\"image-20220128013317738\"></p>\n<p>这么办呢，好在我这里收藏的神器比较多，铛铛铛铛铛~~~~&#96;everything&#96;<img src=\"/../images/image-20220128013638288.png\" alt=\"image-20220128013638288\"></p>\n<p>咿~~~~ 这货是个 <code>java</code> ，翻看其<code>README.md</code>果然不同寻常，难道我还要去搞个<code>mvn</code>来编译这货。。。。结果让我失望了，他提供了<code>cmake</code>编译方式：<img src=\"/../images/image-20220128014137121.png\" alt=\"image-20220128014137121\"></p>\n<p>通过<code>cmake</code>也能编译。好吧，执行上面的命令，进行编译，编译完成将<code>out/Release</code>目录拷贝的插件的根目录下也就是<code>README.md</code>同级目录。</p>\n<h3 id=\"编译成功\"><a href=\"#编译成功\" class=\"headerlink\" title=\"编译成功\"></a>编译成功</h3><p>千呼万唤始出来。。。</p>\n<p><img src=\"/../images/image-20220128014652491.png\" alt=\"image-20220128014652491\"></p>\n<h3 id=\"软打包\"><a href=\"#软打包\" class=\"headerlink\" title=\"软打包\"></a>软打包</h3><p>到<code>rdm\\bin\\windows\\release</code>去执行一下<code>rdm.exe</code>看看效果。┭┮﹏┭┮ 呜呜~~~~ 不带这么玩儿的呀！！</p>\n<p><img src=\"/../images/image-20220128015227879.png\" alt=\"image-20220128015227879\"></p>\n<p>在<code>Qt Creator</code>里面RUN一下呢，这又能跑起来。好奇怪。<img src=\"/../images/image-20220128015512864.png\" alt=\"image-20220128015512864\"></p>\n<p>查了一下，这是因为<code>Qt Creator</code>编译好的exe程序是没有关联依赖库的，需要使用<code>windeployqt</code>这个工具将依赖库部署过来。也就是说编译成功只是倒数第二步或者第三步。</p>\n<h3 id=\"windeployqt对rdm-exe进行部署\"><a href=\"#windeployqt对rdm-exe进行部署\" class=\"headerlink\" title=\"windeployqt对rdm.exe进行部署\"></a><code>windeployqt</code>对rdm.exe进行部署</h3><p>将编译好的<code>rdm.exe</code>拷贝到<code>rdm/build/windows/installer/resources</code>目录中，并在此目录中编写<code>assemble.bat</code>文件。</p>\n<p>文件内容如下:</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\">:: 执行依赖库引入</span><br><span class=\"line\">:: 注意: 命令中的windeployqt是一个exe程序, </span><br><span class=\"line\">:: 该程序的目录需要按实际Qt的安装位置修改, </span><br><span class=\"line\">:: \\src\\qml目录也是按源码解压时所在位置的绝对路径修改</span><br><span class=\"line\"><span class=\"built_in\">set</span> windeployqt=E:\\Qt\\<span class=\"number\">5.15</span>.<span class=\"number\">2</span>\\msvc2019_64\\bin\\windeployqt.exe</span><br><span class=\"line\"><span class=\"built_in\">set</span> src_path=E:\\WorkSpace\\rdm\\src</span><br><span class=\"line\">%windeployqt% <span class=\"literal\">--no-angle</span> <span class=\"literal\">--no-opengl-sw</span> <span class=\"literal\">--no-compiler-runtime</span> <span class=\"literal\">--no-translations</span> <span class=\"literal\">--release</span> <span class=\"literal\">--force</span> <span class=\"literal\">--qmldir</span> %src_path%\\qml rdm.exe</span><br><span class=\"line\">:: 删除一些不必要的文件</span><br><span class=\"line\"><span class=\"built_in\">rmdir</span> /S /Q .\\qmltooling</span><br><span class=\"line\"><span class=\"built_in\">rmdir</span> /S /Q .\\QtGraphicalEffects</span><br><span class=\"line\"><span class=\"built_in\">del</span> /Q  .\\imageformats\\qtiff.dll</span><br><span class=\"line\"><span class=\"built_in\">del</span> /Q  .\\imageformats\\qwebp.dll</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Assemble complate! Press every key <span class=\"keyword\">exit</span>.</span><br><span class=\"line\">pause &gt; nul</span><br></pre></td></tr></table></figure>\n\n<p>现在双击<code>rdm/build/windows/installer/resources/rdm.exe</code>能正常运行了</p>\n<p><img src=\"/../images/image-20220128021252933.png\" alt=\"image-20220128021252933\"></p>\n<h3 id=\"处理软件分发\"><a href=\"#处理软件分发\" class=\"headerlink\" title=\"处理软件分发\"></a>处理软件分发</h3><p>到现在位置软件已经<code>RDM</code>算是编译完成并且可以在本机中分发了，为什么说是本机呢？因为程序运行运行所需的python.dll和python.zip依赖包旨在本机中存在，如果分发找其他其上一定会报错缺少<code>python.dll</code>而无法运行。因此需要将这两个依赖从<a href=\"https://www.python.org/ftp/python/3.9.7/python-3.9.7-embed-amd64.zip\">[python-embed]</a>包中复制到<code>rdm/build/windows/installer/resources/</code>中（<code>python-embed</code>是pytohn的一种机制提供了C&#x2F;C++调用python代码进行交互）。这样分发到其他机器上就可以正常使用了。但是点击右上角的【日志】按钮出现如下信息，感觉似乎哪个依赖包不正确。<img src=\"/../images/image-20220128090942876.png\" alt=\"image-20220128090942876\"></p>\n<p>经查原因如下：</p>\n<pre><code>这是对redis的value值进行解析的扩展没有找到, 比如显示为二进制, msgpack等, 默认已经自带文本, json, 十六进制。添加对应的处理依赖包\n</code></pre>\n<p>只需要将<code>rdm/src/py/formatters/</code>所有<code>.py</code>文件拷贝到<code>rdm/build/windows/installer/resources/formatters</code>目录下就想了。即在<code>git-bash</code>执行：</p>\n<p><code>cp -rv rdm/src/py/formatters/*.py rdm/build/windows/installer/resources/formatters/</code> </p>\n<p>为了节省空间可以在<code>formatters</code>目录中执行如下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rdm/build/windows/installer/resources/formatters/ $ python -m compileall -b .</span><br><span class=\"line\">rdm/build/windows/installer/resources/formatters/ $ rm -rf *.py</span><br></pre></td></tr></table></figure>\n\n<p>至此，一个绿色版的<code>rdm</code>就生成了。为了方便可以执行如下命令进行打包：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rdm/build/windows/installer/resources $ 7z a -tzip -mx9 resp-noinstaller-2022.zip * -r</span><br><span class=\"line\">7-Zip [32] 15.12 : Copyright (c) 1999-2015 Igor Pavlov : 2015-11-19</span><br><span class=\"line\"></span><br><span class=\"line\">Scanning the drive:</span><br><span class=\"line\">42 folders, 736 files, 60113121 bytes (58 MiB)</span><br><span class=\"line\"></span><br><span class=\"line\">Creating archive: rdm-2021.zip</span><br><span class=\"line\"></span><br><span class=\"line\">Items to compress: 778</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Files read from disk: 736</span><br><span class=\"line\">Archive size: 24479939 bytes (24 MiB)</span><br><span class=\"line\">Everything is Ok</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"制作安装包\"><a href=\"#制作安装包\" class=\"headerlink\" title=\"制作安装包\"></a>制作安装包</h3><p>根据我自己的使用习惯做出<code>noinstaller</code>就可以了。但是rdm项目的作者很用心居然提供了<code>NSI</code>脚本，那我就来试一下将rdm制作成安装包。</p>\n<p>首先需要下载<a href=\"https://sourceforge.net/projects/nsis/files/NSIS%203/3.08/nsis-3.08.zip/download\"><code>nsis</code></a>这个软件，它是制作软件安装包的工具，目前版本是<em>v3.08</em>同样我也是下载的<code>noInstaller</code>版本。运行<code>NSIS.exe</code></p>\n<p><img src=\"/../images/image-20220128100350201.png\" alt=\"image-20220128100350201\"></p>\n<p>我们有<code>NSI</code>脚本因此选择这个</p>\n<p><img src=\"/../images/image-20220128100623377.png\" alt=\"image-20220128100623377\"></p>\n<p>对<code>installer.nsi</code>脚本进行修改</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rdm/build/windows/installer $ sed -i &#x27;/^Name &quot;RDM&quot;/a\\# version\\n!define VERSION &quot;2021.10.0&quot;&#x27; installer.nsi # branch 2021</span><br><span class=\"line\">rdm/build/windows/installer $ sed -i &#x27;/^Name &quot;RESP/a\\# version\\n!define VERSION &quot;2022.1.0&quot;&#x27; installer.nsi # branch 2022</span><br></pre></td></tr></table></figure>\n\n<p>请注意此处<code>VERSION</code>必须定义写成’x.x.x’这样的格式。不然<code>NSIN</code>在打包过程中就会报错：</p>\n<pre><code>Processed 1 file, writing output (x86-unicode):\nAdding plug-ins initializing function... Done!\nError: invalid VIProductVersion format, should be X.X.X.X\nError - aborting creation process\n</code></pre>\n<p>通过两种打包方式可以看出<code>NSIN</code>的压缩比例明显占优，就看各自喜好。我个人喜欢<code>noinstaller</code></p>\n<p><img src=\"/../images/image-20220128104026274.png\" alt=\"image-20220128104220735\"></p>\n<p>编译好的<a href=\"https://github.com/ShoJinto/shojinto.github.io/releases/tag/rdm\">rdm下载</a>，另外文章中的截图由于使用<code>2021</code>和<code>2022</code>两个分支的代码进行过编译，因此截图看着有点儿混乱，不过对编译总体流程没有影响。</p>\n<h3 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h3><p><a href=\"https://github.com/uglide/RedisDesktopManager\">RDM作者</a></p>\n<p><a href=\"https://blog.csdn.net/aileitianshi/article/details/107920808\">Redis Desktop Manager 2020.2 Windows 源码编译</a>幸亏此参考</p>\n<p><a href=\"https://blog.csdn.net/ZxqSoftWare/article/details/104993372\">Visual C++ Redistributable for Visual Studio各版本的官方链接</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/82747325\">Windows10+QT5.9+VS2017编译并打包RedisDesktopManager</a></p>\n<p><a href=\"http://www.cxyzjd.com/article/n447194252/107932227\">源码编译Redis Desktop Manager参考</a></p>\n"},{"title":"切换Jeykll到Hexo.md","date":"2022-03-29T22:59:32.000Z","_content":"\n\n\n在写[上一篇文章](/2022/02/16/Python-docx-操作word文档实战/)的时候发现Jekyll与文章的部分标记有冲突，导致github编译不通过，最终博客不能更新。\n\n这两天打算将公司内部的知识库也通过静态网页的方式进行共享，由于之前Jekyll的坑所以这次选择了hexo作为生成引擎。发现Hexo确实比Jekyll要简单太多了，文档中文友好。简直不要太香！\n\n贴一个Hexo的官方链接：[https://hexo.io/zh-cn/docs](https://hexo.io/zh-cn/docs/)\n\n这次选择的主题是hexo官方主题市场中的[`GEEK`](https://github.com/sanjinhub/hexo-theme-geek)做了一些自定义修改，就这样上线吧！！！","source":"_posts/切换Jeykll到Hexo.md","raw":"---\ntitle: 切换Jeykll到Hexo.md\ndate: 2022-03-30 06:59:32\ntags:\n---\n\n\n\n在写[上一篇文章](/2022/02/16/Python-docx-操作word文档实战/)的时候发现Jekyll与文章的部分标记有冲突，导致github编译不通过，最终博客不能更新。\n\n这两天打算将公司内部的知识库也通过静态网页的方式进行共享，由于之前Jekyll的坑所以这次选择了hexo作为生成引擎。发现Hexo确实比Jekyll要简单太多了，文档中文友好。简直不要太香！\n\n贴一个Hexo的官方链接：[https://hexo.io/zh-cn/docs](https://hexo.io/zh-cn/docs/)\n\n这次选择的主题是hexo官方主题市场中的[`GEEK`](https://github.com/sanjinhub/hexo-theme-geek)做了一些自定义修改，就这样上线吧！！！","slug":"切换Jeykll到Hexo","published":1,"updated":"2022-03-30T07:10:14.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1d8bhx60000loscbbbb67hm","content":"<p>在写<a href=\"/2022/02/16/Python-docx-%E6%93%8D%E4%BD%9Cword%E6%96%87%E6%A1%A3%E5%AE%9E%E6%88%98/\">上一篇文章</a>的时候发现Jekyll与文章的部分标记有冲突，导致github编译不通过，最终博客不能更新。</p>\n<p>这两天打算将公司内部的知识库也通过静态网页的方式进行共享，由于之前Jekyll的坑所以这次选择了hexo作为生成引擎。发现Hexo确实比Jekyll要简单太多了，文档中文友好。简直不要太香！</p>\n<p>贴一个Hexo的官方链接：<a href=\"https://hexo.io/zh-cn/docs/\">https://hexo.io/zh-cn/docs</a></p>\n<p>这次选择的主题是hexo官方主题市场中的<a href=\"https://github.com/sanjinhub/hexo-theme-geek\"><code>GEEK</code></a>做了一些自定义修改，就这样上线吧！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在写<a href=\"/2022/02/16/Python-docx-%E6%93%8D%E4%BD%9Cword%E6%96%87%E6%A1%A3%E5%AE%9E%E6%88%98/\">上一篇文章</a>的时候发现Jekyll与文章的部分标记有冲突，导致github编译不通过，最终博客不能更新。</p>\n<p>这两天打算将公司内部的知识库也通过静态网页的方式进行共享，由于之前Jekyll的坑所以这次选择了hexo作为生成引擎。发现Hexo确实比Jekyll要简单太多了，文档中文友好。简直不要太香！</p>\n<p>贴一个Hexo的官方链接：<a href=\"https://hexo.io/zh-cn/docs/\">https://hexo.io/zh-cn/docs</a></p>\n<p>这次选择的主题是hexo官方主题市场中的<a href=\"https://github.com/sanjinhub/hexo-theme-geek\"><code>GEEK</code></a>做了一些自定义修改，就这样上线吧！！！</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl1d7s73d0001kgsc6nzobro1","category_id":"cl1d7s73k0003kgscg9otcmk3","_id":"cl1d7s73r000bkgscd8ku3c2s"},{"post_id":"cl1d7s73d0001kgsc6nzobro1","category_id":"cl1d7s73q0008kgsc1w4ehhpk","_id":"cl1d7s73s000ckgscf4b929uj"},{"post_id":"cl1d7s73h0002kgscff102zxi","category_id":"cl1d7s73k0003kgscg9otcmk3","_id":"cl1d7s73t000dkgsc3z2sa0qi"},{"post_id":"cl1d7s73h0002kgscff102zxi","category_id":"cl1d7s73q0008kgsc1w4ehhpk","_id":"cl1d7s73u000ekgsc9ee8gcns"},{"post_id":"cl1d7s753000fkgsch8kad3jt","category_id":"cl1d7s754000gkgsc657eh8g5","_id":"cl1d7s756000kkgsc6etag5t3"},{"post_id":"cl1d7s753000fkgsch8kad3jt","category_id":"cl1d7s755000jkgsc5jku4coo","_id":"cl1d7s756000lkgsch2gr2ynj"},{"post_id":"cl1d7s75b000mkgsc6dp4e05z","category_id":"cl1d7s75e000okgsc93m4a2vg","_id":"cl1d7s75k000wkgsc8pdh0j5f"},{"post_id":"cl1d7s75c000nkgschgpuc26u","category_id":"cl1d7s73k0003kgscg9otcmk3","_id":"cl1d7s75l000ykgscer6ogzid"},{"post_id":"cl1d7s75c000nkgschgpuc26u","category_id":"cl1d7s75j000ukgsc8b7wa2uf","_id":"cl1d7s75m0010kgsc6wy24uy2"},{"post_id":"cl1d7s75f000qkgsc2piz6bf4","category_id":"cl1d7s754000gkgsc657eh8g5","_id":"cl1d7s75m0011kgsc25qv752a"},{"post_id":"cl1d7s75f000qkgsc2piz6bf4","category_id":"cl1d7s75k000xkgsc4dtre7aj","_id":"cl1d7s75m0012kgscb41z0sdt"},{"post_id":"cl1d7s75h000skgscfke9ggw4","category_id":"cl1d7s754000gkgsc657eh8g5","_id":"cl1d7s75m0013kgscb5m62hy9"},{"post_id":"cl1d7s75h000skgscfke9ggw4","category_id":"cl1d7s75k000xkgsc4dtre7aj","_id":"cl1d7s75m0014kgscfdgh0o2t"}],"PostTag":[{"post_id":"cl1d7s73d0001kgsc6nzobro1","tag_id":"cl1d7s73m0004kgsc8l4vg7vr","_id":"cl1d7s73p0007kgscc6mb28eu"},{"post_id":"cl1d7s73h0002kgscff102zxi","tag_id":"cl1d7s73m0004kgsc8l4vg7vr","_id":"cl1d7s73r0009kgscht1p2bvi"},{"post_id":"cl1d7s753000fkgsch8kad3jt","tag_id":"cl1d7s755000hkgscg239677m","_id":"cl1d7s755000ikgsceqb0ep07"},{"post_id":"cl1d7s75b000mkgsc6dp4e05z","tag_id":"cl1d7s755000hkgscg239677m","_id":"cl1d7s75f000pkgscgjzkgw2o"},{"post_id":"cl1d7s75c000nkgschgpuc26u","tag_id":"cl1d7s73m0004kgsc8l4vg7vr","_id":"cl1d7s75h000rkgscfh07crnh"},{"post_id":"cl1d7s75f000qkgsc2piz6bf4","tag_id":"cl1d7s755000hkgscg239677m","_id":"cl1d7s75j000tkgscgl355fkw"},{"post_id":"cl1d7s75h000skgscfke9ggw4","tag_id":"cl1d7s755000hkgscg239677m","_id":"cl1d7s75k000vkgsc7c7qfxcu"}],"Tag":[{"name":"博客","_id":"cl1d7s73m0004kgsc8l4vg7vr"},{"name":"运维","_id":"cl1d7s755000hkgscg239677m"}]}}